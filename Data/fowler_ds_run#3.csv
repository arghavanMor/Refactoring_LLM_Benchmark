RefactMethod,BeforeRefact,AfterRefact,PromptType,LlmCode,LlmReview
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",ZeroShot,"```java
class Employee {
  private String name;
}

class Salesman extends Employee {
}

class Engineer extends Employee {
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Instruc,"```java
class Employee {
  protected String name;
}

class Salesman extends Employee {
  // name field is now inherited from Employee
}

class Engineer extends Employee {
  // name field is now inherited from Employee
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Context,"```java
class Employee {
    private String name;

    public Employee(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

class Salesman extends Employee {
    public Salesman(String name) {
        super(name);
    }
}

class Engineer extends Employee {
    public Engineer(String name) {
        super(name);
    }
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Rules,"```java
class Employee {
  protected String name;
}

class Salesman extends Employee {
}

class Engineer extends Employee {
}
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),ZeroShot,"```java
if (aPlan.withinRange(aRoom.daysTempRange))
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Instruc,"```java
if (aPlan.withinRange(aRoom.daysTempRange))
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Context,"```java
int low = aRoom.daysTempRange.getLow();
int high = aRoom.daysTempRange.getHigh();
if (aPlan.isWithinRange(low, high)) {
    // Code to execute if within range
}
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Rules,"```java
if (aPlan.withinRange(aRoom.daysTempRange))
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",ZeroShot,"```java
String[] orderData = orderString.split(""\\s+"");
String[] productDetails = orderData[0].split(""-"");
String productId = productDetails[1];
int productPrice = priceList.get(productId);
int quantity = Integer.parseInt(orderData[1]);
int orderPrice = quantity * productPrice;
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",Instruc,"```java
class OrderProcessor {
    private static class IntermediateData {
        String productId;
        int quantity;
        double productPrice;
    }

    private static IntermediateData extractOrderData(String orderString, Map<String, Double> priceList) {
        IntermediateData data = new IntermediateData();
        String[] orderData = orderString.split(""\\s+"");
        String[] productInfo = orderData[0].split(""-"");
        data.productId = productInfo[1];
        data.quantity = Integer.parseInt(orderData[1]);
        data.productPrice = priceList.get(data.productId);
        return data;
    }

    private static double calculateOrderPrice(IntermediateData data) {
        return data.quantity * data.productPrice;
    }

    public static double processOrder(String orderString, Map<String, Double> priceList) {
        IntermediateData data = extractOrderData(orderString, priceList);
        return calculateOrderPrice(data);
    }
}
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",Context,"```java
String[] orderData = orderString.split(""\\s+"");
int productPrice = priceList[orderData[0].split(""-"")[1]];
int orderPrice = Integer.parseInt(orderData[1]) * productPrice;
```",1
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},ZeroShot,"```java
class Employee {
    // Employee fields and methods
}
```",0
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Instruc,"```java
class Employee {
    // Fields and methods from both Employee and Salesman classes
}
```",1
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Context,"```java
class Employee {
    private String name;
    private int id;

    public Employee(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }
}

class Salesman extends Employee {
    private double commissionRate;

    public Salesman(String name, int id, double commissionRate) {
        super(name, id);
        this.commissionRate = commissionRate;
    }

    public double getCommissionRate() {
        return commissionRate;
    }
}
```",1
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Rules,"```java
class Employee {
    // Fields and methods from Salesman will be moved here
}
```",1
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",ZeroShot,"```java
class Order {
  private Warehouse warehouse;
  private PriorityPlan priorityPlan;

  Order(Warehouse warehouse) {
    this.warehouse = warehouse;
  }

  void setPriorityPlan(PriorityPlan priorityPlan) {
    this.priorityPlan = priorityPlan;
  }

  int getDaysToShip() {
    if (priorityPlan != null) {
      return priorityPlan.getDaysToShip();
    }
    return warehouse.getDaysToShip();
  }
}

class Warehouse {
  int getDaysToShip() {
    // Implementation for warehouse days to ship
    return 5;
  }
}

class PriorityPlan {
  int getDaysToShip() {
    // Implementation for priority plan days to ship
    return 2;
  }
}
```",1
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",Instruc,"```java
class Order {
  private OrderDelegate delegate;

  public Order() {
    this.delegate = null;
  }

  public Order(OrderDelegate delegate) {
    this.delegate = delegate;
  }

  public int getDaysToShip() {
    if (delegate != null) {
      return delegate.getDaysToShip();
    }
    return this._warehouse.daysToShip;
  }
}

class OrderDelegate {
  protected Order order;

  public OrderDelegate(Order order) {
    this.order = order;
  }

  public int getDaysToShip() {
    return 0; // Default implementation
  }
}

class PriorityOrderDelegate extends OrderDelegate {
  private PriorityPlan _priorityPlan;

  public PriorityOrderDelegate(Order order, PriorityPlan priorityPlan) {
    super(order);
    this._priorityPlan = priorityPlan;
  }

  @Override
  public int getDaysToShip() {
    return this._priorityPlan.daysToShip;
  }
}
```",1
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",Context,"```java
class Order {
    private Warehouse warehouse;

    public Order(Warehouse warehouse) {
        this.warehouse = warehouse;
    }

    public int getDaysToShip() {
        return warehouse.getDaysToShip();
    }
}

class PriorityOrder extends Order {
    private PriorityPlan priorityPlan;

    public PriorityOrder(Warehouse warehouse, PriorityPlan priorityPlan) {
        super(warehouse);
        this.priorityPlan = priorityPlan;
    }

    @Override
    public int getDaysToShip() {
        return priorityPlan.getDaysToShip();
    }
}
```",1
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",ZeroShot,"```java
class Product {
    private Price price;

    public Product(Price price) {
        this.price = new Price(price.getAmount());
    }

    public void applyDiscount(double discount) {
        double newAmount = this.price.getAmount() - discount;
        this.price = new Price(newAmount);
    }
}

class Price {
    private double amount;

    public Price(double amount) {
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }
}
```",1
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Instruc,"```java
class Product {
    private final Price price;

    public Product(Price price) {
        this.price = price;
    }

    public Price getPrice() {
        return price;
    }

    public Product applyDiscount(double discount) {
        Price newPrice = new Price(this.price.getAmount() - discount);
        return new Product(newPrice);
    }
}

class Price {
    private final double amount;

    public Price(double amount) {
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Price price = (Price) o;
        return Double.compare(price.amount, amount) == 0;
    }

    @Override
    public int hashCode() {
        return Double.hashCode(amount);
    }
}
```",1
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Context,"```java
class Product {
    private Price price;

    public void applyDiscount(double discount) {
        price.setAmount(price.getAmount() - discount);
    }
}

class Price {
    private double amount;

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
```",1
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Rules,"```java
class Price {
    private final double amount;

    public Price(double amount) {
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }

    public Price subtract(double discount) {
        return new Price(this.amount - discount);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Price price = (Price) o;
        return Double.compare(price.amount, amount) == 0;
    }

    @Override
    public int hashCode() {
        return Double.hashCode(amount);
    }
}

class Product {
    private Price _price;

    public Product(double priceAmount) {
        this._price = new Price(priceAmount);
    }

    public void applyDiscount(double discount) {
        this._price = this._price.subtract(discount);
    }

    public double getPriceAmount() {
        return this._price.getAmount();
    }
}
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",ZeroShot,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }
}

// Usage
Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Instruc,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
        System.out.println(""Name: "" + organization.getName());
        System.out.println(""Country: "" + organization.getCountry());
    }
}
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Context,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }

    public static void main(String[] args) {
        Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
    }
}
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Rules,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }
}
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",ZeroShot,"```java
class Employee {
}

class Engineer extends Employee {
  get quota {...}
}

class Salesman extends Employee {
  get quota {...}
}
```",0
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Instruc,"```java
class Employee {
  // Other methods and fields
}

class Engineer extends Employee {
  get quota {...}
}

class Salesman extends Employee {
  get quota {...}
}
```",0
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Context,"```java
class Employee {
    private double quota;

    public double getQuota() {
        return quota;
    }
}

class Engineer extends Employee {
    // Engineer-specific code
}

class Salesman extends Employee {
    // Salesman-specific code
}
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Rules,"```java
class Employee {
  // quota method is pushed down to subclasses
}

class Engineer extends Employee {
  get quota {...}
}

class Salesman extends Employee {
  get quota {...}
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",ZeroShot,"```java
public class InvoicePrinter {

    public void printOwing(Invoice invoice) {
        printBanner();
        double outstanding = calculateOutstanding();
        printDetails(invoice, outstanding);
    }

    private void printBanner() {
        // Implementation for printing the banner
    }

    private double calculateOutstanding() {
        // Implementation for calculating outstanding amount
        return 0.0; // Placeholder return value
    }

    private void printDetails(Invoice invoice, double outstanding) {
        System.out.println(""name: "" + invoice.getCustomer());
        System.out.println(""amount: "" + outstanding);
    }
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Instruc,"```java
public void printOwing(Invoice invoice) {
    printBanner();
    double outstanding = calculateOutstanding();
    printDetails(invoice, outstanding);
}

private void printDetails(Invoice invoice, double outstanding) {
    System.out.println(""name: "" + invoice.getCustomer());
    System.out.println(""amount: "" + outstanding);
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Context,"```java
public void printOwing(Invoice invoice) {
    printBanner();
    double outstanding = calculateOutstanding();

    // Print details
    System.out.println(""name: "" + invoice.getCustomer());
    System.out.println(""amount: "" + outstanding);
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Rules,"```java
public void printOwing(Invoice invoice) {
    printBanner();
    double outstanding = calculateOutstanding();
    printDetails(invoice, outstanding);
}

private void printDetails(Invoice invoice, double outstanding) {
    System.out.println(""name: "" + invoice.getCustomer());
    System.out.println(""amount: "" + outstanding);
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",ZeroShot,"```java
assert this.discountRate >= 0 && this.discountRate <= 1 : ""Discount rate must be between 0 and 1"";
base = base - (this.discountRate * base);
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Instruc,"```java
assert this.discountRate >= 0 && this.discountRate <= 1 : ""Discount rate should be between 0 and 1"";
if (this.discountRate)
  base = base - (this.discountRate * base);
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Context,"```java
if (this.discountRate != 0) {
    base -= this.discountRate * base;
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Rules,"```java
assert this.discountRate != null : ""Discount rate should not be null"";
if (this.discountRate) {
    base = base - (this.discountRate * base);
}
```",0
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",ZeroShot,"```java
double basePrice = order.quantity * order.itemPrice;
double quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double shippingCost = Math.min(order.quantity * order.itemPrice * 0.1, 100);

return basePrice - quantityDiscount + shippingCost;
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Instruc,"```java
double basePrice = order.quantity * order.itemPrice;
double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double shipping = Math.min(order.quantity * order.itemPrice * 0.1, 100);

return basePrice - discount + shipping;
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Context,"```java
double basePrice = order.quantity * order.itemPrice;
double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double shippingCost = Math.min(order.quantity * order.itemPrice * 0.1, 100);
return basePrice - discount + shippingCost;
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Rules,"```java
double basePrice = order.quantity * order.itemPrice;
double quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double shippingCost = Math.min(order.quantity * order.itemPrice * 0.1, 100);
return basePrice - quantityDiscount + shippingCost;
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,ZeroShot,"```java
return (anOrder.basePrice > 1000);
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Instruc,"```java
return (anOrder.basePrice > 1000);
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Context,"```java
return anOrder.basePrice > 1000;
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Rules,"```java
return (anOrder.basePrice > 1000);
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",ZeroShot,"```java
class Person {
    private List<Course> _courses = new ArrayList<>();

    public List<Course> getCourses() {
        return Collections.unmodifiableList(_courses);
    }

    public void addCourse(Course course) {
        _courses.add(course);
    }

    public void removeCourse(Course course) {
        _courses.remove(course);
    }
}
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Instruc,"```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Person {
    private List<String> courses = new ArrayList<>();

    public List<String> getCourses() {
        return Collections.unmodifiableList(courses);
    }

    public void addCourse(String course) {
        courses.add(course);
    }

    public void removeCourse(String course) {
        courses.remove(course);
    }

    public void setCourses(List<String> newCourses) {
        this.courses = new ArrayList<>(newCourses);
    }
}
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Context,"```java
class Person {
    private List<Course> courses;

    public List<Course> getCourses() {
        return Collections.unmodifiableList(courses);
    }

    public void setCourses(List<Course> courses) {
        this.courses = new ArrayList<>(courses);
    }
}
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Rules,"```java
class Person {
    private List<Course> _courses = new ArrayList<>();

    public List<Course> getCourses() {
        return Collections.unmodifiableList(_courses);
    }

    public void addCourse(Course course) {
        _courses.add(course);
    }

    public void removeCourse(Course course) {
        _courses.remove(course);
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",ZeroShot,"```java
public class DefaultOwner {
    private String firstName;
    private String lastName;

    public DefaultOwner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

// Usage
public class Main {
    private static DefaultOwner defaultOwner = new DefaultOwner(""Martin"", ""Fowler"");

    public static DefaultOwner getDefaultOwner() {
        return defaultOwner;
    }

    public static void setDefaultOwner(DefaultOwner defaultOwner) {
        Main.defaultOwner = defaultOwner;
    }

    public static void main(String[] args) {
        // Example usage
        DefaultOwner owner = getDefaultOwner();
        System.out.println(owner.getFirstName() + "" "" + owner.getLastName());
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Instruc,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

public class DefaultOwner {
    private static Owner defaultOwner = new Owner(""Martin"", ""Fowler"");

    public static Owner getDefaultOwner() {
        return defaultOwner;
    }

    public static void setDefaultOwner(Owner owner) {
        defaultOwner = owner;
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Context,"```java
public class DefaultOwner {
    private String firstName;
    private String lastName;

    public DefaultOwner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public static void main(String[] args) {
        DefaultOwner defaultOwner = new DefaultOwner(""Martin"", ""Fowler"");
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Rules,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

public class DefaultOwner {
    private static Owner defaultOwner = new Owner(""Martin"", ""Fowler"");

    public static Owner getDefaultOwner() {
        return defaultOwner;
    }

    public static void setDefaultOwner(Owner owner) {
        defaultOwner = owner;
    }
}
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",ZeroShot,"```java
class Employee {
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",0
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Instruc,"```java
class Employee {
  // Field 'quota' has been pushed down to subclasses
}

class Engineer extends Employee {
  // Engineer does not need the 'quota' field
}

class Salesman extends Employee {
  private String quota; // 'quota' field is now specific to Salesman
}
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Context,"```java
class Employee {
    private String quota;

    public String getQuota() {
        return quota;
    }

    public void setQuota(String quota) {
        this.quota = quota;
    }
}

class Engineer extends Employee {
    // Engineer-specific code
}

class Salesman extends Employee {
    // Salesman-specific code
}
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Rules,"```java
class Employee {
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",0
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",ZeroShot,"```java
public double getPayAmount() {
    if (isDead) {
        return deadAmount();
    }
    if (isSeparated) {
        return separatedAmount();
    }
    if (isRetired) {
        return retiredAmount();
    }
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Instruc,"```java
public double getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Context,"```java
public int getPayAmount() {
    if (isDead) {
        return deadAmount();
    }
    if (isSeparated) {
        return separatedAmount();
    }
    if (isRetired) {
        return retiredAmount();
    }
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Rules,"```java
public double getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",ZeroShot,"```java
class Person {
  private String name;

  public String getName() {
    return name;
  }
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Instruc,"```java
class Person {
    private final String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Context,"```java
class Person {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Rules,"```java
class Person {
  private final String name;

  public Person(String name) {
    this.name = name;
  }

  public String getName() {
    return name;
  }
}
```",1
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",ZeroShot,"```java
public double getDiscountedTotal() {
    return calculateDiscountedTotal();
}

public void setDiscount(double aNumber) {
    this._discount = aNumber;
}

private double calculateDiscountedTotal() {
    return this._baseTotal - this._discount;
}
```",1
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",Instruc,"```java
public double getDiscountedTotal() {
    return calculateDiscountedTotal();
}

public void setDiscount(double aNumber) {
    this._discount = aNumber;
}

private double calculateDiscountedTotal() {
    return this._baseTotal - this._discount;
}
```",1
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",Context,"```java
public double getDiscountedTotal() {
    return this.discountedTotal;
}

public void setDiscount(double discount) {
    double oldDiscount = this.discount;
    this.discount = discount;
    this.discountedTotal += oldDiscount - discount;
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",ZeroShot,"```java
public String foundPerson(String[] people) {
    for (String person : people) {
        if (person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"")) {
            return person;
        }
    }
    return """";
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Instruc,"```java
public String foundPerson(String[] people) {
    for (String person : people) {
        if (person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"")) {
            return person;
        }
    }
    return """";
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Context,"```java
public String foundPerson(String[] people) {
    for (String person : people) {
        if (person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"")) {
            return person;
        }
    }
    return """";
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Rules,"```java
public String foundPerson(String[] people) {
    for (String person : people) {
        if (person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"")) {
            return person;
        }
    }
    return """";
}
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",ZeroShot,"```java
abstract class Bird {
    abstract String getSpeed();
}

class EuropeanSwallow extends Bird {
    @Override
    String getSpeed() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    AfricanSwallow(int numberOfCoconuts) {
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    String getSpeed() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    NorwegianBlueParrot(int voltage) {
        this.voltage = voltage;
    }

    @Override
    String getSpeed() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class UnknownBird extends Bird {
    @Override
    String getSpeed() {
        return ""unknown"";
    }
}
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Instruc,"```java
abstract class Bird {
    abstract String getSpeed();
}

class EuropeanSwallow extends Bird {
    @Override
    String getSpeed() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    AfricanSwallow(int numberOfCoconuts) {
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    String getSpeed() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    NorwegianBlueParrot(int voltage) {
        this.voltage = voltage;
    }

    @Override
    String getSpeed() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class UnknownBird extends Bird {
    @Override
    String getSpeed() {
        return ""unknown"";
    }
}

class BirdFactory {
    static Bird createBird(String type, int numberOfCoconuts, int voltage) {
        switch (type) {
            case ""EuropeanSwallow"":
                return new EuropeanSwallow();
            case ""AfricanSwallow"":
                return new AfricanSwallow(numberOfCoconuts);
            case ""NorwegianBlueParrot"":
                return new NorwegianBlueParrot(voltage);
            default:
                return new UnknownBird();
        }
    }
}
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Context,"```java
switch (bird.type) {
    case ""EuropeanSwallow"":
        return ""average"";
    case ""AfricanSwallow"":
        return bird.numberOfCoconuts > 2 ? ""tired"" : ""average"";
    case ""NorwegianBlueParrot"":
        return bird.voltage > 100 ? ""scorched"" : ""beautiful"";
    default:
        return ""unknown"";
}
```",0
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Rules,"```java
abstract class Bird {
    abstract String getSpeed();
}

class EuropeanSwallow extends Bird {
    @Override
    String getSpeed() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    AfricanSwallow(int numberOfCoconuts) {
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    String getSpeed() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    NorwegianBlueParrot(int voltage) {
        this.voltage = voltage;
    }

    @Override
    String getSpeed() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class UnknownBird extends Bird {
    @Override
    String getSpeed() {
        return ""unknown"";
    }
}
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",ZeroShot,"```java
if (isSummer(aDate, plan)) {
    charge = quantity * plan.summerRate;
} else {
    charge = quantity * plan.regularRate + plan.regularServiceCharge;
}

private boolean isSummer(Date aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Instruc,"```java
if (isSummer(aDate, plan))
    charge = summerCharge(quantity, plan);
else
    charge = regularCharge(quantity, plan);

private boolean isSummer(Date aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}

private double summerCharge(int quantity, Plan plan) {
    return quantity * plan.summerRate;
}

private double regularCharge(int quantity, Plan plan) {
    return quantity * plan.regularRate + plan.regularServiceCharge;
}
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Context,"```java
boolean isSummer = !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
charge = isSummer ? quantity * plan.summerRate : quantity * plan.regularRate + plan.regularServiceCharge;
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Rules,"```java
public double calculateCharge(Date aDate, Plan plan, int quantity) {
    if (isSummer(aDate, plan)) {
        return summerCharge(plan, quantity);
    } else {
        return regularCharge(plan, quantity);
    }
}

private boolean isSummer(Date aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}

private double summerCharge(Plan plan, int quantity) {
    return quantity * plan.summerRate;
}

private double regularCharge(Plan plan, int quantity) {
    return quantity * plan.regularRate + plan.regularServiceCharge;
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",ZeroShot,"```java
class Party {
    get name() {...}
    get annualCost() {...}
}

class Department extends Party {
    get totalAnnualCost() {
        return this.annualCost();
    }
    get headCount() {...}
}

class Employee extends Party {
    get id() {...}
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Instruc,"```java
class Party {
    private String name;

    Party(String name) {
        this.name = name;
    }

    String getName() {
        return name;
    }

    double annualCost() {
        throw new UnsupportedOperationException(""Subclass must implement annualCost()"");
    }
}

class Department extends Party {
    private int headCount;

    Department(String name, int headCount) {
        super(name);
        this.headCount = headCount;
    }

    int getHeadCount() {
        return headCount;
    }

    @Override
    double annualCost() {
        // Implementation for totalAnnualCost
        return 0; // Replace with actual logic
    }
}

class Employee extends Party {
    private String id;

    Employee(String name, String id) {
        super(name);
        this.id = id;
    }

    String getId() {
        return id;
    }

    @Override
    double annualCost() {
        // Implementation for annualCost
        return 0; // Replace with actual logic
    }
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Context,"```java
abstract class Party {
    abstract double getAnnualCost();
    abstract String getName();
}

class Department extends Party {
    @Override
    double getAnnualCost() {
        // Implementation for total annual cost
    }

    @Override
    String getName() {
        // Implementation for name
    }

    int getHeadCount() {
        // Implementation for head count
    }
}

class Employee extends Party {
    @Override
    double getAnnualCost() {
        // Implementation for annual cost
    }

    @Override
    String getName() {
        // Implementation for name
    }

    int getId() {
        // Implementation for ID
    }
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Rules,"```java
class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get totalAnnualCost() {
    return annualCost();
  }
  get headCount() {...}
}

class Employee extends Party {
  get id() {...}
}
```",0
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",ZeroShot,"```java
List<String> names = input.stream()
    .filter(i -> ""programmer"".equals(i.getJob()))
    .map(i -> i.getName())
    .collect(Collectors.toList());
```",1
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",Instruc,"```java
List<String> names = input.stream()
    .filter(i -> ""programmer"".equals(i.getJob()))
    .map(i -> i.getName())
    .collect(Collectors.toList());
```",1
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",Context,"```java
List<String> names = new ArrayList<>();
for (Person person : input) {
    if (""programmer"".equals(person.getJob())) {
        names.add(person.getName());
    }
}
```",0
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",ZeroShot,"```java
class List {
    // List implementation
}

class Stack {
    private List list;

    public Stack() {
        this.list = new List();
    }

    // Delegate methods to List
    public void push(Object item) {
        // Implementation for push using list
    }

    public Object pop() {
        // Implementation for pop using list
    }

    // Other Stack methods
}
```",1
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Instruc,"```java
class List {
    // List implementation
}

class Stack {
    private List delegate = new List();

    // Forwarding methods for List functionality
    public void add(Object item) {
        delegate.add(item);
    }

    public void remove(Object item) {
        delegate.remove(item);
    }

    public int size() {
        return delegate.size();
    }

    // Stack-specific methods
    public void push(Object item) {
        add(item);
    }

    public Object pop() {
        if (size() == 0) {
            throw new IllegalStateException(""Stack is empty"");
        }
        Object item = delegate.get(size() - 1);
        remove(item);
        return item;
    }
}
```",1
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Context,"```java
class List {
    // List implementation
}

class Stack {
    private List list;

    public Stack() {
        this.list = new List();
    }

    // Stack methods using the list
}
```",1
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Rules,"```java
class List {
    // List implementation
}

class Stack {
    private List delegate;

    public Stack() {
        this.delegate = new List();
    }

    // Delegate methods to List
    public void push(Object item) {
        // Implement push using delegate
    }

    public Object pop() {
        // Implement pop using delegate
    }

    // Other Stack-specific methods
}
```",1
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",ZeroShot,"```java
class Reading {
    private double baseCharge;
    private double taxableCharge;

    public Reading(double baseCharge, double taxableCharge) {
        this.baseCharge = baseCharge;
        this.taxableCharge = taxableCharge;
    }

    public double getBaseCharge() {
        return baseCharge;
    }

    public double getTaxableCharge() {
        return taxableCharge;
    }
}

class ReadingCalculator {
    public static Reading calculateReading(double aReading) {
        double baseCharge = calculateBaseCharge(aReading);
        double taxableCharge = calculateTaxableCharge(baseCharge);
        return new Reading(baseCharge, taxableCharge);
    }

    private static double calculateBaseCharge(double aReading) {
        // Implementation of base charge calculation
        return aReading * 0.1; // Example calculation
    }

    private static double calculateTaxableCharge(double baseCharge) {
        // Implementation of taxable charge calculation
        return baseCharge * 1.2; // Example calculation
    }
}
```",1
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",Instruc,"```java
class Reading {
    private int base;
    private int taxableCharge;

    public Reading(int base, int taxableCharge) {
        this.base = base;
        this.taxableCharge = taxableCharge;
    }

    public int getBase() {
        return base;
    }

    public int getTaxableCharge() {
        return taxableCharge;
    }
}

class ReadingCalculator {
    public static Reading enrichReading(Reading aReading) {
        int base = calculateBase(aReading);
        int taxableCharge = calculateTaxableCharge(aReading);
        return new Reading(base, taxableCharge);
    }

    private static int calculateBase(Reading aReading) {
        // Logic to calculate base
        return aReading.getBase(); // Placeholder for actual logic
    }

    private static int calculateTaxableCharge(Reading aReading) {
        // Logic to calculate taxable charge
        return aReading.getTaxableCharge(); // Placeholder for actual logic
    }
}

// Client code
public class Main {
    public static void main(String[] args) {
        Reading rawReading = new Reading(100, 0); // Example initial values
        Reading enrichedReading = ReadingCalculator.enrichReading(rawReading);

        System.out.println(""Base: "" + enrichedReading.getBase());
        System.out.println(""Taxable Charge: "" + enrichedReading.getTaxableCharge());
    }
}
```",1
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",Context,"```java
class Reading {
    private int value;

    public Reading(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }
}

class ChargeCalculator {
    private Reading reading;

    public ChargeCalculator(Reading reading) {
        this.reading = reading;
    }

    public int base() {
        // Calculate base charge logic here
        return reading.getValue() * 2; // Example calculation
    }

    public int taxableCharge() {
        // Calculate taxable charge logic here
        return Math.max(0, base() - 100); // Example calculation
    }
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",ZeroShot,"```java
public void raiseSalary(Person aPerson, double raisePercentage) {
    aPerson.setSalary(aPerson.getSalary().multiply(BigDecimal.valueOf(1 + raisePercentage)));
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Instruc,"```java
public void raiseSalary(Person aPerson, double raisePercentage) {
    aPerson.salary = aPerson.salary.multiply(1 + raisePercentage);
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Context,"```java
public void applyRaise(Person aPerson, double raisePercentage) {
    aPerson.setSalary(aPerson.getSalary().multiply(BigDecimal.valueOf(1 + raisePercentage)));
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Rules,"```java
public void raiseSalary(Person aPerson, double raisePercentage) {
    aPerson.salary = aPerson.salary.multiply(1.0 + raisePercentage);
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",ZeroShot,"```java
public void setHeight(int value) {
    this._height = value;
}

public void setWidth(int value) {
    this._width = value;
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Instruc,"```java
public void setHeight(int value) {
    this._height = value;
}

public void setWidth(int value) {
    this._width = value;
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Context,"```java
public void setDimension(String name, int value) {
    if (""height"".equals(name)) {
        this.height = value;
    } else if (""width"".equals(name)) {
        this.width = value;
    }
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Rules,"```java
public void setHeight(int value) {
    this._height = value;
}

public void setWidth(int value) {
    this._width = value;
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",ZeroShot,"```java
function availableVacation(anEmployee) {
  int grade = anEmployee.grade;
  // calculate vacation...
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Instruc,"```java
function availableVacation(anEmployee) {
  int grade = anEmployee.grade;
  // calculate vacation...
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Context,"```java
int availableVacation(Employee anEmployee) {
    return calculateVacation(anEmployee, anEmployee.getGrade());
}

int calculateVacation(Employee anEmployee, int grade) {
    // calculate vacation...
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Rules,"```java
function availableVacation(anEmployee) {
  int grade = anEmployee.grade;
  // calculate vacation...
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",ZeroShot,"```java
class ChargeCalculator {
    private Customer customer;
    private double usage;

    public ChargeCalculator(Customer customer, double usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double calculateCharge() {
        return customer.getRate() * usage;
    }
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",Instruc,"```java
class ChargeCalculator {
  static double calculateCharge(Customer customer, double usage) {
    return customer.rate * usage;
  }
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",Context,"```java
class ChargeCalculator {
    private final Customer customer;
    private final double usage;

    public ChargeCalculator(Customer customer, double usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double calculateCharge() {
        return customer.getRate() * usage;
    }
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},ZeroShot,"```java
double circumference(double radius) {
    // Function implementation
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Instruc,"```java
double circumference(double r) {
    // Function implementation
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Context,"```java
public double calculateCircumference(double radius) {
    return 2 * Math.PI * radius;
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Rules,"```java
public double calculateCircumference(double diameter, String unit) {
    double radius = diameter / 2;
    // Assuming the calculation logic remains the same
    return 2 * Math.PI * radius;
}
```",1
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",ZeroShot,"```java
class Organization {
  get title() {...}
}
```",1
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",Instruc,"```java
class Organization {
  private String title;

  public Organization(String title) {
    this.title = title;
  }

  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }
}
```",1
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",Context,"```java
class Organization {
    private String name;

    public String getName() {
        return name;
    }
}
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,ZeroShot,"```java
boolean appliesToMass = states.contains(""MA"");
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,Instruc,"```java
boolean appliesToMass = states.contains(""MA"");
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,Context,"```java
boolean appliesToMass = states.contains(""MA"");
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",ZeroShot,"```java
class Account {
    // Moved overdraftCharge method to a new class
}

class AccountType {
    double overdraftCharge(Account account) {
        // Implementation of overdraftCharge
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Instruc,"```java
class Account {
    private AccountType type;

    public double getOverdraftCharge() {
        return type.getOverdraftCharge();
    }
}

class AccountType {
    public double getOverdraftCharge() {
        // Implementation of overdraftCharge logic
        return 0.0; // Replace with actual logic
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Context,"```java
class Account {
    double getOverdraftCharge() {
        // Implementation of overdraft charge calculation
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Rules,"```java
class Account {
    // Other methods and fields...
}

class AccountType {
    get overdraftCharge() {...}
}
```",0
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",ZeroShot,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);

int area = height * width;
System.out.println(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Instruc,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);
int area = height * width;
System.out.println(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Context,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);

int area = height * width;
System.out.println(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Rules,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);

int area = height * width;
System.out.println(area);
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",ZeroShot,"```java
public double targetTemperature(Plan aPlan, Thermostat thermostat) {
    double currentTemperature = thermostat.getCurrentTemperature();
    // rest of function...
}
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",Instruc,"```java
double targetTemperature(Plan aPlan, double currentTemperature) {
    // rest of function...
}
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",Context,"```java
public double targetTemperature(Plan aPlan) {
    double currentTemperature = thermostat.getCurrentTemperature();
    // rest of function...
}
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",ZeroShot,"```java
class Customer {
    private String name;

    public Customer(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public static Customer unknownCustomer() {
        return new Customer(""occupant"");
    }
}

// Usage
Customer aCustomer = ...; // Assume this is initialized somewhere
String customerName = aCustomer.getName();
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Instruc,"```java
class Customer {
    private String name;

    public Customer(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public boolean isUnknown() {
        return false;
    }
}

class UnknownCustomer extends Customer {
    public UnknownCustomer() {
        super(""occupant"");
    }

    @Override
    public boolean isUnknown() {
        return true;
    }
}

class CustomerFactory {
    public static Customer createCustomer(String name) {
        if (""unknown"".equals(name)) {
            return new UnknownCustomer();
        }
        return new Customer(name);
    }
}

// Usage
Customer aCustomer = CustomerFactory.createCustomer(""unknown"");
String customerName = aCustomer.getName();
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Context,"```java
if (""unknown"".equals(aCustomer)) {
    customerName = ""occupant"";
}
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Rules,"```java
// Introduce Null Object refactoring
class Customer {
    private String name;

    public Customer(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class NullCustomer extends Customer {
    public NullCustomer() {
        super(""occupant"");
    }
}

// Usage
Customer aCustomer = getCustomer(); // Assume this method returns a Customer or NullCustomer
String customerName = aCustomer.getName();
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,ZeroShot,"```java
// The code block is removed as it is unreachable due to the condition being always false.
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,Instruc,"```java
// Final version after applying REMOVE DEAD CODE refactoring
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,Context,"```java
// The if(false) block is redundant and can be removed entirely.
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,ZeroShot,"```java
int area = height * width;
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,Instruc,"```java
int area = height * width;
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,Context,"```java
int area = height * width;
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",ZeroShot,"```java
abstract class Employee {
    protected String name;

    protected Employee(String name) {
        this.name = name;
    }

    public abstract String getType();
}

class Engineer extends Employee {
    public Engineer(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Engineer"";
    }
}

class Manager extends Employee {
    public Manager(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Manager"";
    }
}

class Salesman extends Employee {
    public Salesman(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Salesman"";
    }
}

class EmployeeFactory {
    public static Employee createEmployee(String name, String type) {
        switch (type) {
            case ""Engineer"":
                return new Engineer(name);
            case ""Manager"":
                return new Manager(name);
            case ""Salesman"":
                return new Salesman(name);
            default:
                throw new IllegalArgumentException(""Invalid employee type"");
        }
    }
}
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Instruc,"```java
abstract class Employee {
    private String name;

    protected Employee(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public abstract int getType();
}

class Engineer extends Employee {
    public Engineer(String name) {
        super(name);
    }

    @Override
    public int getType() {
        return 0; // Type code for Engineer
    }
}

class Manager extends Employee {
    public Manager(String name) {
        super(name);
    }

    @Override
    public int getType() {
        return 1; // Type code for Manager
    }
}

class Salesman extends Employee {
    public Salesman(String name) {
        super(name);
    }

    @Override
    public int getType() {
        return 2; // Type code for Salesman
    }
}

class EmployeeFactory {
    public static Employee createEmployee(String name, int type) {
        switch (type) {
            case 0:
                return new Engineer(name);
            case 1:
                return new Manager(name);
            case 2:
                return new Salesman(name);
            default:
                throw new IllegalArgumentException(""Invalid type code"");
        }
    }
}
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Context,"```java
public Employee createEmployee(String name, String type) {
    return new Employee(name, type);
}
```",0
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Rules,"```java
abstract class Employee {
    private String name;

    protected Employee(String name) {
        this.name = name;
    }

    public abstract String getType();

    public String getName() {
        return name;
    }
}

class Engineer extends Employee {
    public Engineer(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Engineer"";
    }
}

class Manager extends Employee {
    public Manager(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Manager"";
    }
}

class EmployeeFactory {
    public static Employee createEmployee(String name, String type) {
        switch (type) {
            case ""Engineer"":
                return new Engineer(name);
            case ""Manager"":
                return new Manager(name);
            default:
                throw new IllegalArgumentException(""Invalid employee type"");
        }
    }
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",ZeroShot,"```java
public int getRating(Driver driver) {
    return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Instruc,"```java
public int getRating(Driver driver) {
    return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Context,"```java
public int getRating(Driver driver) {
    return driver.getNumberOfLateDeliveries() > 5 ? 2 : 1;
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Rules,"```java
public int getRating(Driver driver) {
    return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",ZeroShot,"```java
class Reading {
    private double value;

    public Reading(double value) {
        this.value = value;
    }

    public double base() {
        // Implementation of base calculation
        return value * 0.1; // Example calculation
    }

    public double taxableCharge() {
        // Implementation of taxable charge calculation
        return base() * 1.2; // Example calculation
    }

    public double calculateBaseCharge() {
        // Implementation of base charge calculation
        return base() + 5.0; // Example calculation
    }
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",Instruc,"```java
class Reading {
    private int base;
    private int taxableCharge;
    private int baseCharge;

    public Reading(int base, int taxableCharge, int baseCharge) {
        this.base = base;
        this.taxableCharge = taxableCharge;
        this.baseCharge = baseCharge;
    }

    public int getBase() {
        return base;
    }

    public int getTaxableCharge() {
        return taxableCharge;
    }

    public int calculateBaseCharge() {
        return baseCharge;
    }
}

class ReadingCalculator {
    private Reading reading;

    public ReadingCalculator(Reading reading) {
        this.reading = reading;
    }

    public int base() {
        return reading.getBase();
    }

    public int taxableCharge() {
        return reading.getTaxableCharge();
    }

    public int calculateBaseCharge() {
        return reading.calculateBaseCharge();
    }
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",Context,"```java
class Reading {
    private int value;

    public Reading(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }
}

class ChargeCalculator {
    private Reading reading;

    public ChargeCalculator(Reading reading) {
        this.reading = reading;
    }

    public int base() {
        // Implementation for base calculation
        return reading.getValue() * 2;
    }

    public int taxableCharge() {
        // Implementation for taxable charge calculation
        return Math.max(0, base() - 100);
    }

    public int calculateBaseCharge() {
        // Implementation for base charge calculation
        return base() + 50;
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",ZeroShot,"```java
class Customer {
  private Plan plan;

  Customer(Plan plan) {
    this.plan = plan;
  }

  get plan() {
    return this.plan;
  }

  get discountRate() {
    return this.plan.getDiscountRate();
  }
}

class Plan {
  private double discountRate;

  Plan(double discountRate) {
    this.discountRate = discountRate;
  }

  double getDiscountRate() {
    return this.discountRate;
  }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Instruc,"```java
class Customer {
  private Plan _plan;

  Customer(Plan plan) {
    this._plan = plan;
  }

  Plan getPlan() {
    return this._plan;
  }

  double getDiscountRate() {
    return this._plan.getDiscountRate();
  }
}

class Plan {
  private double _discountRate;

  Plan(double discountRate) {
    this._discountRate = discountRate;
  }

  double getDiscountRate() {
    return this._discountRate;
  }

  void setDiscountRate(double discountRate) {
    this._discountRate = discountRate;
  }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Context,"```java
class Customer {
    private Plan plan;
    private double discountRate;

    public Plan getPlan() {
        return plan;
    }

    public double getDiscountRate() {
        return discountRate;
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Rules,"```java
class Customer {
  private Plan _plan;

  get plan() { return this._plan; }
  get discountRate() { return this._plan.getDiscountRate(); }
}

class Plan {
  private double _discountRate;

  get discountRate() { return this._discountRate; }
  set discountRate(double value) { this._discountRate = value; }
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",ZeroShot,"```java
if (getBasePrice() > 1000)
    return getBasePrice() * 0.95;
else
    return getBasePrice() * 0.98;

private double getBasePrice() {
    return this._quantity * this._itemPrice;
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Instruc,"```java
public double calculatePrice() {
    if (getBasePrice() > 1000) {
        return getBasePrice() * 0.95;
    } else {
        return getBasePrice() * 0.98;
    }
}

private double getBasePrice() {
    return this._quantity * this._itemPrice;
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Context,"```java
double calculateFinalPrice() {
    double basePrice = this._quantity * this._itemPrice;
    double discountRate = (basePrice > 1000) ? 0.95 : 0.98;
    return basePrice * discountRate;
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Rules,"```java
public double getBasePrice() {
    return this._quantity * this._itemPrice;
}

public double calculatePrice() {
    if (getBasePrice() > 1000)
        return getBasePrice() * 0.95;
    else
        return getBasePrice() * 0.98;
}
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,ZeroShot,"```java
Customer customer = Customer.get(customerData.getId());
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Instruc,"```java
// Step 1: Create a repository for instances of the related object
public class CustomerRepository {
    private static Map<String, Customer> customers = new HashMap<>();

    public static Customer getCustomer(String customerId) {
        return customers.get(customerId);
    }

    public static void addCustomer(Customer customer) {
        customers.put(customer.getId(), customer);
    }
}

// Step 2: Modify the Customer class to use the repository
public class Customer {
    private String id;
    private String name;

    public Customer(String id, String name) {
        this.id = id;
        this.name = name;
        CustomerRepository.addCustomer(this);
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}

// Step 3: Use the repository to obtain the related object
Customer customer = CustomerRepository.getCustomer(customerData.getId());
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Context,"```java
Customer customer = new Customer(customerData);
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Rules,"```java
Customer customer = Customer.getCustomer(customerData);
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",ZeroShot,"```java
public String renderPerson(Person person) {
    StringBuilder result = new StringBuilder();
    result.append(String.format(""<p>title: %s</p>"", person.getPhoto().getTitle()));
    result.append(photoData(person.getPhoto()));
    return result.toString();
}

private String photoData(Photo aPhoto) {
    return String.format(""<p>location: %s</p><p>date: %s</p>"", 
                         aPhoto.getLocation(), 
                         aPhoto.getDate().toDateString());
}
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",Instruc,"```java
result.push(photoDataWithTitle(person.photo));

function photoDataWithTitle(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`
  ];
}
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",Context,"```java
result.push(String.format(""<p>title: %s</p>"", person.photo.title));
result.concat(getPhotoData(person.photo));

private static List<String> getPhotoData(Photo photo) {
    return Arrays.asList(
        String.format(""<p>location: %s</p>"", photo.location),
        String.format(""<p>date: %s</p>"", photo.date.toDateString())
    );
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",ZeroShot,"```java
public double getTotalOutstanding() {
    return customer.getInvoices().stream()
                   .mapToDouble(Invoice::getAmount)
                   .sum();
}

public void sendBill() {
    // Logic to send the bill
}

public double getTotalOutstandingAndSendBill() {
    double totalOutstanding = getTotalOutstanding();
    sendBill();
    return totalOutstanding;
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Instruc,"```java
// Query function
public double getTotalOutstanding() {
    return customer.invoices.stream()
                            .mapToDouble(invoice -> invoice.amount)
                            .sum();
}

// Modifier function
public void sendBill() {
    // Logic to send the bill
}

// Original function refactored
public void getTotalOutstandingAndSendBill() {
    double totalOutstanding = getTotalOutstanding();
    sendBill();
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Context,"```java
public double calculateTotalOutstanding() {
    return customer.getInvoices().stream()
                  .mapToDouble(Invoice::getAmount)
                  .sum();
}

public void sendBill() {
    // Logic to send the bill
}

public double getTotalOutstandingAndSendBill() {
    double totalOutstanding = calculateTotalOutstanding();
    sendBill();
    return totalOutstanding;
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Rules,"```java
public double getTotalOutstanding() {
    return customer.invoices.stream().mapToDouble(invoice -> invoice.amount).sum();
}

public void sendBill() {
    // Logic to send the bill
}

public void getTotalOutstandingAndSendBill() {
    double totalOutstanding = getTotalOutstanding();
    sendBill();
}
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",ZeroShot,"```java
manager = aPerson.getManager();
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Instruc,"```java
// In the Person class
public Manager getManager() {
    return department.getManager();
}

// Client code
manager = aPerson.getManager();
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Context,"```java
manager = aPerson.getDepartment().getManager();
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Rules,"```java
manager = aPerson.getManager();
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",ZeroShot,"```java
class Employee {
  String get name() {...}
}

class Salesman extends Employee {
  // name method is now inherited from Employee
}

class Engineer extends Employee {
  // name method is now inherited from Employee
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Instruc,"```java
class Employee {
  String get name() {
    // Implementation of the name method
  }
}

class Salesman extends Employee {
  // No need for the name method here as it is inherited from Employee
}

class Engineer extends Employee {
  // No need for the name method here as it is inherited from Employee
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Context,"```java
class Employee {
    private String name;

    public Employee(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class Salesman extends Employee {
    public Salesman(String name) {
        super(name);
    }
}

class Engineer extends Employee {
    public Engineer(String name) {
        super(name);
    }
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Rules,"```java
class Employee {
  get name() {...}
}

class Salesman extends Employee {
}

class Engineer extends Employee {
}
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",ZeroShot,"```java
PricingPlan pricingPlan = retrievePricingPlan();
Order order = retrieveOrder();
double chargePerUnit = pricingPlan.getUnit();
double charge;
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Instruc,"```java
const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retrieveOrder();
let charge;
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Context,"```java
PricingPlan pricingPlan = retrievePricingPlan();
Order order = retrieveOrder();
double charge;
double chargePerUnit = pricingPlan.getUnit();
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Rules,"```java
const pricingPlan = retrievePricingPlan();
const order = retrieveOrder();
const chargePerUnit = pricingPlan.unit;
let charge;
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",ZeroShot,"```java
class Person {
  private TelephoneNumber _telephoneNumber;

  public Person() {
    this._telephoneNumber = new TelephoneNumber();
  }

  public String getOfficeAreaCode() {
    return _telephoneNumber.getAreaCode();
  }

  public String getOfficeNumber() {
    return _telephoneNumber.getNumber();
  }
}

class TelephoneNumber {
  private String _areaCode;
  private String _number;

  public String getAreaCode() {
    return _areaCode;
  }

  public String getNumber() {
    return _number;
  }
}
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Instruc,"```java
class Person {
  private TelephoneNumber _telephoneNumber;

  Person() {
    this._telephoneNumber = new TelephoneNumber();
  }

  get officeAreaCode() {
    return this._telephoneNumber.getAreaCode();
  }

  get officeNumber() {
    return this._telephoneNumber.getNumber();
  }
}

class TelephoneNumber {
  private String _areaCode;
  private String _number;

  getAreaCode() {
    return this._areaCode;
  }

  getNumber() {
    return this._number;
  }
}
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Context,"```java
class Person {
    private String officeAreaCode;
    private String officeNumber;

    public String getOfficeAreaCode() {
        return officeAreaCode;
    }

    public String getOfficeNumber() {
        return officeNumber;
    }
}
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Rules,"```java
class Person {
  private TelephoneNumber _telephoneNumber;

  Person() {
    this._telephoneNumber = new TelephoneNumber();
  }

  get officeAreaCode() {
    return this._telephoneNumber.getAreaCode();
  }

  get officeNumber() {
    return this._telephoneNumber.getNumber();
  }
}

class TelephoneNumber {
  private String _areaCode;
  private String _number;

  getAreaCode() {
    return this._areaCode;
  }

  getNumber() {
    return this._number;
  }
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",ZeroShot,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {
    return 0;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Instruc,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {
    return 0;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Context,"```java
if (isEligibleForBenefit(anEmployee)) {
    return 0;
}

private boolean isEligibleForBenefit(Employee anEmployee) {
    return anEmployee.seniority < 2 || 
           anEmployee.monthsDisabled > 12 || 
           anEmployee.isPartTime;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Rules,"```java
if (isEligibleForZero(anEmployee)) {
    return 0;
}

private boolean isEligibleForZero(Employee anEmployee) {
    return anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime;
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",ZeroShot,"```java
class Party {
  constructor(name) {
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Instruc,"```java
class Party {
  constructor(name) {
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Context,"```java
class Party {
    // Common party-related fields and methods can be added here
}

class Employee extends Party {
    private String name;
    private String id;
    private double monthlyCost;

    public Employee(String name, String id, double monthlyCost) {
        super();
        this.name = name;
        this.id = id;
        this.monthlyCost = monthlyCost;
    }

    // Getters and setters can be added here for better encapsulation
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Rules,"```java
class Party {
  constructor(name, id, monthlyCost) {
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name, id, monthlyCost);
  }
}
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,ZeroShot,"```java
leadEngineer = Employee.createLeadEngineer(document.leadEngineer);
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Instruc,"```java
// Factory function
public static Employee createLeadEngineer(Document document) {
    return new Employee(document.leadEngineer, 'E');
}

// Usage
leadEngineer = createLeadEngineer(document);
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Context,"```java
leadEngineer = new Employee(document.getLeadEngineer(), EmployeeType.ENGINEER);
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Rules,"```java
// Factory method
public static Employee createLeadEngineer(Document document) {
    return new Employee(document.leadEngineer, 'E');
}

// Usage
leadEngineer = Employee.createLeadEngineer(document);
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",ZeroShot,"```java
class Person {
    private String genderCode;

    public Person(String genderCode) {
        this.genderCode = genderCode;
    }

    public String getGenderCode() {
        return genderCode;
    }
}
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Instruc,"```java
class Person {
    private String genderCode;

    private Person(String genderCode) {
        this.genderCode = genderCode;
    }

    public static Person createMale() {
        return new Person(""M"");
    }

    public static Person createFemale() {
        return new Person(""F"");
    }

    public static Person createDefault() {
        return new Person(""X"");
    }

    public String getGenderCode() {
        return genderCode;
    }
}
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Context,"```java
class Person {
    String getGenderCode() {
        return ""X"";
    }
}

class Male extends Person {
    @Override
    String getGenderCode() {
        return ""M"";
    }
}

class Female extends Person {
    @Override
    String getGenderCode() {
        return ""F"";
    }
}
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Rules,"```java
class Person {
    private final String genderCode;

    private Person(String genderCode) {
        this.genderCode = genderCode;
    }

    public static Person createMale() {
        return new Person(""M"");
    }

    public static Person createFemale() {
        return new Person(""F"");
    }

    public String getGenderCode() {
        return genderCode;
    }
}
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",ZeroShot,"```java
class DateRange {
    private final Date startDate;
    private final Date endDate;

    public DateRange(Date startDate, Date endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public Date getEndDate() {
        return endDate;
    }
}

class Invoice {
    public double amountInvoiced(DateRange dateRange) {
        // Implementation
    }

    public double amountReceived(DateRange dateRange) {
        // Implementation
    }

    public double amountOverdue(DateRange dateRange) {
        // Implementation
    }
}
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Instruc,"```java
class DateRange {
    private final Date startDate;
    private final Date endDate;

    public DateRange(Date startDate, Date endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public Date getEndDate() {
        return endDate;
    }
}

class Invoice {
    public double amountInvoiced(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }

    public double amountReceived(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }

    public double amountOverdue(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }
}
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Context,"```java
public class InvoiceCalculator {

    public double amountInvoiced(Date startDate, Date endDate) {
        // Implementation for calculating the invoiced amount
    }

    public double amountReceived(Date startDate, Date endDate) {
        // Implementation for calculating the received amount
    }

    public double amountOverdue(Date startDate, Date endDate) {
        // Implementation for calculating the overdue amount
    }
}
```",0
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Rules,"```java
class DateRange {
    private final Date startDate;
    private final Date endDate;

    public DateRange(Date startDate, Date endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public Date getEndDate() {
        return endDate;
    }
}

class Invoice {
    public double amountInvoiced(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }

    public double amountReceived(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }

    public double amountOverdue(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }
}
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",ZeroShot,"```java
int totalAge = 0;
for (Person p : people) {
    totalAge += p.age;
}
double averageAge = (double) totalAge / people.length;

int totalSalary = 0;
for (Person p : people) {
    totalSalary += p.salary;
}
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",Instruc,"```java
double totalSalary = 0;
for (Person p : people) {
    totalSalary += p.getSalary();
}

double averageAge = 0;
for (Person p : people) {
    averageAge += p.getAge();
}
averageAge = averageAge / people.length;
```",0
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",Context,"```java
double averageAge = people.stream().mapToInt(p -> p.age).average().orElse(0);
int totalSalary = people.stream().mapToInt(p -> p.salary).sum();
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),ZeroShot,"```java
orders.stream()
      .filter(o -> Priority.HIGH.equals(o.getPriority())
                || Priority.RUSH.equals(o.getPriority()));
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Instruc,"```java
class Order {
    private Priority priority;

    public Order(Priority priority) {
        this.priority = priority;
    }

    public Priority getPriority() {
        return priority;
    }

    public void setPriority(Priority priority) {
        this.priority = priority;
    }
}

class Priority {
    private String value;

    public Priority(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}

List<Order> highPriorityOrders = orders.stream()
    .filter(o -> ""high"".equals(o.getPriority().getValue()) 
              || ""rush"".equals(o.getPriority().getValue()))
    .collect(Collectors.toList());
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Context,"```java
orders.stream()
      .filter(o -> ""high"".equals(o.getPriority()) || ""rush"".equals(o.getPriority()))
      .collect(Collectors.toList());
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Rules,"```java
orders.stream()
      .filter(o -> Priority.HIGH.equals(o.getPriority()) 
      || Priority.RUSH.equals(o.getPriority()));
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",ZeroShot,"```java
outStream.write(""<p>title: "" + person.photo.title + ""</p>\n"");
outStream.write(""<p>location: "" + person.photo.location + ""</p>\n"");
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",Instruc,"```java
outStream.write(""<p>title: "" + person.photo.title + ""</p>\n"");
outStream.write(""<p>location: "" + person.photo.location + ""</p>\n"");
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",Context,"```java
emitPhotoData(outStream, person.getPhoto());

private void emitPhotoData(OutputStream outStream, Photo photo) throws IOException {
    outStream.write(String.format(""<p>title: %s</p>\n"", photo.getTitle()).getBytes());
    outStream.write(String.format(""<p>location: %s</p>\n"", photo.getLocation()).getBytes());
}
```",1
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",ZeroShot,"```java
class Person {
  get officeAreaCode() {return this._areaCode;}
  get officeNumber()   {return this._number;}
}
```",0
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Instruc,"```java
class Person {
  private String _areaCode;
  private String _number;

  String getOfficeAreaCode() {
    return this._areaCode;
  }

  String getOfficeNumber() {
    return this._number;
  }

  void setOfficeAreaCode(String areaCode) {
    this._areaCode = areaCode;
  }

  void setOfficeNumber(String number) {
    this._number = number;
  }
}
```",0
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Context,"```java
class Person {
    private TelephoneNumber telephoneNumber;

    public String getOfficeAreaCode() {
        return telephoneNumber.getAreaCode();
    }

    public String getOfficeNumber() {
        return telephoneNumber.getNumber();
    }
}

class TelephoneNumber {
    private String areaCode;
    private String number;

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",1
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Rules,"```java
class Person {
  private String _areaCode;
  private String _number;

  get officeAreaCode() { return this._areaCode; }
  get officeNumber()   { return this._number; }
}
```",0
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,ZeroShot,"```java
manager = aPerson.getDepartment().getManager();

class Person {
  private Department department;

  public Department getDepartment() {
    return this.department;
  }
}

class Department {
  private Manager manager;

  public Manager getManager() {
    return this.manager;
  }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Instruc,"```java
manager = aPerson.getDepartment().getManager();

class Person {
  private Department department;

  public Department getDepartment() {
    return this.department;
  }
}

class Department {
  private Manager manager;

  public Manager getManager() {
    return this.manager;
  }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Context,"```java
manager = aPerson.getManager();

class Person {
    public Manager getManager() {
        return this.department.getManager();
    }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Rules,"```java
manager = aPerson.getDepartment().getManager();

class Person {
  Department getDepartment() { return this.department; }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",ZeroShot,"```java
class ScoreCommand {
    private Candidate candidate;
    private MedicalExam medicalExam;
    private ScoringGuide scoringGuide;
    private int result;
    private int healthLevel;

    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        this.candidate = candidate;
        this.medicalExam = medicalExam;
        this.scoringGuide = scoringGuide;
        this.result = 0;
        this.healthLevel = 0;
    }

    public void execute() {
        // long body code
    }

    public int getResult() {
        return result;
    }

    public int getHealthLevel() {
        return healthLevel;
    }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Instruc,"```java
class ScoreCommand {
    private Candidate candidate;
    private MedicalExam medicalExam;
    private ScoringGuide scoringGuide;

    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        this.candidate = candidate;
        this.medicalExam = medicalExam;
        this.scoringGuide = scoringGuide;
    }

    public int execute() {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}

// Original function as a forwarding function
public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
    return new ScoreCommand(candidate, medicalExam, scoringGuide).execute();
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Context,"```java
public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
    int result = 0;
    int healthLevel = 0;
    // Refactored long body code
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Rules,"```java
class ScoreCommand {
    private Candidate candidate;
    private MedicalExam medicalExam;
    private ScoringGuide scoringGuide;
    private int result;
    private int healthLevel;

    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        this.candidate = candidate;
        this.medicalExam = medicalExam;
        this.scoringGuide = scoringGuide;
    }

    public int execute() {
        result = 0;
        healthLevel = 0;
        // long body code
        return result;
    }
}

// Usage
ScoreCommand scoreCommand = new ScoreCommand(candidate, medicalExam, scoringGuide);
int score = scoreCommand.execute();
```",1
