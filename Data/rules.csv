ID,Name,Logic Rule,English Description
1,"Add Parameter","added_parameter(mFullName, X, addedParam) → add_parameter(mFullname, addedParam)","A parameter is added to a method."
2,"Change Bidirectional Association to Unidirectional","before_field(fFullName, X, t2FullName) ∧ after_field(fFullName, X, t2FullName) ∧ before_fieldoftype(fFullName, tpFullName) ∧ after_fieldoftype(fFullName, tpFullName) ∧ deleted_field(f2FullName, X, tFullName) ∧ deleted_fieldoftype(f2FullName, t2pFullName) ∧ ((tFullName.equals(tpFullName) ∧ t2pFullName.contains(t2FullName) ) ∨ ( t2FullName.equals(t2pFullName) ∧ tpFullName.contains(tFullName) ) ) → change_bi_to_uni(tFullName, t2FullName)","You have a two-way as-sociation but one class no longer needs features from the other. Drop the un-needed end of the associa-tion."
3,"Change Reference to Value","deleted_method(mFactFullName, X, tFullName) ∧ before_method(mCtorFullName, init(), tFullName) ∧ deleted_calls(mFactFullName, mCtorFullName) ∧ added_calls(mClientFullName, mCtorFullName) ∧ deleted_calls(mClientFullName, mFactFull-Name) ∧ deleted_methodmodifier(mCtorFullName, private) ∧ after_fieldoftype(X, tFullName) ∧ after_fieldoftype(X, tFullName) ∧ after_method(X, equals(), tFullName) ∧ after_method(x, hashCode(), tFullName) → change_reference_to_value(tFullName)","You have a reference object that is small, immutable, and awkward to manage. Turn it into a value object."
4,"Change Unidirectional Association to Bidirectional","before field(fFullName, X, t2FullName) ∧ after_field(fFullName, X, t2FullName) ∧ before_fieldoftype(fFullName, tpFullName) ∧ after_fieldoftype(fFullName, tpFullName) ∧ added_field(f2FullName, X, tFullName) ∧ added_fieldoftype(f2FullName, t2pFullName) ∧ ( ( tFullName.equals(tpFullName) ∧ t2pFullName.contains(t2FullName) ) ∨ ( t2FullName.equals(t2pFullName) ∧ tpFullName.contains(tFullName) ) ) → change_uni_to_bi(tFullName, t2FullName)","You have two classes that need to use each other’s features, but there is only a one-way link. Add back pointers (and change mod-ifiers to update both sets)."
5,"Change Value to Reference","replace constructor with method(mCtorFullName, mFactFullName) ∧ added_method(mFactFullName, X, tFullName) ∧ before_fieldoftype(X, tFullName) ∧ after_fieldoftype(X, tFullName) ∧ NOT(after_method(X, equals(), tFullName); after_method(X, hashCode(), tFullName)) → change_value_to_reference(tFullName)","You have a class with many equal instances that you want to replace with a single object. Turn the object into a reference object."
6,"Collapse Hierarchy","(deleted_subtype(tParentFullName, tChild-FullName) ∧ (pull_up_field(fShortName, tChildFullName, tParentFullName) ∨ pull_up_method(mShortName, tChild-FullName, tParentFullName))) ∨ (before_subtype(tParentFullName, tChildFullName) ∧ deleted_type(tParentFullName, tParentShortName, package) ∧ (push_down_field(fShortName, tParentFullName, tChildFullName) ∨ push_down_method(mShortName, tParent-FullName, tChildFullName) )) → collapse_hierarchy(tParentFullName, tChildFullname)","A superclass and subclass are not very different. Merge them together"
7,"Consolidate Conditional Expression","(deleted_conditional(old_cond1, ifPart, elsePart, mFullName) ∧ deleted_conditional(old_cond2, ifPart, elsePart, mFullName) ∧ added_conditional(new_cond, ifPart, elsePart, mFullName) ∧ extract_method(mFullName, X, extMthdBody, X) ∧ extMthdBody.contains(old_cond1) ∧ extMthdBody.contains(old_cond2)) ∨ (deleted_conditional(old_cond1, ifPart, elsePart, mFullName) ∧ deleted_conditional(old_cond2, ifPart, elsePart, mFullName) ∧ added_conditional(new_cond, ifPart, elsePart, mFullName) ∧ new_cond.contains(old_cond1) ∧ new_cond.contains(old_cond2)) → consolidate_cond_expression(mFullName)","You have a sequence of con-ditional tests with the same result. Combine them into a single conditional expres-sion and extract it."
8,"Slide Statements","deleted_conditional(cond, old_ifPart, old_elsePart, mfullName) ∧ added_conditional(cond, new_ifPart, new_elsePart, mFullName) ∧ after_methodbody(mFullName, mbody) ∧ similar_fragments(old_elsePart, new_elsePart, mbody) ∧ similar_fragments(old_ifPart, new_ifPart, mbody) → consolidate duplicate_cond_fragments(mfullName)","You have a complicated conditional (if-then-else) statement. Extract methods from the condition, then part, and else parts."
9,"Convert Procedural Design to Objects","We have no way to measure the “proceduralness” of code.","You have code written in a procedural style. Turn the data records into objects, break up the behavior, and move the behavior to the objects."
10,"Decompose Conditional","deleted_conditional(condition, ifBlock, elseBlock, mFullName) ∧ extract_method(mFullName, m1FullName, conditionB, t1FullName) ∧ extract_method(mFullName, m2FullName, ifBlockB, t2FullName) ∧ extract_method(mFullName, m3FullName, elseBlockB, t3FullName) → decompose_conditional(condition, ifBlock, elseBlock, mFullName)","You have a complicated conditional. Extract methods from the condition, then and else parts"
11,"Duplicate Observed Data","We have no way to detect the observer","You have domain data avail-able only in a GUI control, and domain methods need access. Copy the data to a domain object. Set up an observer to synchronize the two pieces of data."
12,"Encapsulate Collection","before_field(fFullName, X, tFullName) ∧ after_field(fFullName, X, tFullName) ∧ before_accesses(fFullName, getmFullName) ∧ after_accesses(fFullName, getmFullName) ∧ added_calls(getmFullName, unmodmFullName) ∧ after_method(getmFullName, getmShortName, tFullName) ∧ added_method(addmFullName, addmShortName, tFullName) ∧ added_accesses(fFullName, addmFullName) ∧ added_method(remmFUllName, remmShortName, tFullName) ∧ added_accesses(fFullName, remmFullName) ∧ deleted_method(setmFullName, setmShortName, tFullName) ∧ deleted_accesses(fFullName, setmFullName) ∧ getmShortName.startsWith(get) ∧ addmShortName.startsWith(add) ∧ remmShortName.startsWith(remove) ∧ setmShortName.startsWith(set) ∧ unmodmFullName.startsWith(java.util.Collections.unmodifiable) → encapsulate_collection(fFullName)","A method returns a col-lection. Make it return a read-only view and provide add/remove methods"
13,"Encapsulate Downcast","added_cast(X, tFullName, mFullName) ∧ added_return(mFullName, tFullName) ∧ deleted_return(mFullName, oldtFullName) ∧ ( after_subtype(oldtFullName, tFullName) ∨ ( after_subtype(oldtFullName, othertFullName) ∧ after_subtype(othertFullName, tFullName) ) ) → encapsulate_downcast(mFullName, tFullName)","A method returns an ob-ject that needs to be down-casted by its callers. Move the downcast to within the method."
14,"Encapsulate Variable","deleted_fieldmodifier(fFullName, public) ∧ added_fieldmodifier(fFullName, private) ∧ added_getter(mGetFullName, fFullName) ∧ added_setter(mSetFullName, fFullName) → encapsulate_field(fFullName)","There is a public field. Make it private and provide accessors."
15,"Extract Class","added_type(newtFullName, newtShortName, pkg2) ∧ before_type(tFullName, tShortName, pkg) ∧ after_type(tFullName, tShortName, pkg) ∧ added_field(fFullname, X, tFullname) ∧ added_fieldoftype(fFullName, newtFullName) ∧ ( move_field(fShortName, tFullName, newtFullName) ∨ move_method(mShortName, tFullName, newtFullName) ) → extract_class(newtFullName, tFullName)","You have a class doing the work of two. Create a new class and move the relevant fields and methods to the new class."
16,"Extract Hierarchy","replace_type_code_with_subclasses(tFullName) ∨ replace_type_code_with_state(tFullName, X) ∨ (replace_conditional_with_polymorphism(mFullName) ∧ before_method(mFullName, X, tFullName)) → extract_hierarchy(tFullName)","You have a class that is doing too much work, at least in part through many conditional statements. Cre-ate a hierarchy of classes in which each subclass repre-sents a special case."
17,"Extract Interface","added_type(interfacetFullName, X, X) ∧ added_implements(interfacetFullName, othertFullName) ∧ before_type(othertFullName, X, X) → extract_interface(interfacetFullName, othertFullName)","Several clients use the same subset of a class’s interface, or two classes have part of their interfaces in common. Extract the subset into an interface."
18,"Extract Function","added_method(newmFullName, newmShortName, tFullName) ∧ similarbody(newmFullName, newmBody, mFullname, mBody) ∧ after_method(mFullName, X, tFullName) ∧ added_calls(mFullName, newmFullName) → extract_method(mFullName, newmFullName, newmBody, tFullName)","You have a code fragment that can be grouped to-gether. Turn the fragment into a method whose name explains the purpose of the method."
19,"Extract Subclass","added_subtype(superTFullName, tFullName) ∧ NOT(before_type(tFullName, X, X)) ∧ (move_field(fShortName, superTFullName, tFullName) ∨ move_method(mShortName, superTFullName, tFullName)) → extract_subclass(superTFullName, tFullName)","A class has features that are used only in some instances. Create a subclass for that subset of features."
20,"Extract Superclass","added_subtype(tFullName, subtFullName) ∧ NOT(before_type(tFullName, X, X)) ∧ (move_field(fShortName, subtFullName, tFullName) ∨ move_method(mShortName, subTFullName, tFullName)) → extract_superclass(subtFullName, tFullName)","You have two classes with similar features. Create a superclass and move the common features to the su-perclass."
21,"Form Template Method","same_body(calleeMFullName1, new mbody1, mFullName1, mbody1) ∧ same_body(calleeMFullName2, new_mbody2, mFullName2, mbody2) ∧ NOT(equals(mFullName1, mFullName2)) ∧ NOT(equals(sub_tFullName1, sub_tFullName2)) ∧ added_method(mFullname, mShortName, super_tFullName) ∧ deleted_method(mFullName1, mShortName, sub_tFullName1) ∧ deleted_method(mFullName2, mShortName, sub_tFullName2) ∧ added_calls(mFullName, calleeMFullName) ∧ added_inheritedmethod(calleemShortName, super_tFullName, sub_tFullName1) ∧ added_inheritedmethod(calleemShortName, super_tFullName, sub_tFullName2) ∧ after_method(calleeMFullName1, calleemShortName, sub_tFullName1) ∧ after_method(calleeMFullName2, calleemShortName, sub_tFullName2) ∧ after_method(calleeMFullName, calleemShortName, super_tFullName) ∧ after_subtype(super_tFullName, sub_tFullName1) ∧ after_subtype(super_tFullName, sub_tFullName2) → form_template_method(super_tFullName, sub_tFullName1, sub_tFullName2, mFullName)","You have two methods in subclasses that perform sim-ilar steps in the same or-der, yet the steps are differ-ent. Get the steps into meth-ods with the same signature, so that the original methods become the same. Then you can pull them up."
22,"Hide Delegate","after_method(clientmFullName, X, clienttFullName) ∧ deleted_calls(clientmFullName, delegatemFullName) ∧ added_calls(clientmFullName, servermFullName) ∧ added_method(servermFullName, X, servertFullName) ∧ added_calls(servermFullName, delegatemFullName) ∧ before_field(delegatefFullName, X, servert-FullName) ∧ after_field(delegatefFullName, X, servertFullName) ∧ before_fieldoftype(delegatefFullName, delegatetFull-Name) ∧ after_fieldoftype(delegatefFullName, delegatetFullName) ∧ after_method(delegatemFullName, X, delegatetFullName) ∧ NOT(equals(servertFullName, clienttFullName)) ∧ NOT(equals(servertFullName, delegatetFullName)) → hide_delegate(delegatetFullName, servertFullName, clienttFullName)","A client is calling a delegate class of an object. Create methods on the server to hide the delegate."
23,"Hide Method","deleted_methodmodifier(mFullName, public) ∧ added_methodmodifier(mFullName, private) → hide_method(mFullName)","A method is not used by any other class. Make the method private."
24,"Inline Class","deleted_type(oldtFullName, oldtShortName, pkg2) ∧ before_type(tFullName, tShortName, pkg) ∧ after_type(tFullName, tShortName, pkg) ∧ deleted_field(fFullname, X, tFullname) ∧ deleted_fieldoftype(fFullName, oldtFullName) ∧ ( move_field(fShortName, oldtFullName, tFullName) ∨ move_method(mShortName, oldtFullName, tFullName) ) → inline_class(oldtFullName, tFullName)","A class isn’t doing very much. Move its functional-ity into another class and delete it."
25,"Inline Function","deleted_method(oldmFullName, oldmShortName, tFullName) ∧ similarbody(oldmFullName, oldmBody, mFullName, mBody) ∧ before_method(mFullName, X, tFullName) → inline_method(mFullName, oldmFullName, oldmBody, tFullName)","A method’s body is just as clear as it’s name. Replace the call to the method with that method’s body. (Oppo-site of extract method)."
26,"Inline Variable","deleted_localvar(mFullName, X, identifier, expression) ∧ NOT(added_localvar(mFullName, X, identifier, X)) ∧ NOT(added_localvar(mFullName, X, X, expression)) ∧ deleted_methodbody(mFullName, mBody) ∧ added_methodbody(mFullName, newmBody) → introduce_explaining_variable(identifier, expression, mFullName)","You have a temp that is as-signed to once with a simple expression, and the temp is getting in the way of other refactorings. Replace all ref-erences to that temp with the expression."
27,"Introduce Assertion","deleted_methodbody(mFullName, oldmBody) ∧ added_methodbody(mFullName, newmBody) → introduce_assertion(mFullName)","A section of code assumes something about the state of the program. Make the assumption explicit with an assertion."
28,"Extract Variable","added_localvar(mFullName, X, identifier, expression) ∧ NOT(deleted_localvar(mFullName, X, identifier, X)) ∧ NOT(deleted_localvar(mFullName, X, X, expression)) ∧ deleted_methodbody(mFullName, mBody) ∧ added_methodbody(mFullName, newmBody) → introduce_explaining_variable(identifier, expression, mFullName)","You have a complicated ex-pression. Put the result of the expression, or parts of the expression, in a tempo-rary variable with a name that explains the purpose."
29,"Introduce Foreign Method","Qualitative evaluation of where a function belongs is beyond the scope of this project","A server class you are using needs an additional method, but you can’t modify the class. Create a method in the client class with an in-stance of the server class as its first argument."
30,"Introduce Local Extension","(added_subtype(tSuperFullName, tSubFullName) ∨ (added_type(tSubFullName, X, X) ∧ added_field(superInstanceFieldFullName, X, tSubFullName) ∧ added_fieldoftype(superInstanceFieldFullName, tSuperFullName) )) ∧ added_method(subCtorFullName, init(), tSubFullName) ∧ move_method(mShortName, tClientFullName, tSubFullName) ∧ before_method(mBeforeFullName, mShortName, tClientFullName) ∧ after_method(mAfterFullName, mShortName, tSubFullName) ∧ deleted_calls(mClientFullName, mBeforeFullName) ∧ added_calls(mClientFullName, mAfterFullName) → introduce_local_extension(tSubFullName, tSuperFullName)","A server class you are using needs several addi-tional methods, but you can’t modify the class. Cre-ate a new class that con-tains these extra methods. Make this extension a sub-class or wrapper of the orig-inal server."
31,"Introduce Special Case","deleted_conditional(nullCond, X, X, mFullName) ∧ NOT(added_conditional(nullCond, X, X, mFullName)) ∧ before_calls(mFullName, servermFullName) ∧ after_calls(mFullName, servermFullName) ∧ after_method(servermFullName, X, servertFullName) ∧ added_type(nulltFullName, X, X) ∧ added_subtype(servertFullName, nulltFullName) → introduce_null_object(nulltFullName, servertFullName)","You have repeated chacks for a null value. Replace the null value with a null object."
32,"Introduce Parameter Object","remove_parameter(mFullName, old param1) ∧ remove_parameter(mFullName, old param2) ∧ NOT(equals(old param1, old param2)) ∧ add_parameter(mFullName, new param) ∧ added_type(tFullName, tShortName, X) ∧ added_field(fFullName1, X, tFullName) ∧ added_fieldoftype(fFullName2, old_param1_type) ∧ added_field(fFullName2, X, tFullName) ∧ added_fieldoftype(fFullName2, old_param2_type) ∧ NOT(equals(fFullName1, fFullName2)) → introduce_parameter_object(mFullName, tFullName)","You have a group of pa-rameters that naturally go together. Replace them with an object."
33,"Move Field","deleted field(fromFieldFullName, field-ShortName, fromClassFullName) ∧ added field(toFieldFullName, field-ShortName, toClassFullName) ∧ deleted accesses(fromFieldFullName, accessorMethodFullName) ∧ added access(toFieldFullName, accessorMethod-FullName) → move field(fieldShortName, fromClassFullName, toClassFullName)","A field is moved to a class in which it will be used more."
34,"Move Function","deleted_method(mFullName, mShortName, t1FullName) ∧ added_method(newmFullName, mShortName, t2FullName) ∧ similarbody(newmFullName, newmBody, mFullName, mBody) ∧ NOT(equals(t1FullName, t2FullName)) → move_method(mShortName, t1Fullname, t2FullName)","A method is moved to a class in which it will be used more"
35,"Parameterize Function","deleted_method(m1FullName, m1ShortName, tFullName) ∧ before_parameter(m1FullName, params1, X) ∧ deleted_method(m2FullName, m2ShortName, tFullName) ∧ before_parameter(m2FullName, params2, X) ∧ NOT(equals(m1ShortName, m2ShortName)) ∧ added_method(newmFullName, newmShortName, tFullName) ∧ after_parameter(newmFullName, newparams, X) → parameterize_method(newmFullName)","Several Methods do similar things but with different val-ues contained in the method body. Create one method that uses a parameter for the different values."
36,"Preserve Whole Object","deleted_calls(clientmFullName, objmFullName) ∧ after_method(objmFullName, X, objtFullName) ∧ before_calls(clientmFullName, mFullName) ∧ after_calls(clientmFullName, mFullName) ∧ added_calls(mFullName, objmFullName) ∧ added_parameter(mFullName, X, objParamName) ∧ deleted_parameter(mFullName, X, oldParamName) ∧ objParamName_of_type objtFullName ∧ oldParamName_not_of_type_objtFullName → preserve_whole_object(mFullName, objParamShortType)","You are getting several val-ues from an object and pass-ing these values as parame-ters in a method call. Send the whole object instead."
37,"Pull Up Constructor Body","added_method(supermFullName, ¡init¿(), supertFullName) ∧ before_subtype(supertFullName, subtFullName) ∧ after_subtype(supertFullName, subtFullName) ∧ before_method(submFullName, ¡init¿(), subtFullName) ∧ after_method(submFullName, ¡init¿(), subtFullName) ∧ added_calls(submFullName, supermFullName) → pull_up_constructor_body(supertFullName)","You have constructors on subclasses with mostly identical bodies. Create a superclass constructor; call this from the subclass methods."
38,"Pull Up Field","move_field(fShortName, tChildFullName, tParentFullName) ∧ before_subtype(tParentFullName, tChildFullName) → pull_up_field(fShortName, tChildFullName, tParentFullName)","A field is moved from a class to its superclass"
39,"Pull Up Method","move_method(fShortName, tChildFullName, tParentFullName) ∧ before_subtype(tParentFullName, tChildFullName) → pull_up_method(fShortName, tChildFullName, tParentFullName)","A method is moved from a class to its superclass"
40,"Push Down Field","move_field(fShortName, tParentFullName, tChildFullName) ∧ before_subtype(tParentFullName, tChildFullName) → push_down_field(fShortName, tParentFullName, tChildFullName)","A field is moved to a sub-class"
41,"Push Down Method","move_method(fShortName, tParentFullName, tChildFullName) ∧ before_subtype(tParentFullName, tChildFullName) → push_down_method(fShortName, tParentFullName, tChildFullName)","A method is moved to a subclass"
42,"Remove Assignment to Parameters","before_parameter(mFullName, paramList, X) ∧ after_parameter(mFullName, paramList, X) ∧ deleted_methodbody(mFullName, oldmBody) ∧ added_methodbody(mFullName, newmBody) → remove_assignment_to_parameter(mFullName, paramName)","The code assigns to a pa-rameter. Use a temporary variable instead."
43,"Remove Control Flag","deleted_localvar(mFullName, boolean, identifier, expression) ∧ deleted_conditional(condition, X, X, mFullName) ∧ NOT(added_conditional(condition, X, X, mFullName)) → remove_control_flag(identifier, mFullName)","You have a variable that is acting as a control flag for a series of boolean expres-sions. Use a break or return instead."
44,"Remove Middle Man","after_method(clientmFullName, X, clienttFullName) ∧ added_calls(clientmFullName, delegatemFullName) ∧ deleted_calls(clientmFullName, servermFullName) ∧ deleted_method(servermFullName, X, servertFullName) ∧ deleted_calls(servermFullName, delegatemFullName) ∧ before_field(delegatefFullName, X, servertFullName) ∧ after_field(delegatefFullName, X, servertFull-Name) ∧ before_fieldoftype(delegatefFullName, delegatetFullName) ∧ after_fieldoftype(delegatefFullName, delegatet-FullName) ∧ after_method(delegatemFullName, X, delegatetFullName) → remove_middle_man(delegatetFullName, servertFullName, clienttFullName)","A class is doing too much simple delegation. Get the client to call the delegate directly."
45,"Remove Parameter","deleted_parameter(mFullName, X, deletedParam) → remove_parameter(mFullname, deletedParam)","A parameter is removed from a method."
46,"Remove Setting Method","added_fieldmodifier(fFullName, final) ∧ deleted_setter(mFullName, fFullName) → remove_setting method(mFullName, fFullName)","A field should be set at creation time and never altered. Remove any setting method for that field."
47,"Rename Method","added_method(newmFullName, newmShortName, tFullName) ∧ deleted_method(mFullName, mShortName, tFullName) ∧ similarbody(newmFullName, newmBody, mFullname, mBody) → rename_method(mFullName, newmFullName, tFullName)","A method is renamed to give a better idea of its func-tion"
48,"Replace Array with Object","deleted_fieldoftype(fFullName, oldtFullName) ∧ added_fieldoftype(fFullName, newtFullName) ∧ added_type(newtFullName, X, X) ∧ oldtFullName.endsWith([]) → replace_array_with_object(fFullName, newtFullName)","You have an array in which certain elements mean dif-ferent things. Replace the array with an object that has a field for each element"
49,"Replace Conditional with Polymorphism","deleted_conditional(condition, X, X, mFullName) ∧ before_method(mFullName, mShortName, tFullName) ∧ after_subtype(tFullName, subtFullName) ∧ added_method(submFullName, mShortName, subtFullName) ∧ similarbody(submFullName, newmBody, mFullname, mBody) → replace_conditional_with_polymorphism(mFullName)","You have a conditional that chooses different behavior depending on the type of an object. Move each leg of the conditional to an over-riding method in a subclass. Make the original method abstract."
50,"Replace Constructor with Factory Function","added_method(mFactFullName, X, tFullName) ∧ after_method(mCtorFullName, init(), tFullName) ∧ added _alls(mFactFullName, mCtorFullName) ∧ deleted_calls(mClientFullName, mCtorFullName) ∧ added_calls(mClientFullName, mFactFullName) ∧ added_methodmodifier(mCtorFullName, private) → replace_constructor_with_factory_method( mCtorFullName, mFactFullName)","You want to do more than simple construction when you create an object. Re-place the constructor with a factory method."
51,"Replace Primitive With Object","deleted_field(fFullName, fShortName, tFullName) ∧ added_type(newtFullName, newtShortName, X) ∧ added_field(newfFullName, X, tFullName) ∧ added_fieldoftype(newfFullName, newtFullName) ∧ similar(fShortName, newtShortName) → replace_data_with_object(fFullName, newtFullName)","You have a data item that needs additional data or be-havior. Turn that data item into an object."
52,"Replace Delegation with Inheritance","added_subtype(delegate, delegatingObj) ∧ deleted_fieldoftype(fFullName, delegate) ∧ deleted_field(fFullName, X, delegatingObj) → replace_delegation_with_inheritance(delegate, delegatingObj)","You’re using delegation and are often writing many sim-ple delegations for the entire interface. Make the delegat-ing class a subclass of the delegate."
53,"Replace Error Code with Exception","deleted_return(mFullName, oldReturnType) ∧ added_return(mFullName, void) ∧ added_throws(mFullName, tFullName) → replace_error_code_with_exception(mFullName, oldReturnType, tFullName)","A method returns a special code to indicate an error. Throw an exception instead."
54,"Replace Exception with Test","deleted_trycatch(tryBlock, catchBlocks, X, mFullName) ∧ added_conditional(condition, ifBlock, elseBlock, mFullName) → replace_exception_with_test(catchStatement, condition, mFullName)","You are throwing an ex-ception on a condition the caller could have checked first. Change the caller to make the test first."
55,"Replace Superclass with Delegate","deleted_subtype(delegate, delegatingObj) ∧ added_fieldoftype(fFullName, delegate) ∧ added_field(fFullName, X, delegatingObj) → replace_inheritance_with_delegation(delegate, delegatingObj)","A subclass uses only part of a superclass’s interface or does not want to inherit data. Create a field for the superclass, adjust methods to delegate to the superclass, and remove the subclassing."
56,"Replace Magic Number with Symbolic Constant","added_field(fFullName, X, X) ∧ added_fieldmodifier(fFullName, final) ∧ added_accesses(fFullName, mFullName) ∧ before_method(mFullName, X, X)→ replace_magic_number_with_constant(mFullName, fFullName)","You have a literal number with a particular meaning. Create a constant, name it after the meaning, and re-place the number with it."
57,"Replace Function With Command","added_type(tFullName, tShortName, pkg) ∧ added_field(fFullName, fShortName, tFullName) ∧ added_fieldoftype(fFullName, callingtFullName) ∧ added_method(newmFullName, newmShortName, tFullName) ∧ after_method(mFullName, mShortName, callingtFullName) ∧ deleted_methodbody(mFullName, mBody) ∧ similarbody(newmFullName, newmBody, mFullName, mBody) ∧ added_calls(mFullName, newmFullName) → replace_method_with_method_object(mFullName, tFullName)","You have a long method that uses local variables in such a way that you cannot ap-ply Extract Method or sim-ilar refactorings. Turn the method into its own object so that the local variables become fields of that object. Other refactorings can now be applied."
58,"Replace Nested Conditional with Guard Clauses","deleted_conditional(old_cond1, old_ifPart1, old_elsePart1, mFullName) ∧ added_conditional(new_cond1, new_ifPart1, , mFullName) ∧ added_conditional(new_cond2, new_ifPart2, , mFullName) ∧ similar(old_cond1, new_cond1) ∧ similar(old_ifPart1,new_ifPart1) ∧ similar(new_ifPart2, old_elsePart1) ∧ similar(new_cond2, old_elsePart1) → replace_nested_cond_guard_clauses(mFullName)","A method has conditional behavior that does not make clear the normal path of ex-ecution. Use guard clauses for all the special cases."
59,"Remove Flag Argument","added_method(m1FullName, m1ShortName, tFullName) ∧ after_parameter(m1FullName, params1, X) ∧ added_method(m2FullName, m2ShortName, tFullName) ∧ after_parameter(m2FullName, params2, X) ∧ NOT(equals(m1ShortName, m2ShortName)) ∧ deleted_method(oldmFullName, oldmShortName, tFullName) ∧ before_parameter(oldmFullName, oldparams, X) → replace_param_explicit_methods(oldmFullName)","You have a method that runs different code depending on the values of an enumerated parameter. Create a separate method for each value of the parameter."
60,"Replace Parameter with Query","deleted_calls(clientmFullName, othermFullName) ∧ before_calls(clientmFullName, mFullName) ∧ after_calls(clientmFullName, mFullName) ∧ added_calls(mFullName, othermFullName) ∧ deleted_parameter(mFullName, X, paramName) ∧ NOT(added_parameter(mFullName, X, X)) → replace_param_with_method(mFullName, paramName, othermFullName)","An object invokes a method, then passes the result as a parameter for a method. The receiver can also invoke this method. Removet he param-eter and let the receiver in-voke the method."
61,"Encapsulate Record","Fowler’s definition is too vague, and he provides no example.","You need to interface with a record structure in a trad-tional programming envi-ronment. Make a dumb data object for the record."
62,"Remove subclass","replace_constructor_with_factory_method( mFull-Name, X) ∧ after_method(mFullName, X, supertFullName) ∧ deleted_subtype(supertFullName, subtFullName) ∧ added_field(X, fShortName, supertFullName) ∧ before_type(subtFullName, subtShortName, X) → replace_subclass_with_field(supertFullName, subtShortName, fShortName)","You have subclasses that vary only in methods that return constant data. Change the methods to superclass fields and eliminate the subclasses."
63,"Replace Temp with Query","extract_method(mFullName, newmFullName, X, X) ∧ added_calls(mFullName, newmFullName) ∧ deleted_accesses(fFullName, mFullName) ∧ added_accesses(fFullName, newmFullName) → replace_temp_with_query(mFullName, newmFullName)","You are using a temporary variable to hold the result of an expression. Extract the expression into a method. Replace all references to the temp with the new method. The new method can then be used in other methods."
64,"Replace Primitive With Object","deleted_field(X, fShortName1, tFullName) ∧ deleted_field(X, fShortName2, tFullName) ∧ added_field(new_fFullName1, fShortName1, tCodeFullName) ∧ added_field(new fFullName2, fShortName2, tCodeFullName) ∧ added_type(tCodeFullName, X, X) ∧ added_fieldmodifier(new fFullName1, static) ∧ added_fieldmodifier(new_fFullName2, static) ∧ deleted_fieldmodifier(old_fFullName1, static) ∧ deleted_fieldmodifier(old fFullName2, static) ∧ added_fieldoftype(new_fFullName1, tCodeFullName) ∧ added_fieldoftype(new_fFullName2, tCodeFullName) ∧ deleted_fieldoftype(fFullName, X) ∧ added_fieldoftype(fFullName, tCodeFullName) → replace_type_code_with_class(tFullName, tCodeFullName)","A class has a numeric type code that does not affect its behavior. Replace the number with a new class."
65,"Replace Type Code with State/Strategy","deleted_field(old_fFullName1, fShortName1, tFullName) ∧ deleted_field(old fFullName2, fShortName2, tFullName) ∧ NOT(equals(fShortName1, fShortName2)) ∧ before_fieldmodifier(old_fFullName1, static) ∧ before_fieldmodifier(old_fFullName1, final) ∧ before_fieldmodifier(old_fFullName2, static) ∧ before_fieldmodifier(old_fFullName2, final) ∧ added_field(new fFullName1, fShortName1, tCodeFullName) ∧ added_field(new_fFullName2, fShortName2, tCodeFullName) ∧ added_type(tCodeFullName, X, X) ∧ after_fieldmodifier(new_fFullName1, static) ∧ after_fieldmodifier(new_fFullName1, final) ∧ after_fieldmodifier(new_fFullName2, static) ∧ after_fieldmodifier(new_fFullName2, final) ∧ deleted_fieldoftype(tCodefieldFullName, X) ∧ added_fieldoftype(tCodefieldFullName, tCodeFullName) ∧ added_type(tCodeFullName, tCodeShortName, X) ∧ added_type(tCodeFullName1, tCodeShortName1, X) ∧ added_type(tCodeFullName2, tCodeShortName2, X) ∧ added_subtype(tCodeFullName, tCodeFullName1) ∧ added_subtype(tCodeFullName, tCodeFullName2) ∧ NOT(equals(tCodeShortName1, tCodeShortName2)) ∧ similar_ignoredCase(fShortName1, tCodeShortName1) ∧ similar_ignoredCase(fShortName2, tCodeShortName2) ∧ similar(tCodeShortName, tShortName))","You have a type code that affects the behavior of a class, but you cannot use subclassing. Replace the type code with a state object."
66,"Replace Type Code with Subclasses","before_field(fFullName1, fShortName1, tFullName) ∧ before_field(fFullName2, fShortName2, tFullName) ∧ NOT(equals(fFullName1, fFullName2) ∧ before_fieldmodifier(fFullName1, static) ∧ before_fieldmodifier(fFullName2, static) ∧ before_fieldmodifier(fFullName1, final) ∧ before_fieldmodifier(fFullName2, final) ∧ deleted_field(tCodeFullName, X, tFullName) ∧ added_type(tCodeFullName1, tCodeShortName1, X) ∧ added_type(tCodeFullName2, tCodeShortName2, X) ∧ NOT(equals(tCodeFullName1, tCodeFullName2)) ∧ added_subtype(tFullName, tCodeFullName1) ∧ added_subtype(tFullName, tCodeFullName2) ∧ similar(fShortName1, tCodeShortName1) ∧ similar(fShortName2, tCodeShortName2))","You have an immutable type code that affects the behavior of a class. Replace the type with subclasses."
67,"Encapsulate Variable","encapsulate_field(fFullName) ∧ there are no access to the field besides the new getter and setter →  self_encapsulate_field(fFullName)","You are accessing a field directly, but the coupling to the field is becoming awkward. Create getting and setting methods for the field and only use those to access the field."
68,"Separate Domain from Presentation","No way to verify business logic vs user interface.","You have a GUI class that contains domain logic. Separate the domain logic into separate domain classes."
69,"Separate Query from Modifier","before_field(f1FullName, X, tFullName) ∧ after_field(f1FullName, X, tFullName) ∧ before_field(f2FullName, X, tFullName) ∧ after_field(f2FullName, X, tFullName) ∧ deleted_method(oldmFullName, oldmShortName, tFullName) ∧ deleted_accesses(f1FullName, oldmFullName) ∧ deleted_accesses(f2FullName, oldmFullName) ∧ added_method(m1FullName, m1ShortName, tFullName) ∧ added_accesses(f1FullName, m1FullName) ∧ added_method(m2FullName, m2ShortName, tFullName) ∧ added_accesses(f2FullName, m2FullName) ∧ not(equals(m1FullName, m2FullName))","You have a method that returns a value but also changes the state of an object. Create two methods, one for the query and one for the modification."
70,"Split Temporary Variable","Requires in-depth alias analysis.","You have a temporary variable assigned to more than once, but is not a loop variable nor a collecting temporary variable. Make a separate temporary variable for each assignment."
71,"Substitute Algorithm","Requires qualitative evaluation of code.","You want to replace an algorithm with one that is clearer. Replace the body of the method with the new algorithm."
72,"Tease Apart Inheritance","before_type(gptFullName, X, X) ∧ after_type(gptFullName, X, X) ∧ before_subtype(gptFullName, p1tFullName) ∧ after_subtype(gptFullName, p1tFullName) ∧ before_subtype(gptFullName, p2tFullName) ∧ after_subtype(gptFullName, p2tFullName) ∧ NOT(equals(p1tFullName, p2tFullName)) ∧ deleted_subtype(p1tFullName, t1FullName) ∧ deleted_subtype(p2tFullName, t2FullName) ∧ added_field(fFullName, X, gptFullName) ∧ added_fieldoftype(fFullName, newptFullName) ∧ added_type(newptFullName, X, X) ∧ added_subtype(newptFullName, newt1FullName) ∧ added_subtype(newptFullName, newt2FullName) ∧ ( move_field(X, t1FullName, newt1FullName) ∨ move_method(X, t1FullName, newt1FullName) ∨ equals(t1FullName, newt1FullName) ) ∧ ( move_field(X, t2FullName, newt2FullName) ∨ move_method(X, t2FullName, newt2FullName) ∨ equals(t2FullName, newt2FullName) )","You have an inheritance hierarchy that is doing two jobs at once. Create two hierarchies and use delegation to invoke one from the other."

