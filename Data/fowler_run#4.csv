RefactMethod,BeforeRefact,AfterRefact,PromptType,LlmCode,LlmReview
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",ZeroShot,"```java
class Employee {
  private String name;

  public Employee(String name) {
    this.name = name;
  }

  public String getName() {
    return name;
  }
}

class Salesman extends Employee {
  public Salesman(String name) {
    super(name);
  }
}

class Engineer extends Employee {
  public Engineer(String name) {
    super(name);
  }
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Instruc,"```java
class Employee {
    protected String name;
}

class Salesman extends Employee {
}

class Engineer extends Employee {
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Context,"```java
abstract class Employee {
    private String name;

    public Employee(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class Salesman extends Employee {
    public Salesman(String name) {
        super(name);
    }
}

class Engineer extends Employee {
    public Engineer(String name) {
        super(name);
    }
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Rules,"```java
class Employee {
  private String name;
}

class Salesman extends Employee {
}

class Engineer extends Employee {
}
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),ZeroShot,"```java
class Room {
    private TemperatureRange daysTempRange;

    public TemperatureRange getDaysTempRange() {
        return daysTempRange;
    }
}

class TemperatureRange {
    public double low;
    public double high;
}

class Plan {
    public boolean withinRange(double low, double high) {
        // Implementation of withinRange
    }
}

Room aRoom = new Room();
Plan aPlan = new Plan();

TemperatureRange range = aRoom.getDaysTempRange();
if (aPlan.withinRange(range.low, range.high)) {
    // Do something
}
```",0
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Instruc,"```java
public boolean isWithinRange(APlan aPlan, ARoom aRoom) {
    double low = aRoom.getDaysTempRange().getLow();
    double high = aRoom.getDaysTempRange().getHigh();
    return aPlan.withinRange(low, high);
}
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Context,"```java
int low = aRoom.getDaysTempRange().getLow();
int high = aRoom.getDaysTempRange().getHigh();
if (aPlan.isWithinRange(low, high)) {
    // Code to execute if within range
}
```",0
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Rules,"```java
TemperatureRange range = aRoom.getDaysTempRange();
int low = range.getLow();
int high = range.getHigh();
if (aPlan.withinRange(low, high)) {
    // Your logic here
}
```",0
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",ZeroShot,"```java
String[] orderData = orderString.split(""\\s+"");
String[] productInfo = orderData[0].split(""–"");
String productId = productInfo[1];
int productPrice = priceList.get(productId);
int quantity = Integer.parseInt(orderData[1]);
int orderPrice = quantity * productPrice;
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",Instruc,"```java
class Order {
    private String productId;
    private int quantity;

    public Order(String productId, int quantity) {
        this.productId = productId;
        this.quantity = quantity;
    }

    public String getProductId() {
        return productId;
    }

    public int getQuantity() {
        return quantity;
    }
}

class OrderProcessor {
    public static Order parseOrder(String orderString) {
        String[] orderData = orderString.split(""\\s+"");
        String productId = orderData[0].split(""–"")[1];
        int quantity = Integer.parseInt(orderData[1]);
        return new Order(productId, quantity);
    }

    public static int calculateOrderPrice(Order order, Map<String, Integer> priceList) {
        int productPrice = priceList.get(order.getProductId());
        return order.getQuantity() * productPrice;
    }
}

// Usage
String orderString = ""order–123 3"";
Map<String, Integer> priceList = new HashMap<>();
priceList.put(""123"", 100);
Order order = OrderProcessor.parseOrder(orderString);
int orderPrice = OrderProcessor.calculateOrderPrice(order, priceList);
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",Context,"```java
String[] orderData = orderString.split(""\\s+"");
String productId = orderData[0].split(""–"")[1];
double productPrice = priceList.get(productId);
int orderQuantity = Integer.parseInt(orderData[1]);
double orderPrice = orderQuantity * productPrice;
```",1
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},ZeroShot,"```java
class Employee {
    // Employee properties and methods
}
```",1
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Instruc,"```java
class Employee {
    // Attributes and methods common to all employees
}

class Salesman extends Employee {
    // Attributes and methods specific to salesmen
}
```",0
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Context,"```java
class Employee {
    // Employee properties and methods
}

class Salesman extends Employee {
    // Salesman specific properties and methods
}
```",0
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Rules,"```java
class Employee {
    // Fields and methods from Employee and Salesman
}
```",1
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",ZeroShot,"```java
class Order {
    private Warehouse warehouse;

    public Order(Warehouse warehouse) {
        this.warehouse = warehouse;
    }

    public int getDaysToShip() {
        return warehouse.getDaysToShip();
    }
}

class PriorityOrder {
    private Order order;
    private PriorityPlan priorityPlan;

    public PriorityOrder(Order order, PriorityPlan priorityPlan) {
        this.order = order;
        this.priorityPlan = priorityPlan;
    }

    public int getDaysToShip() {
        return priorityPlan.getDaysToShip();
    }
}
```",1
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",Instruc,"```java
class Order {
    private Delegate delegate;

    public Order(Delegate delegate) {
        this.delegate = delegate;
    }

    public int getDaysToShip() {
        return delegate.daysToShip();
    }
}

class Delegate {
    protected Order order;

    public Delegate(Order order) {
        this.order = order;
    }

    public int daysToShip() {
        return order.getDaysToShip();
    }
}

class RegularOrderDelegate extends Delegate {
    public RegularOrderDelegate(Order order) {
        super(order);
    }

    @Override
    public int daysToShip() {
        return order.getWarehouse().daysToShip;  // Assuming getWarehouse() exists in Order
    }
}

class PriorityOrderDelegate extends Delegate {
    public PriorityOrderDelegate(Order order) {
        super(order);
    }

    @Override
    public int daysToShip() {
        return order.getPriorityPlan().daysToShip;  // Assuming getPriorityPlan() exists in Order
    }
}

// Usage example
Order regularOrder = new Order(new RegularOrderDelegate(regularOrder));
Order priorityOrder = new Order(new PriorityOrderDelegate(priorityOrder));
```",0
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",Context,"```java
class Order {
    protected Warehouse _warehouse;

    public int getDaysToShip() {
        return _warehouse.getDaysToShip();
    }
}

class PriorityOrder extends Order {
    protected PriorityPlan _priorityPlan;

    @Override
    public int getDaysToShip() {
        return _priorityPlan.getDaysToShip();
    }
}
```",0
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",ZeroShot,"```java
class Product {
    private Price _price;

    public void applyDiscount(double discountAmount) {
        _price.amount -= discountAmount;
    }
}
```",0
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Instruc,"```java
class Money {
    private final double amount;

    public Money(double amount) {
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Money)) return false;
        Money other = (Money) obj;
        return Double.compare(this.amount, other.amount) == 0;
    }

    @Override
    public int hashCode() {
        return Double.hashCode(amount);
    }
}

class Product {
    private final Money price;

    public Product(Money price) {
        this.price = price;
    }

    public Money getPrice() {
        return price;
    }

    public Product applyDiscount(double discount) {
        Money discountedPrice = new Money(price.getAmount() - discount);
        return new Product(discountedPrice);
    }
}
```",1
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Context,"```java
class Product {
    private Price _price;

    public void applyDiscount(double amount) {
        _price.setAmount(_price.getAmount() - amount);
    }
}

class Price {
    private double amount;

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
```",0
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Rules,"```java
class Product {
    private Money _price;

    public void applyDiscount(double arg) {
        _price.setAmount(_price.getAmount() - arg);
    }
}

class Money {
    private double amount;

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
```",0
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",ZeroShot,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }
}

// Usage
Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Instruc,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }

    // Additional method to return a copy of the organization
    public Organization copy() {
        return new Organization(this.name, this.country);
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
        
        // Accessing fields via methods
        System.out.println(""Organization Name: "" + organization.getName());
        System.out.println(""Organization Country: "" + organization.getCountry());
        
        // Example of copying the organization
        Organization copiedOrganization = organization.copy();
    }
}
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Context,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }

    @Override
    public String toString() {
        return ""Organization{"" +
                ""name='"" + name + '\'' +
                "", country='"" + country + '\'' +
                '}';
    }
}

// Usage
Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Rules,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }
}

// Usage
Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",ZeroShot,"```java
abstract class Employee {
    abstract int getQuota();
}

class Engineer extends Employee {
    @Override
    int getQuota() {
        // Implementation for Engineer's quota
        return 0; // Replace with actual logic
    }
}

class Salesman extends Employee {
    @Override
    int getQuota() {
        // Implementation for Salesman's quota
        return 0; // Replace with actual logic
    }
}
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Instruc,"```java
class Engineer {
    public void getQuota() {
        // Implementation specific to Engineer
    }
}

class Salesman {
    public void getQuota() {
        // Implementation specific to Salesman
    }
}
```",0
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Context,"```java
class Employee {
    public void getQuota() {
        // Implementation of quota retrieval
    }
}

class Engineer extends Employee {
    // Engineer specific implementation
}

class Salesman extends Employee {
    // Salesman specific implementation
}
```",0
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Rules,"```java
class Employee {
    public void getQuota() {
        // ...
    }
}

class Engineer extends Employee {
    // Engineer-specific members or methods
}

class Salesman extends Employee {
    // Salesman-specific members or methods
}
```",0
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",ZeroShot,"```java
public void printOwing(Invoice invoice) {
    printBanner();
    double outstanding = calculateOutstanding(invoice);

    // print details
    System.out.println(""name: "" + invoice.getCustomer());
    System.out.println(""amount: "" + outstanding);
}

private double calculateOutstanding(Invoice invoice) {
    // logic to calculate outstanding amount
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Instruc,"```java
function printOwing(invoice) {
  printBanner();
  let outstanding = calculateOutstanding();
  
  printDetails(invoice, outstanding);
}

function printDetails(invoice, outstanding) {
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Context,"```java
public class InvoicePrinter {

    private Invoice invoice;

    public InvoicePrinter(Invoice invoice) {
        this.invoice = invoice;
    }

    public void printOwing() {
        printBanner();
        double outstanding = calculateOutstanding();

        // Print details
        System.out.println(""Name: "" + invoice.getCustomer());
        System.out.println(""Amount: "" + outstanding);
    }

    private void printBanner() {
        // Implementation for printing banner
    }

    private double calculateOutstanding() {
        // Implementation for calculating outstanding amount
        return 0; // Placeholder
    }
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Rules,"```java
function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  
  printDetails(invoice, outstanding);
}

function printDetails(invoice, outstanding) {
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",ZeroShot,"```java
if (isDiscounted()) {
    base = base - (this.discountRate * base);
}

private boolean isDiscounted() {
    return this.discountRate > 0;
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Instruc,"```java
assert this.discountRate != null; // Assuming discountRate should not be null
if (this.discountRate) {
    base = base - (this.discountRate * base);
}
```",0
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Context,"```java
if (discountRate > 0) {
    base -= discountRate * base;
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Rules,"```java
if (this.discountRate > 0) {
    base = base - (this.discountRate * base);
}
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",ZeroShot,"```java
double quantity = order.quantity;
double itemPrice = order.itemPrice;
double basePrice = quantity * itemPrice;
double discount = Math.max(0, quantity - 500) * itemPrice * 0.05;
double bonus = Math.min(basePrice * 0.1, 100);

return basePrice - discount + bonus;
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Instruc,"```java
double itemTotalPrice = order.quantity * order.itemPrice;
double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double cappedDiscount = Math.min(itemTotalPrice * 0.1, 100);

return itemTotalPrice - discount + cappedDiscount;
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Context,"```java
public double calculateOrderTotal(Order order) {
    double basePrice = order.quantity * order.itemPrice;
    double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
    double additionalFee = Math.min(basePrice * 0.1, 100);
    
    return basePrice - discount + additionalFee;
}
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Rules,"```java
double itemTotalPrice = order.quantity * order.itemPrice;
double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double maxDiscount = Math.min(itemTotalPrice * 0.1, 100);

return itemTotalPrice - discount + maxDiscount;
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,ZeroShot,"```java
return (anOrder.basePrice > 1000);
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Instruc,"```java
return (anOrder.basePrice > 1000);
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Context,"```java
boolean isOrderExpensive(Order anOrder) {
    double basePrice = anOrder.getBasePrice();
    return basePrice > 1000;
}
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Rules,"```java
return (anOrder.basePrice > 1000);
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",ZeroShot,"```java
import java.util.List;

class Person {
    private List<Course> courses;

    public List<Course> getCourses() {
        return courses;
    }

    public void setCourses(List<Course> courses) {
        this.courses = courses;
    }
}
```",0
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Instruc,"```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Person {
    private List<Course> courses;

    public Person() {
        this.courses = new ArrayList<>();
    }

    public List<Course> getCourses() {
        return Collections.unmodifiableList(courses);
    }

    public void addCourse(Course course) {
        this.courses.add(course);
    }

    public void removeCourse(Course course) {
        this.courses.remove(course);
    }
}
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Context,"```java
class Person {
    private List<Course> courses;

    public List<Course> getCourses() {
        return courses;
    }

    public void setCourses(List<Course> courses) {
        this.courses = courses;
    }
}
```",0
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Rules,"```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Person {
    private List<String> _courses = new ArrayList<>();

    public List<String> getCourses() {
        return Collections.unmodifiableList(_courses);
    }

    public void addCourse(String course) {
        _courses.add(course);
    }

    public void removeCourse(String course) {
        _courses.remove(course);
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",ZeroShot,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner() {
        this.firstName = ""Martin"";
        this.lastName = ""Fowler"";
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Instruc,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

// Usage
Owner defaultOwner = new Owner(""Martin"", ""Fowler"");
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Context,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    // Getters
    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }
}

public class Main {
    public static void main(String[] args) {
        Owner defaultOwner = new Owner(""Martin"", ""Fowler"");
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Rules,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

// Usage
Owner defaultOwner = new Owner(""Martin"", ""Fowler"");
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",ZeroShot,"```java
class Employee {
    // Java
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",0
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Instruc,"```java
class Employee {
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Context,"```java
class Employee {
    private String quota;

    // Getter for quota
    public String getQuota() {
        return quota;
    }

    // Setter for quota
    public void setQuota(String quota) {
        this.quota = quota;
    }
}

class Engineer extends Employee {
    // Additional properties and methods for Engineer can be added here
}

class Salesman extends Employee {
    // Additional properties and methods for Salesman can be added here
}
```",0
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Rules,"```java
class Employee {
    // Java
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",0
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",ZeroShot,"```java
public double getPayAmount() {
    if (isDead) {
        return deadAmount();
    }
    if (isSeparated) {
        return separatedAmount();
    }
    if (isRetired) {
        return retiredAmount();
    }
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Instruc,"```java
function getPayAmount() {
    if (isDead) 
        return deadAmount();
    if (isSeparated) 
        return separatedAmount();
    if (isRetired) 
        return retiredAmount();
    
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Context,"```java
public double getPayAmount() {
    if (isDead) {
        return deadAmount();
    }
    if (isSeparated) {
        return separatedAmount();
    }
    if (isRetired) {
        return retiredAmount();
    }
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Rules,"```java
function getPayAmount() {
    if (isDead) {
        return deadAmount();
    }
    if (isSeparated) {
        return separatedAmount();
    }
    if (isRetired) {
        return retiredAmount();
    }
    return normalPayAmount();
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",ZeroShot,"```java
class Person {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String aString) {
        this.name = aString;
    }
}
```",0
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Instruc,"```java
class Person {
    private final String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Context,"```java
public class Person {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```",0
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Rules,"```java
class Person {
    private final String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
```",1
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",ZeroShot,"```java
private double discount;
private double discountedTotal;

public double getDiscountedTotal() {
    return discountedTotal;
}

public void setDiscount(double aNumber) {
    double old = discount;
    discount = aNumber;
    discountedTotal += old - aNumber; 
}
```",0
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",Instruc,"```java
private double calculateDiscountedTotal() {
    return this._total - (this._total * this._discount / 100);
}

public double getDiscountedTotal() {
    return calculateDiscountedTotal();
}

public void setDiscount(double aNumber) {
    this._discount = aNumber;
}
```",1
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",Context,"```java
public class ShoppingCart {
    private double discountedTotal;
    private double discount;

    public double getDiscountedTotal() {
        return this.discountedTotal;
    }

    public void setDiscount(double discount) {
        double oldDiscount = this.discount;
        this.discount = discount;
        this.discountedTotal += oldDiscount - discount;
    }
}
```",0
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",ZeroShot,"```java
public String foundPerson(String[] people) {
    for (String person : people) {
        if (person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"")) {
            return person;
        }
    }
    return """";
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Instruc,"```java
import java.util.List;

public class PersonFinder {
    public String foundPerson(List<String> people) {
        for (String person : people) {
            if (isTargetPerson(person)) {
                return person;
            }
        }
        return """";
    }

    private boolean isTargetPerson(String person) {
        return person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"");
    }
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Context,"```java
public String foundPerson(List<String> people) {
    Set<String> targets = new HashSet<>(Arrays.asList(""Don"", ""John"", ""Kent""));
    for (String person : people) {
        if (targets.contains(person)) {
            return person;
        }
    }
    return """";
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Rules,"```java
public String foundPerson(List<String> people) {
    for (String person : people) {
        switch (person) {
            case ""Don"":
                return ""Don"";
            case ""John"":
                return ""John"";
            case ""Kent"":
                return ""Kent"";
        }
    }
    return """";
}
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",ZeroShot,"```java
abstract class Bird {
    abstract String getDescription();
}

class EuropeanSwallow extends Bird {
    @Override
    String getDescription() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    AfricanSwallow(int numberOfCoconuts) {
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    String getDescription() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    NorwegianBlueParrot(int voltage) {
        this.voltage = voltage;
    }

    @Override
    String getDescription() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class BirdFactory {
    public static Bird createBird(String type, int numberOfCoconuts, int voltage) {
        switch (type) {
            case ""EuropeanSwallow"":
                return new EuropeanSwallow();
            case ""AfricanSwallow"":
                return new AfricanSwallow(numberOfCoconuts);
            case ""NorwegianBlueParrot"":
                return new NorwegianBlueParrot(voltage);
            default:
                throw new IllegalArgumentException(""Unknown bird type"");
        }
    }
}

// Usage
Bird bird = BirdFactory.createBird(birdType, numberOfCoconuts, voltage);
String description = bird.getDescription();
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Instruc,"```java
// Bird.java
abstract class Bird {
    String type;

    public Bird(String type) {
        this.type = type;
    }

    public abstract String getStatus();
}

// EuropeanSwallow.java
class EuropeanSwallow extends Bird {
    public EuropeanSwallow() {
        super(""EuropeanSwallow"");
    }

    @Override
    public String getStatus() {
        return ""average"";
    }
}

// AfricanSwallow.java
class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    public AfricanSwallow(int numberOfCoconuts) {
        super(""AfricanSwallow"");
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    public String getStatus() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

// NorwegianBlueParrot.java
class NorwegianBlueParrot extends Bird {
    private int voltage;

    public NorwegianBlueParrot(int voltage) {
        super(""NorwegianBlueParrot"");
        this.voltage = voltage;
    }

    @Override
    public String getStatus() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

// BirdFactory.java
class BirdFactory {
    public static Bird createBird(String type, int numberOfCoconuts, int voltage) {
        switch (type) {
            case ""EuropeanSwallow"":
                return new EuropeanSwallow();
            case ""AfricanSwallow"":
                return new AfricanSwallow(numberOfCoconuts);
            case ""NorwegianBlueParrot"":
                return new NorwegianBlueParrot(voltage);
            default:
                throw new IllegalArgumentException(""Unknown bird type: "" + type);
        }
    }
}

// Example usage
public class BirdDemo {
    public static void main(String[] args) {
        Bird bird1 = BirdFactory.createBird(""EuropeanSwallow"", 0, 0);
        System.out.println(bird1.getStatus()); // average

        Bird bird2 = BirdFactory.createBird(""AfricanSwallow"", 3, 0);
        System.out.println(bird2.getStatus()); // tired

        Bird bird3 = BirdFactory.createBird(""NorwegianBlueParrot"", 0, 150);
        System.out.println(bird3.getStatus()); // scorched
    }
}
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Context,"```java
public String getBirdStatus(Bird bird) {
    switch (bird.getType()) {
        case EUROPEAN_SWALLOW:
            return ""average"";
        case AFRICAN_SWALLOW:
            return bird.getNumberOfCoconuts() > 2 ? ""tired"" : ""average"";
        case NORWEGIAN_BLUE_PARROT:
            return bird.getVoltage() > 100 ? ""scorched"" : ""beautiful"";
        default:
            return ""unknown"";
    }
}
```",0
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Rules,"```java
abstract class Bird {
    abstract String тормошoResult();
}

class EuropeanSwallow extends Bird {
    @Override
    String комфортResult() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    AfricanSwallow(int numberOfCoconuts) {
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    String комфортResult() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    NorwegianBlueParrot(int voltage) {
        this.voltage = voltage;
    }

    @Override
    String комфортResult() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class BirdType {
    public static String getResult(Bird bird) {
        return bird.комфортResult();
    }
}

// Usage
Bird bird = new EuropeanSwallow();
String result = BirdType.getResult(bird);
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",ZeroShot,"```java
if (isDateInSummer(aDate, plan)) {
    charge = quantity * plan.summerRate;
} else {
    charge = quantity * plan.regularRate + plan.regularServiceCharge;
}

private boolean isDateInSummer(LocalDate aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Instruc,"```java
if (isSummerCharge(aDate, plan)) {
    charge = calculateSummerCharge(quantity, plan);
} else {
    charge = calculateRegularCharge(quantity, plan);
}

private boolean isSummerCharge(LocalDate aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}

private double calculateSummerCharge(int quantity, Plan plan) {
    return quantity * plan.summerRate;
}

private double calculateRegularCharge(int quantity, Plan plan) {
    return quantity * plan.regularRate + plan.regularServiceCharge;
}
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Context,"```java
charge = (aDate.isBefore(plan.summerStart) || aDate.isAfter(plan.summerEnd))
    ? quantity * plan.regularRate + plan.regularServiceCharge
    : quantity * plan.summerRate;
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Rules,"```java
if (isSummer(aDate, plan)) {
    charge = quantity * plan.summerRate;
} else {
    charge = quantity * plan.regularRate + plan.regularServiceCharge;
}

private boolean isSummer(Date aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",ZeroShot,"```java
class OrganizationUnit {
    private String name;

    public String getName() {
        return name;
    }
}

class Department extends OrganizationUnit {
    public double getTotalAnnualCost() {
        // Implementation details
    }

    public int getHeadCount() {
        // Implementation details
    }
}

class Employee extends OrganizationUnit {
    private String id;

    public String getId() {
        return id;
    }

    public double getAnnualCost() {
        // Implementation details
    }
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Instruc,"```java
class Entity {
    protected String name;

    public String getName() {
        return name;
    }
}

class Department extends Entity {
    private double totalAnnualCost;
    private int headCount;

    public double getTotalAnnualCost() {
        return totalAnnualCost;
    }

    public int getHeadCount() {
        return headCount;
    }
}

class Employee extends Entity {
    private double annualCost;
    private String id;

    public double getAnnualCost() {
        return annualCost;
    }

    public String getId() {
        return id;
    }
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Context,"```java
class Department {
    private double totalAnnualCost;
    private String name;
    private int headCount;

    public Department(double totalAnnualCost, String name, int headCount) {
        this.totalAnnualCost = totalAnnualCost;
        this.name = name;
        this.headCount = headCount;
    }

    public double getTotalAnnualCost() {
        return totalAnnualCost;
    }

    public String getName() {
        return name;
    }

    public int getHeadCount() {
        return headCount;
    }
}

class Employee {
    private double annualCost;
    private String name;
    private String id;

    public Employee(double annualCost, String name, String id) {
        this.annualCost = annualCost;
        this.name = name;
        this.id = id;
    }

    public double getAnnualCost() {
        return annualCost;
    }

    public String getName() {
        return name;
    }

    public String getId() {
        return id;
    }
}
```",0
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Rules,"```java
class Person {
    String name;
    
    public String getName() {
        return name;
    }
}

class Department extends Person {
    public double getTotalAnnualCost() {
        // Implementation...
    }

    public int getHeadCount() {
        // Implementation...
    }
}

class Employee extends Person {
    String id;
    
    public double getAnnualCost() {
        // Implementation...
    }

    public String getId() {
        return id;
    }
}
```",0
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",ZeroShot,"```javascript
const names = input
    .filter(i => i.job === ""programmer"")
    .map(i => i.name);
```",1
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",Instruc,"```javascript
const names = input
    .filter(i => i.job === ""programmer"")
    .map(i => i.name);
```",1
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",Context,"```java
List<String> names = new ArrayList<>();
for (Person person : input) {
    if (""programmer"".equals(person.getJob())) {
        names.add(person.getName());
    }
}
```",0
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",ZeroShot,"```java
class List {
    // List methods and properties
}

class Stack {
    private List list;

    public Stack() {
        list = new List();
    }

    // Delegate methods to list
}
```",1
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Instruc,"```java
class List {
    // Methods and fields of List class
    public void push(Object item) {
        // Implementation
    }

    public Object pop() {
        // Implementation
        return null;
    }

    public boolean isEmpty() {
        // Implementation
        return true;
    }
}

class Stack {
    private List delegate;

    public Stack() {
        this.delegate = new List();
    }

    public void push(Object item) {
        delegate.push(item);
    }

    public Object pop() {
        return delegate.pop();
    }

    public boolean isEmpty() {
        return delegate.isEmpty();
    }
}
```",1
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Context,"```java
class List {
    // List implementation here
}

class Stack extends List {
    // Stack implementation here
}
```",0
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Rules,"```java
class List {
    // List class implementation
}

class Stack {
    private List delegate;

    public Stack() {
        this.delegate = new List();
    }

    // Add methods to delegate to the List instance as needed
}
```",1
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",ZeroShot,"```java
public class Billing {
    private double base(double aReading) {
        // Original implementation of base function
    }

    public double taxableCharge(double aReading) {
        return Math.max(0, base(aReading) - 100);
    }
}
```",1
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",Instruc,"```java
class Reading {
    private double value;

    public Reading(double value) {
        this.value = value;
    }

    public double getValue() {
        return value;
    }

    public double getBase() {
        return base(this);
    }

    public double getTaxableCharge() {
        return taxableCharge(this);
    }

    // Transformation function to create a new field
    private Reading transform(Reading reading) {
        // Returning a new Reading object to prevent mutation
        return new Reading(reading.getValue());
    }

    private double base(Reading aReading) {
        // Original logic for base charge calculation
        return aReading.getValue() * 0.5; // Example logic
    }

    private double taxableCharge(Reading aReading) {
        // Original logic for calculating taxable charge
        return base(aReading) * 0.1; // Example logic
    }
}
```",0
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",Context,"```java
public class Reading {
    private final double value;
    private final String month;

    public Reading(double value, String month) {
        this.value = value;
        this.month = month;
    }

    public double getValue() {
        return value;
    }

    public String getMonth() {
        return month;
    }
}

public class TaxCalculator {
    private static final double TAX_RATE = 0.1;

    public double calculateTax(Reading reading) {
        return taxableCharge(reading) * TAX_RATE;
    }

    private double taxableCharge(Reading reading) {
        return Math.max(0, reading.getValue() - base(reading));
    }

    private double base(Reading reading) {
        // Some logic to determine the base charge depending on the month
        // For example purposes, let's assume a static base charge
        return 100; 
    }
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",ZeroShot,"```java
public void raiseSalary(Person aPerson, double percentage) {
    aPerson.salary = aPerson.salary.multiply(1 + percentage);
}

public void tenPercentRaise(Person aPerson) {
    raiseSalary(aPerson, 0.10);
}

public void fivePercentRaise(Person aPerson) {
    raiseSalary(aPerson, 0.05);
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Instruc,"```java
function raiseSalary(aPerson, percentage) {
  aPerson.salary = aPerson.salary.multiply(1 + percentage);
}

function tenPercentRaise(aPerson) {
  raiseSalary(aPerson, 0.10);
}

function fivePercentRaise(aPerson) {
  raiseSalary(aPerson, 0.05);
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Context,"```java
public class SalaryAdjuster {

    private static final double TEN_PERCENT_RAISE = 1.1;
    private static final double FIVE_PERCENT_RAISE = 1.05;

    public static void applyTenPercentRaise(Person person) {
        adjustSalary(person, TEN_PERCENT_RAISE);
    }

    public static void applyFivePercentRaise(Person person) {
        adjustSalary(person, FIVE_PERCENT_RAISE);
    }

    private static void adjustSalary(Person person, double raiseFactor) {
        person.setSalary(person.getSalary().multiply(raiseFactor));
    }
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Rules,"```javascript
function raiseSalary(aPerson, percentage) {
  aPerson.salary = aPerson.salary.multiply(1 + (percentage / 100));
}

// Usage
tenPercentRaise(aPerson) {
  raiseSalary(aPerson, 10);
}

fivePercentRaise(aPerson) {
  raiseSalary(aPerson, 5);
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",ZeroShot,"```java
public void setHeight(int height) {
    this._height = height;
}

public void setWidth(int width) {
    this._width = width;
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Instruc,"```java
public void setHeight(int value) {
    this._height = value;
}

public void setWidth(int value) {
    this._width = value;
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Context,"```java
public void setDimension(String name, double value) {
    switch (name) {
        case ""height"":
            this._height = value;
            break;
        case ""width"":
            this._width = value;
            break;
        default:
            throw new IllegalArgumentException(""Invalid dimension name: "" + name);
    }
}
```",0
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Rules,"```javascript
function setHeight(value) {
  this._height = value;
}

function setWidth(value) {
  this._width = value;
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",ZeroShot,"```java
public int availableVacation(Employee anEmployee) {
    // calculate vacation...
    int grade = anEmployee.getGrade();
    // continue with vacation calculation using grade...
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Instruc,"```java
public int availableVacation(Employee anEmployee) {
    int grade = anEmployee.getGrade();
    // calculate vacation...
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Context,"```java
public class Employee {
    private int grade;

    public Employee(int grade) {
        this.grade = grade;
    }

    public int getGrade() {
        return grade;
    }
}

public class VacationCalculator {
    public int availableVacation(Employee employee) {
        return calculateVacation(employee.getGrade());
    }

    private int calculateVacation(int grade) {
        // Calculate vacation based on employee grade
        // Placeholder logic for example purposes
        switch (grade) {
            case 1:
                return 10; // 10 days for grade 1
            case 2:
                return 15; // 15 days for grade 2
            case 3:
                return 20; // 20 days for grade 3
            default:
                return 5;  // Default vacation days
        }
    }
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Rules,"```java
function availableVacation(anEmployee) {
  Grade grade = anEmployee.grade;
  // calculate vacation...
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",ZeroShot,"```java
class ChargeCalculator {
    private Customer customer;
    private double usage;

    public ChargeCalculator(Customer customer, double usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double execute() {
        return calculateCharge();
    }

    private double calculateCharge() {
        return customer.getRate() * usage;
    }
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",Instruc,"```java
class ChargeCalculator {
    private Customer customer;
    private int usage;

    public ChargeCalculator(Customer customer, int usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double calculateCharge() {
        return calculateRate() * usage;
    }

    private double calculateRate() {
        return customer.getRate();
    }
}

// Usage
public double charge(Customer customer, int usage) {
    return new ChargeCalculator(customer, usage).calculateCharge();
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",Context,"```java
class ChargeCalculator {
    private final Customer customer;
    private final double usage;

    public ChargeCalculator(Customer customer, double usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double calculateCharge() {
        return customer.getRate() * usage;
    }
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},ZeroShot,"```java
public double circum(double radius) {
    // implementation code here
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Instruc,"```java
public double circum(double radius) {
    return 2 * Math.PI * radius;
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Context,"```java
public class Circle {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double calculateCircumference() {
        return 2 * Math.PI * radius;
    }
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Rules,"```java
function circum(double radius) { ... }
```",0
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",ZeroShot,"```java
class Organization {
    private String organizationName;

    public String getOrganizationName() {
        return organizationName;
    }

    public void setOrganizationName(String organizationName) {
        this.organizationName = organizationName;
    }
}
```",1
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",Instruc,"```java
class Organization {
    private String organizationName;

    public String getOrganizationName() {
        return organizationName;
    }

    // other methods and constructor here
}
```",1
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",Context,"```java
public class Organization {
    private String name;

    public Organization(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,ZeroShot,"```java
private boolean appliesToMass(String[] states) {
    for (String s : states) {
        if (s.equals(""MA"")) {
            return true;
        }
    }
    return false;
}

// Usage
boolean appliesToMass = appliesToMass(states);
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,Instruc,"```java
boolean appliesToMass = false;
for (String s : states) {
    if (s.equals(""MA"")) {
        appliesToMass = true;
        break;
    }
}
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,Context,"```java
boolean appliesToMass = Arrays.asList(states).contains(""MA"");
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",ZeroShot,"```java
class Account {
    private int overdraftDays;
    private double overdraftRate;

    public Account(int overdraftDays, double overdraftRate) {
        this.overdraftDays = overdraftDays;
        this.overdraftRate = overdraftRate;
    }

    public double getOverdraftCharge() {
        return calculateOverdraftCharge();
    }

    private double calculateOverdraftCharge() {
        return overdraftDays * overdraftRate;
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Instruc,"```java
class Account {
    private static final double OVERDRAFT_THRESHOLD = 0;

    public double getOverdraftCharge() {
        return calculateOverdraftCharge();
    }

    private double calculateOverdraftCharge() {
        // Implementation of overdraft charge calculation
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Context,"```java
class Account {
    public double getOverdraftCharge() {
        // logic for calculating overdraft charge
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Rules,"```java
class Account {
    // Other methods and properties

    get overdraftCharge() {
        // Method implementation
    }
}

class Customer {
    get overdraftCharge() {
        // Similar implementation as Account's overdraftCharge
    }
}
```",0
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",ZeroShot,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);
int area = height * width;
System.out.println(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Instruc,"```java
let areaCalculation = 2 * (height + width);
console.log(areaCalculation);
let area = height * width;
console.log(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Context,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);

int area = height * width;
System.out.println(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Rules,"```java
int areaTemp = 2 * (height + width);
System.out.println(areaTemp);

int multiplicationTemp = height * width;
System.out.println(multiplicationTemp);
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",ZeroShot,"```java
public double targetTemperature(Plan aPlan) {
    double currentTemperature = thermostat.getCurrentTemperature();
    // rest of function...
}
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",Instruc,"```java
void targetTemperature(Plan aPlan) {
    updateThermostat(thermostat.currentTemperature);
    // rest of function...
}

void updateThermostat(double currentTemperature) {
    // implementation that uses currentTemperature
}
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",Context,"```java
public class Thermostat {
    private double currentTemperature;

    public double getCurrentTemperature() {
        return currentTemperature;
    }

    public void setCurrentTemperature(double currentTemperature) {
        this.currentTemperature = currentTemperature;
    }
}

public class TemperatureController {
    private Thermostat thermostat;

    public TemperatureController(Thermostat thermostat) {
        this.thermostat = thermostat;
    }

    public void targetTemperature(Plan aPlan) {
        double currentTemperature = thermostat.getCurrentTemperature();
        // rest of the function...
    }
}
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",ZeroShot,"```java
if (aCustomer.equals(""unknown"")) {
    customerName = ""occupant"";
} else {
    customerName = aCustomer;
}
```",0
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Instruc,"```java
class Customer {
    private String name;

    public Customer(String name) {
        this.name = name;
    }

    public boolean isUnknown() {
        return ""unknown"".equals(name);
    }

    public String getName() {
        return name;
    }
}

class SpecialCaseCustomer extends Customer {
    public SpecialCaseCustomer() {
        super(""unknown"");
    }

    @Override
    public String getName() {
        return ""occupant"";
    }
}

// Usage
Customer customer = getCustomer(); // Assume this method retrieves a Customer object
if (customer.isUnknown()) {
    customerName = customer.getName();
} else {
    customerName = customer.getName();
}
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Context,"```java
if (""unknown"".equals(aCustomer)) {
    customerName = ""occupant"";
}
```",0
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Rules,"```java
if (aCustomer == null) {
    customerName = ""occupant"";
} else {
    customerName = aCustomer;
}
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,ZeroShot,"```java
// No code needed as the condition is always false
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,Instruc,"```java
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,Context,"```java
// Code has been removed as the condition is always false
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,ZeroShot,"```java
let area = height * width;
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,Instruc,"```java
let area = height * width;
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,Context,"```java
int area = height * width;
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",ZeroShot,"```java
abstract class Employee {
    protected String name;

    public Employee(String name) {
        this.name = name;
    }
}

class FullTimeEmployee extends Employee {
    public FullTimeEmployee(String name) {
        super(name);
    }
}

class PartTimeEmployee extends Employee {
    public PartTimeEmployee(String name) {
        super(name);
    }
}

class EmployeeFactory {
    public static Employee createEmployee(String name, String type) {
        if (type.equals(""full-time"")) {
            return new FullTimeEmployee(name);
        } else if (type.equals(""part-time"")) {
            return new PartTimeEmployee(name);
        }
        throw new IllegalArgumentException(""Invalid employee type"");
    }
}
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Instruc,"```java
abstract class Employee {
    protected String name;

    public Employee(String name) {
        this.name = name;
    }

    public abstract String getType();
}

class FullTimeEmployee extends Employee {
    public FullTimeEmployee(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""FullTime"";
    }
}

class PartTimeEmployee extends Employee {
    public PartTimeEmployee(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""PartTime"";
    }
}

class Contractor extends Employee {
    public Contractor(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Contractor"";
    }
}

class EmployeeFactory {
    public static Employee createEmployee(String name, String type) {
        switch (type) {
            case ""FullTime"":
                return new FullTimeEmployee(name);
            case ""PartTime"":
                return new PartTimeEmployee(name);
            case ""Contractor"":
                return new Contractor(name);
            default:
                throw new IllegalArgumentException(""Unknown type: "" + type);
        }
    }
}

// Usage
Employee emp = EmployeeFactory.createEmployee(""John Doe"", ""FullTime"");
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Context,"```java
public Employee createEmployee(String name, String type) {
    return new Employee(name, type);
}
```",0
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Rules,"```java
public abstract class EmployeeType {
    private String name;

    public EmployeeType(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

public class FullTimeEmployee extends EmployeeType {
    public FullTimeEmployee() {
        super(""Full-time"");
    }
}

public class PartTimeEmployee extends EmployeeType {
    public PartTimeEmployee() {
        super(""Part-time"");
    }
}

public class Employee {
    private String name;
    private EmployeeType type;

    public Employee(String name, EmployeeType type) {
        this.name = name;
        this.type = type;
    }

    // Additional methods...
}

public class EmployeeFactory {
    public static Employee createEmployee(String name, EmployeeType type) {
        return new Employee(name, type);
    }
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",ZeroShot,"```java
function getRating(driver) {
  return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Instruc,"```java
public int getRating(Driver driver) {
    return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Context,"```java
public class Driver {
    private int numberOfLateDeliveries;

    public Driver(int numberOfLateDeliveries) {
        this.numberOfLateDeliveries = numberOfLateDeliveries;
    }

    public int getRating() {
        return hasMoreThanFiveLateDeliveries() ? 2 : 1;
    }

    private boolean hasMoreThanFiveLateDeliveries() {
        return numberOfLateDeliveries > 5;
    }
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Rules,"```java
function getRating(driver) {
  return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",ZeroShot,"```java
class ChargingCalculator {
    private static final double BASE_RATE_PER_KWH = 0.05;
    private static final double TAX_RATE = 0.1;

    private Reading aReading;

    public ChargingCalculator(Reading aReading) {
        this.aReading = aReading;
    }

    public double calculateTotalCharge() {
        return base() + taxableCharge();
    }

    private double base() {
        return calculateBaseCharge();
    }

    private double taxableCharge() {
        return base() * TAX_RATE;
    }

    private double calculateBaseCharge() {
        return aReading.getUnits() * BASE_RATE_PER_KWH;
    }
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",Instruc,"```java
class Reading {
    private final double value;

    public Reading(double value) {
        this.value = value;
    }

    public double getValue() {
        return value;
    }

    public double base() {
        // implementation of base logic
    }

    public double taxableCharge() {
        // implementation of taxableCharge logic
    }

    public double calculateBaseCharge() {
        // implementation of calculateBaseCharge logic
    }
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",Context,"```java
public class Billing {

    public double base(Reading aReading) {
        return calculateBaseCharge(aReading);
    }

    public double taxableCharge(Reading aReading) {
        double baseCharge = base(aReading);
        return baseCharge > 100 ? baseCharge - 100 : 0;
    }

    private double calculateBaseCharge(Reading aReading) {
        // Implement base charge calculation logic based on the reading
        return aReading.getUsage() * aReading.getRate();
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",ZeroShot,"```java
class Customer {
    private Plan _plan;
    private double _discountRate;

    public Plan getPlan() {
        return _plan;
    }

    public double getDiscountRate() {
        return _discountRate;
    }
}
```",0
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Instruc,"```java
class Customer {
    private Plan plan; // Assuming Plan is a class
    private double discountRate; // Changed the data type to match expected types

    public Plan getPlan() {
        return this.plan;
    }

    public double getDiscountRate() {
        return this.discountRate;
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Context,"```java
class Customer {
    private Plan plan;
    private double discountRate;

    public Plan getPlan() {
        return plan;
    }

    public double getDiscountRate() {
        return discountRate;
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Rules,"```java
class Customer {
    private Plan _plan;
    private double _discountRate;

    public Plan getPlan() {
        return this._plan;
    }

    public double getDiscountRate() {
        return this._discountRate;
    }
}
```",0
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",ZeroShot,"```java
double basePrice = this._quantity * this._itemPrice;
return basePrice > 1000 ? basePrice * 0.95 : basePrice * 0.98;
```",0
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Instruc,"```java
public double calculatePrice() {
    double basePrice = calculateBasePrice();
    if (basePrice > 1000) {
        return basePrice * 0.95;
    } else {
        return basePrice * 0.98;
    }
}

private double calculateBasePrice() {
    return this._quantity * this._itemPrice;
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Context,"```java
double calculatePrice(int quantity, double itemPrice) {
    double basePrice = quantity * itemPrice;
    double discount = (basePrice > 1000) ? 0.95 : 0.98;
    return basePrice * discount;
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Rules,"```java
if (this._quantity * this._itemPrice > 1000)
  return (this._quantity * this._itemPrice) * 0.95;
else
  return (this._quantity * this._itemPrice) * 0.98;
```",0
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,ZeroShot,"```java
Customer customer = Customer.from(customerData);
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Instruc,"```java
public class CustomerRepository {
    private Map<String, Customer> customerMap = new HashMap<>();

    public Customer getCustomer(String customerId) {
        return customerMap.get(customerId);
    }

    // Method to add a customer to the repository
    public void addCustomer(Customer customer) {
        customerMap.put(customer.getId(), customer);
    }
}

public class Customer {
    private String id;
    private String name;

    public Customer(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    // Other customer methods...
}

public class HostObject {
    private Customer customer;

    public HostObject(String customerId, CustomerRepository customerRepository) {
        this.customer = customerRepository.getCustomer(customerId);
    }

    // Other host object methods...
}
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Context,"```java
Customer customer = new Customer(customerData);
```",0
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Rules,"```java
Customer customer = CustomerFactory.createCustomer(customerData);
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",ZeroShot,"```java
public class PhotoInfo {
    private List<String> result = new ArrayList<>();

    public void addPhotoInfo(Person person) {
        moveStatementsIntoFunction(person.photo);
    }

    private void moveStatementsIntoFunction(Photo aPhoto) {
        result.add(String.format(""<p>title: %s</p>"", aPhoto.title));
        result.add(String.format(""<p>location: %s</p>"", aPhoto.location));
        result.add(String.format(""<p>date: %s</p>"", aPhoto.date.toString()));
    }
}
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",Instruc,"```java
result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoDetails(person.photo));

function photoDetails(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",Context,"```java
result.push(formatPhotoTitle(person.photo));
result.concat(getPhotoDetails(person.photo));

private String formatPhotoTitle(Photo photo) {
    return String.format(""<p>title: %s</p>"", photo.title);
}

private List<String> getPhotoDetails(Photo aPhoto) {
    List<String> details = new ArrayList<>();
    details.add(String.format(""<p>location: %s</p>"", aPhoto.location));
    details.add(String.format(""<p>date: %s</p>"", aPhoto.date.toDateString()));
    return details;
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",ZeroShot,"```java
public class BillingService {
    private Customer customer;

    public BillingService(Customer customer) {
        this.customer = customer;
    }

    public double getTotalOutstanding() {
        return calculateTotalOutstanding();
    }

    public void sendBill() {
        // Send bill logic here
    }

    private double calculateTotalOutstanding() {
        return customer.getInvoices().stream()
                .mapToDouble(Invoice::getAmount)
                .sum();
    }

    public void processBilling() {
        double totalOutstanding = getTotalOutstanding();
        sendBill();
    }
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Instruc,"```java
public class Customer {
    private List<Invoice> invoices;

    public int getTotalOutstanding() {
        return invoices.stream().mapToInt(Invoice::getAmount).sum();
    }

    public void getTotalOutstandingAndSendBill() {
        int total = getTotalOutstanding();
        sendBill();
    }

    private void sendBill() {
        // Logic to send the bill
    }
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Context,"```java
public class BillingService {

    private Customer customer;

    public BillingService(Customer customer) {
        this.customer = customer;
    }

    public double getTotalOutstandingAndSendBill() {
        double totalOutstanding = calculateTotalOutstanding();
        sendBill();
        return totalOutstanding;
    }

    private double calculateTotalOutstanding() {
        return customer.getInvoices().stream()
                .mapToDouble(Invoice::getAmount)
                .sum();
    }

    private void sendBill() {
        // Implementation of bill sending
    }
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Rules,"```javascript
function getTotalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);
}

function sendBill() {
  // Bill sending logic here
}

function getTotalOutstandingAndSendBill() {
  const result = getTotalOutstanding();
  sendBill();
  return result;
}
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",ZeroShot,"```java
class Person {
    private Department department;

    public Department getDepartment() {
        return department;
    }
}

class Department {
    private Manager manager;

    public Manager getManager() {
        return manager;
    }
}

class Manager {
    // Manager class implementation
}

// Usage
Manager manager = aPerson.getDepartment().getManager();
```",0
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Instruc,"```java
public class Department {
    private Manager manager;
    
    public Manager getManager() {
        return manager;
    }
    
    // Other methods and properties of Department
}

public class Person {
    private Department department;

    public Person(Department department) {
        this.department = department;
    }

    public Manager getDepartmentManager() {
        return department.getManager();
    }

    // Other methods and properties of Person
}

// Usage
Department aDepartment = new Department();
Person aPerson = new Person(aDepartment);
Manager manager = aPerson.getDepartmentManager();
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Context,"```java
Manager manager = aPerson.getDepartment().getManager();
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Rules,"```java
manager = aPerson.department.getManager();
```",0
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",ZeroShot,"```java
abstract class Employee {
    public abstract String getName();
}

class Salesman extends Employee {
    @Override
    public String getName() {
        // Implementation for Salesman
        return ""Salesman Name"";
    }
}

class Engineer extends Employee {
    @Override
    public String getName() {
        // Implementation for Engineer
        return ""Engineer Name"";
    }
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Instruc,"```java
class Employee {
    public String getName() {
        // Implementation common to all employees
    }
}

class Salesman extends Employee {
    // Additional Salesman specific methods and properties
}

class Engineer extends Employee {
    // Additional Engineer specific methods and properties
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Context,"```java
abstract class Employee {
    public abstract String getName();
}

class Salesman extends Employee {
    @Override
    public String getName() {
        // Implementation for Salesman's name
    }
}

class Engineer extends Employee {
    @Override
    public String getName() {
        // Implementation for Engineer's name
    }
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Rules,"```java
class Employee {
    public String getName() {
        // implementation...
    }
}

class Salesman extends Employee {
    // inherits getName from Employee
}

class Engineer extends Employee {
    // inherits getName from Employee
}
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",ZeroShot,"```javascript
const pricingPlan = retrievePricingPlan();
const order = retrieveOrder();
const chargePerUnit = pricingPlan.unit;
let charge = order.quantity * chargePerUnit;
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Instruc,"```javascript
const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retrieveOrder();
let charge;
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Context,"```java
PricingPlan pricingPlan = retrievePricingPlan();
Order order = retrieveOrder();
double charge;
double chargePerUnit = pricingPlan.getUnit();
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Rules,"```javascript
const pricingPlan = retrievePricingPlan();
const order = retrieveOrder();
const chargePerUnit = pricingPlan.unit;
let charge = order.quantity * chargePerUnit;
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",ZeroShot,"```java
class Person {
    private PhoneNumber officePhoneNumber;

    public Person(String officeAreaCode, String officeNumber) {
        this.officePhoneNumber = new PhoneNumber(officeAreaCode, officeNumber);
    }

    public String getOfficeAreaCode() {
        return officePhoneNumber.getAreaCode();
    }

    public String getOfficeNumber() {
        return officePhoneNumber.getNumber();
    }
}

class PhoneNumber {
    private String areaCode;
    private String number;

    public PhoneNumber(String areaCode, String number) {
        this.areaCode = areaCode;
        this.number = number;
    }

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Instruc,"```java
class Person {
    private Office office;

    public Person(Office office) {
        this.office = office;
    }

    public String getOfficeAreaCode() {
        return office.getAreaCode();
    }

    public String getOfficeNumber() {
        return office.getNumber();
    }
}

class Office {
    private String areaCode;
    private String number;

    public Office(String areaCode, String number) {
        this.areaCode = areaCode;
        this.number = number;
    }

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Context,"```java
class Person {
    private String officeAreaCode;
    private String officeNumber;

    public String getOfficeAreaCode() {
        return officeAreaCode;
    }

    public String getOfficeNumber() {
        return officeNumber;
    }
}
```",0
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Rules,"```java
class Office {
    private String areaCode;
    private String number;

    public Office(String areaCode, String number) {
        this.areaCode = areaCode;
        this.number = number;
    }

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}

class Person {
    private Office office;

    public Person(Office office) {
        this.office = office;
    }

    public String getOfficeAreaCode() {
        return office.getAreaCode();
    }

    public String getOfficeNumber() {
        return office.getNumber();
    }
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",ZeroShot,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) return 0;
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Instruc,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {
    return 0;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Context,"```java
if (isNotEligible(anEmployee)) {
    return 0;
}

private boolean isNotEligible(Employee anEmployee) {
    return anEmployee.seniority < 2 || 
           anEmployee.monthsDisabled > 12 || 
           anEmployee.isPartTime;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Rules,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {
    return 0;
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",ZeroShot,"```java
class Party {
    // Party class implementation
}

class Employee extends Party {
    private String name;
    private int id;
    private double monthlyCost;

    public Employee(String name, int id, double monthlyCost) {
        super();
        this.id = id;
        this.name = name;
        this.monthlyCost = monthlyCost;
    }
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Instruc,"```java
class Party {
    protected String _name;
    protected double _monthlyCost;

    public Party(String name, double monthlyCost) {
        this._name = name;
        this._monthlyCost = monthlyCost;
    }
}

class Employee extends Party {
    private int _id;

    public Employee(String name, int id, double monthlyCost) {
        super(name, monthlyCost);
        this._id = id;
    }
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Context,"```java
class Party {
    // Party class implementation
}

class Employee extends Party {
    private String name;
    private String id;
    private double monthlyCost;

    public Employee(String name, String id, double monthlyCost) {
        this.name = name;
        this.id = id;
        this.monthlyCost = monthlyCost;
    }

    // Getters and setters for the fields
    public String getName() {
        return name;
    }

    public String getId() {
        return id;
    }

    public double getMonthlyCost() {
        return monthlyCost;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setMonthlyCost(double monthlyCost) {
        this.monthlyCost = monthlyCost;
    }
}
```",0
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Rules,"```java
class Party {
    protected String _name;

    public Party(String name) {
        this._name = name;
    }
}

class Employee extends Party {
    private int _id;
    private double _monthlyCost;

    public Employee(String name, int id, double monthlyCost) {
        super(name);
        this._id = id;
        this._monthlyCost = monthlyCost;
    }
}
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,ZeroShot,"```java
public class EmployeeFactory {
    public static Employee createLeadEngineer(String name) {
        return new Employee(name, 'E');
    }
}

// Usage
leadEngineer = EmployeeFactory.createLeadEngineer(document.leadEngineer);
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Instruc,"```java
public class Employee {
    private String name;
    private String role;

    private Employee(String name, String role) {
        this.name = name;
        this.role = role;
    }

    public static Employee create(String name, String role) {
        return new Employee(name, role);
    }
}

// Usage
leadEngineer = Employee.create(document.leadEngineer, 'E');
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Context,"```java
Employee leadEngineer = new Employee(document.getLeadEngineer(), 'E');
```",0
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Rules,"```java
public class EmployeeFactory {
    public static Employee createLeadEngineer(String leadEngineerName, char employeeType) {
        return new Employee(leadEngineerName, employeeType);
    }
}

// Usage
leadEngineer = EmployeeFactory.createLeadEngineer(document.leadEngineer, 'E');
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",ZeroShot,"```java
class Person {
    String genderCode;

    public Person(String genderCode) {
        this.genderCode = genderCode;
    }

    public String getGenderCode() {
        return genderCode;
    }
}

class Male extends Person {
    public Male() {
        super(""M"");
    }
}

class Female extends Person {
    public Female() {
        super(""F"");
    }
}
```",0
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Instruc,"```java
class Person {
    private String genderType;

    public Person(String genderType) {
        this.genderType = genderType;
    }

    public String getGenderCode() {
        return genderType;
    }

    public static Person createPerson(String gender) {
        return new Person(gender);
    }
}
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Context,"```java
class Person {
    public String getGenderCode() {
        return ""X"";
    }
}

class Male extends Person {
    @Override
    public String getGenderCode() {
        return ""M"";
    }
}

class Female extends Person {
    @Override
    public String getGenderCode() {
        return ""F"";
    }
}
```",0
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Rules,"```java
class Person {
    private String genderCode;

    public Person(String genderCode) {
        this.genderCode = genderCode;
    }

    public String getGenderCode() {
        return genderCode;
    }
}

// Usage
Person male = new Person(""M"");
Person female = new Person(""F"");
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",ZeroShot,"```java
class DateRange {
    private LocalDate startDate;
    private LocalDate endDate;

    public DateRange(LocalDate startDate, LocalDate endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }
}

public class InvoiceCalculator {
    public BigDecimal amountInvoiced(DateRange dateRange) {
        // Implementation logic for amount invoiced
    }

    public BigDecimal amountReceived(DateRange dateRange) {
        // Implementation logic for amount received
    }

    public BigDecimal amountOverdue(DateRange dateRange) {
        // Implementation logic for amount overdue
    }
}
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Instruc,"```java
class DateRange {
    private final LocalDate startDate;
    private final LocalDate endDate;

    public DateRange(LocalDate startDate, LocalDate endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }
}

public class InvoiceService {
    public double amountInvoiced(DateRange dateRange) {
        // implementation
    }

    public double amountReceived(DateRange dateRange) {
        // implementation
    }

    public double amountOverdue(DateRange dateRange) {
        // implementation
    }
}
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Context,"```java
public class InvoiceManager {

    public double amountInvoiced(LocalDate startDate, LocalDate endDate) {
        // Logic to calculate the amount invoiced between the specified dates
    }

    public double amountReceived(LocalDate startDate, LocalDate endDate) {
        // Logic to calculate the amount received between the specified dates
    }

    public double amountOverdue(LocalDate startDate, LocalDate endDate) {
        // Logic to calculate the amount overdue between the specified dates
    }
}
```",0
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Rules,"```java
class DateRange {
    private LocalDate startDate;
    private LocalDate endDate;

    public DateRange(LocalDate startDate, LocalDate endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }
}

public class Invoice {

    public void amountInvoiced(DateRange dateRange) {
        // implementation
    }

    public void amountReceived(DateRange dateRange) {
        // implementation
    }

    public void amountOverdue(DateRange dateRange) {
        // implementation
    }
}
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",ZeroShot,"```java
double averageAge = 0;
double totalSalary = 0;

for (Person p : people) {
    averageAge += p.age;
}

averageAge = averageAge / people.size();

for (Person p : people) {
    totalSalary += p.salary;
}
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",Instruc,"```java
double averageAge = 0;
double totalSalary = 0;

for (Person p : people) {
    averageAge += p.age;
}
averageAge = averageAge / people.size();

for (Person p : people) {
    totalSalary += p.salary;
}
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",Context,"```java
double averageAge = 0;
double totalSalary = 0;

for (Person p : people) {
    averageAge += p.getAge();
    totalSalary += p.getSalary();
}

averageAge /= people.size();
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),ZeroShot,"```java
class Order {
    private String priority;

    public Order(String priority) {
        this.priority = priority;
    }

    public String getPriority() {
        return priority;
    }
}

class OrderFilter {
    public List<Order> filterOrders(List<Order> orders) {
        List<Order> filteredOrders = new ArrayList<>();
        for (Order o : orders) {
            if (""high"".equals(o.getPriority()) || ""rush"".equals(o.getPriority())) {
                filteredOrders.add(o);
            }
        }
        return filteredOrders;
    }
}
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Instruc,"```java
class Priority {
    private final String value;

    public Priority(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}

class Order {
    private Priority priority;

    public Priority getPriority() {
        return priority;
    }

    public void setPriority(Priority priority) {
        this.priority = priority;
    }
}

// Usage example
List<Order> filteredOrders = orders.stream()
        .filter(o -> ""high"".equals(o.getPriority().getValue()) || ""rush"".equals(o.getPriority().getValue()))
        .collect(Collectors.toList());
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Context,"```java
orders.stream()
      .filter(o -> ""high"".equals(o.getPriority()) || ""rush"".equals(o.getPriority()))
      .collect(Collectors.toList());
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Rules,"```java
public class Order {
    private Priority priority;

    public Order(Priority priority) {
        this.priority = priority;
    }

    public Priority getPriority() {
        return priority;
    }
}

public class Priority {
    public static final Priority HIGH = new Priority(""high"");
    public static final Priority RUSH = new Priority(""rush"");
    
    private String value;

    private Priority(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}

// Usage
List<Order> filteredOrders = orders.stream()
    .filter(o -> Priority.HIGH.equals(o.getPriority()) || Priority.RUSH.equals(o.getPriority()))
    .collect(Collectors.toList());
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",ZeroShot,"```java
outStream.write(""<p>title: "" + person.photo.title + ""</p>\n"");
outStream.write(""<p>location: "" + person.photo.location + ""</p>\n"");
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",Instruc,"```java
outStream.write(`<p>title: ${person.photo.title}</p>\n`);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",Context,"```java
public void emitPhotoData(PrintStream outStream, Photo photo) {
    outStream.printf(""<p>title: %s</p>%n"", photo.getTitle());
    outStream.printf(""<p>location: %s</p>%n"", photo.getLocation());
}
```",0
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",ZeroShot,"```java
class Person {
    private TelephoneNumber telephoneNumber;

    public String getOfficeAreaCode() {
        return telephoneNumber.getAreaCode();
    }

    public String getOfficeNumber() {
        return telephoneNumber.getNumber();
    }
}

class TelephoneNumber {
    private String areaCode;
    private String number;

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",0
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Instruc,"```java
class Person {
    private String _areaCode;
    private String _number;

    public Person(String areaCode, String number) {
        this._areaCode = areaCode;
        this._number = number;
    }

    public String getOfficeAreaCode() {
        return this._areaCode;
    }

    public String getOfficeNumber() {
        return this._number;
    }
}
```",1
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Context,"```java
class Person {
    private TelephoneNumber telephoneNumber;

    public Person(TelephoneNumber telephoneNumber) {
        this.telephoneNumber = telephoneNumber;
    }

    public String getOfficeAreaCode() {
        return telephoneNumber.getAreaCode();
    }

    public String getOfficeNumber() {
        return telephoneNumber.getNumber();
    }
}

class TelephoneNumber {
    private String areaCode;
    private String number;

    public TelephoneNumber(String areaCode, String number) {
        this.areaCode = areaCode;
        this.number = number;
    }

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",1
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Rules,"```java
class Person {
  private String _telephoneAreaCode;
  private String _telephoneNumber;

  public String getOfficeAreaCode() {
    return _telephoneAreaCode;
  }

  public String getOfficeNumber() {
    return _telephoneNumber;
  }

  public void setTelephoneNumber(String areaCode, String number) {
    this._telephoneAreaCode = areaCode;
    this._telephoneNumber = number;
  }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,ZeroShot,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Instruc,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}

class Department {
    private Manager manager;

    public Manager getManager() {
        return manager;
    }
}

class Manager {
    // Manager properties and methods
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Context,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Rules,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}

class Department {
    private Manager manager;

    public Manager getManager() {
        return manager;
    }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",ZeroShot,"```java
public class Scoring {
    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Instruc,"```java
public class ScoreCommand {
    private Candidate candidate;
    private MedicalExam medicalExam;
    private ScoringGuide scoringGuide;

    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        this.candidate = candidate;
        this.medicalExam = medicalExam;
        this.scoringGuide = scoringGuide;
    }

    public int execute() {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}

// Forwarding function
public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
    ScoreCommand command = new ScoreCommand(candidate, medicalExam, scoringGuide);
    return command.execute();
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Context,"```java
public class ScoringSystem {

    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Rules,"```java
public class ScoringService {
    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        return scoreWithCommands(candidate, medicalExam, scoringGuide);
    }

    private int scoreWithCommands(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}
```",1
