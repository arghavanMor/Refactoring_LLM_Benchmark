{
    "L3671": {
        "RefactMethod": "EXTRACT VARIABLE",
        "BeforeRefact": " public void reportAmbiguity(@NotNull Parser recognizer,\n\t\t\t\t\t\t\t\tDFA dfa, int startIndex, int stopIndex,\n\t\t\t\t\t\t\t\t@NotNull BitSet ambigAlts,\n\t\t\t\t\t\t\t\t@NotNull ATNConfigSet configs)\n    {\n        recognizer.notifyErrorListeners(\"reportAmbiguity d=\" + dfa.decision +\n\t\t\t\": ambigAlts=\" + ambigAlts + \", input='\" +\n\t\t\trecognizer.getTokenStream().getText(Interval.of(startIndex, stopIndex)) + \"'\");\n    }",
        "ZeroShotCode": "public void reportAmbiguity(@NotNull Parser recognizer,\n\t\t\t\t\t\t\t  DFA dfa, int startIndex, int stopIndex,\n\t\t\t\t\t\t\t  @NotNull BitSet ambigAlts,\n\t\t\t\t\t\t\t  @NotNull ATNConfigSet configs)\n{\n\tString msg = \"reportAmbiguity d=\" + dfa.decision +\n\t\t\": ambigAlts=\" + ambigAlts + \", input='\" +\n\t\trecognizer.getTokenStream().getText(Interval.of(startIndex, stopIndex)) + \"'\";\n\t\n\trecognizer.notifyErrorListeners(msg);\n}",
        "InstrucCode": "public void reportAmbiguity(@NotNull Parser recognizer,\n                                 DFA dfa, int startIndex, int stopIndex,\n                                 @NotNull BitSet ambigAlts,\n                                 @NotNull ATNConfigSet configs) {\n        String errorMessage = \"reportAmbiguity d=\" + dfa.decision +\n\t\t\t\": ambigAlts=\" + ambigAlts + \", input='\" +\n\t\t\trecognizer.getTokenStream().getText(Interval.of(startIndex, stopIndex)) + \"'\";\n        recognizer.notifyErrorListeners(errorMessage);\n}",
        "FewShotCode": "public void reportAmbiguity(@NotNull Parser recognizer,\n\t\t\t\t\t\t\t\tDFA dfa, int startIndex, int stopIndex,\n\t\t\t\t\t\t\t\t@NotNull BitSet ambigAlts,\n\t\t\t\t\t\t\t\t@NotNull ATNConfigSet configs)\n    {\n        String errorMessage = \"reportAmbiguity d=\" + dfa.decision +\n\t\t\t\": ambigAlts=\" + ambigAlts + \", input='\" +\n\t\t\trecognizer.getTokenStream().getText(Interval.of(startIndex, stopIndex)) + \"'\";\n\t\t\t\n        recognizer.notifyErrorListeners(errorMessage);\n    }",
        "AfterRefact": "public void reportAmbiguity(@NotNull Parser recognizer,\n\t\t\t\t\t\t\t\tDFA dfa,\n\t\t\t\t\t\t\t\tint startIndex,\n\t\t\t\t\t\t\t\tint stopIndex,\n\t\t\t\t\t\t\t\tboolean exact,\n\t\t\t\t\t\t\t\t@Nullable BitSet ambigAlts,\n\t\t\t\t\t\t\t\t@NotNull ATNConfigSet configs)\n\t{\n\t\tif (exactOnly && !exact) {\n\t\t\treturn;\n\t\t}\n\n\t\tString format = \"reportAmbiguity d=%s: ambigAlts=%s, input='%s'\";\n\t\tString decision = getDecisionDescription(recognizer, dfa);\n\t\tBitSet conflictingAlts = getConflictingAlts(ambigAlts, configs);\n\t\tString text = recognizer.getTokenStream().getText(Interval.of(startIndex, stopIndex));\n\t\tString message = String.format(format, decision, conflictingAlts, text);\n\t\trecognizer.notifyErrorListeners(message);\n\t}"
    }
}