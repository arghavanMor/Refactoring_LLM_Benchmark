RefactMethod,BeforeRefact,AfterRefact,PromptType,LlmCode,LlmReview
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",ZeroShot,"```java
class Employee {
    private String name;
    
    public Employee(String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
}

class Salesman extends Employee {
    public Salesman(String name) {
        super(name);
    }
}

class Engineer extends Employee {
    public Engineer(String name) {
        super(name);
    }
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Instruc,"```java
class Employee {
    protected String name;
}

class Salesman extends Employee {
}

class Engineer extends Employee {
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Context,"```java
abstract class Employee {
    protected String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

class Salesman extends Employee {
    // Additional Salesman-specific properties and methods can be added here
}

class Engineer extends Employee {
    // Additional Engineer-specific properties and methods can be added here
}
```",1
PULL UP FIELD,"class Employee {...} // Java

class Salesman extends Employee {
  private String name;
}

class Engineer extends Employee {
  private String name;
}","class Employee {
  protected String name;
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Rules,"```java
class Employee {
  private String name;
}

class Salesman extends Employee {
}

class Engineer extends Employee {
}
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),ZeroShot,"```java
class TemperatureRange {
    private final double low;
    private final double high;

    public TemperatureRange(double low, double high) {
        this.low = low;
        this.high = high;
    }

    public double getLow() {
        return low;
    }

    public double getHigh() {
        return high;
    }
}

class Room {
    private final TemperatureRange daysTempRange;

    public Room(TemperatureRange daysTempRange) {
        this.daysTempRange = daysTempRange;
    }

    public TemperatureRange getDaysTempRange() {
        return daysTempRange;
    }
}

class Plan {
    public boolean withinRange(double low, double high) {
        // Implementation here
        return false; // Placeholder return
    }
}

Room aRoom = new Room(new TemperatureRange(10.0, 20.0)); // Example initialization
Plan aPlan = new Plan();

TemperatureRange range = aRoom.getDaysTempRange();
if (aPlan.withinRange(range.getLow(), range.getHigh())) {
    // Logic if within range
}
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Instruc,"```java
public class Room {
    private DaysTempRange daysTempRange;

    // Other properties and methods...

    public double getDaysTempRangeLow() {
        return daysTempRange.getLow();
    }

    public double getDaysTempRangeHigh() {
        return daysTempRange.getHigh();
    }
}

public class Plan {
    // Other properties and methods...

    public boolean withinRange(double low, double high) {
        // Implementation...
    }
}

// New function to preserve whole object
public boolean isWithinRange(Room aRoom, Plan aPlan) {
    double low = aRoom.getDaysTempRangeLow();
    double high = aRoom.getDaysTempRangeHigh();
    return aPlan.withinRange(low, high);
}

// Updated call
if (isWithinRange(aRoom, aPlan)) {
    // Functionality here...
}
```",1
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Context,"```java
int low = aRoom.getDaysTempRange().getLow();
int high = aRoom.getDaysTempRange().getHigh();
if (aPlan.isWithinRange(low, high)) {
    // Code to execute if within range
}
```",0
PRESERVE WHOLE OBJECT,"const low = aRoom.daysTempRange.low;
const high = aRoom.daysTempRange.high;
if (aPlan.withinRange(low, high))",if (aPlan.withinRange(aRoom.daysTempRange)),Rules,"```java
Range daysTempRange = aRoom.getDaysTempRange();
if (aPlan.withinRange(daysTempRange.getLow(), daysTempRange.getHigh())) {
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",ZeroShot,"```java
String[] orderData = orderString.split(""\\s+"");
String[] productDetails = orderData[0].split(""–"");
String productId = productDetails[1];
double productPrice = priceList.get(productId);
int quantity = Integer.parseInt(orderData[1]);
double orderPrice = quantity * productPrice;
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",Instruc,"```java
class OrderProcessor {
    private String orderString;
    private Map<String, Integer> priceList;

    public OrderProcessor(String orderString, Map<String, Integer> priceList) {
        this.orderString = orderString;
        this.priceList = priceList;
    }

    public OrderData processOrder() {
        OrderData orderData = extractOrderData();
        return calculateOrderPrice(orderData);
    }

    private OrderData extractOrderData() {
        String[] data = orderString.split(""\\s+"");
        String productCode = data[0].split(""–"")[1];
        int quantity = Integer.parseInt(data[1]);
        return new OrderData(productCode, quantity);
    }

    private int calculateOrderPrice(OrderData orderData) {
        int productPrice = priceList.get(orderData.getProductCode());
        return orderData.getQuantity() * productPrice;
    }

    public static class OrderData {
        private String productCode;
        private int quantity;

        public OrderData(String productCode, int quantity) {
            this.productCode = productCode;
            this.quantity = quantity;
        }

        public String getProductCode() {
            return productCode;
        }

        public int getQuantity() {
            return quantity;
        }
    }
}
```",1
SPLIT PHASE,"const orderData = orderString.split(/\s+/);
const productPrice = priceList[orderData[0].split(“-”)[1]];
const orderPrice = parseInt(orderData[1]) * productPrice;","const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

function parseOrder(aString) {
  const values =  aString.split(/\s+/);
  return ({
    productID: values[0].split(“-”)[1],
    quantity: parseInt(values[1]),
  });
}
function price(order, priceList) {
  return order.quantity * priceList[order.productID];
}",Context,"```java
String[] orderData = orderString.split(""\\s+"");
String productId = orderData[0].split(""–"")[1];
double productPrice = priceList.get(productId);
int quantity = Integer.parseInt(orderData[1]);
double orderPrice = quantity * productPrice;
```",1
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},ZeroShot,"```java
class Employee {
    // Employee attributes and methods
}

// Salesman class collapsed into Employee
```",1
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Instruc,"```java
class Employee {
    // Attributes and methods common to all employees
}

class Salesman extends Employee {
    // Attributes and methods specific to salesmen
}
```",0
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Context,"```java
class Employee {
    // Employee attributes and methods
}

class Salesman extends Employee {
    // Salesman-specific attributes and methods
}
```",0
COLLAPSE HIERARCHY,"class Employee {...}
class Salesman extends Employee {...}",class Employee {...},Rules,"```java
class Employee {
    // common fields and methods for Employee
}
```",0
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",ZeroShot,"```java
class Order {
    protected Warehouse _warehouse;

    public int getDaysToShip() {
        return _warehouse.getDaysToShip();
    }
}

class PriorityOrder {
    private Order order;
    private PriorityPlan _priorityPlan;

    public PriorityOrder(Order order) {
        this.order = order;
        this._priorityPlan = new PriorityPlan();
    }

    public int getDaysToShip() {
        return _priorityPlan.getDaysToShip();
    }
}
```",1
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",Instruc,"```java
class Order {
    private Warehouse _warehouse;
    private PriorityOrderDelegate _delegate;

    public Order(Warehouse warehouse) {
        this._warehouse = warehouse;
        this._delegate = null;
    }

    public int getDaysToShip() {
        if (_delegate != null) {
            return _delegate.getDaysToShip();
        }
        return this._warehouse.getDaysToShip();
    }
}

class PriorityOrderDelegate {
    private Warehouse _warehouse;
    private PriorityPlan _priorityPlan;

    public PriorityOrderDelegate(Warehouse warehouse, PriorityPlan priorityPlan) {
        this._warehouse = warehouse;
        this._priorityPlan = priorityPlan;
    }

    public int getDaysToShip() {
        return this._priorityPlan.getDaysToShip();
    }
}

// Client code would create an Order or a PriorityOrder as follows:
Order order = new Order(warehouse);
PriorityOrderDelegate priorityOrder = new PriorityOrderDelegate(warehouse, priorityPlan);
order.setDelegate(priorityOrder);
```",1
REPLACE SUBCLASS WITH DELEGATE,"class Order {
  get daysToShip() {
    return this._warehouse.daysToShip;
  }
}

class PriorityOrder extends Order {
  get daysToShip() {
    return this._priorityPlan.daysToShip;
  }
}","class Order {
  get daysToShip() {
    return (this._priorityDelegate)
      ? this._priorityDelegate.daysToShip
      : this._warehouse.daysToShip;
  }
}

class PriorityOrderDelegate {
  get daysToShip() {
    return this._priorityPlan.daysToShip
  }
}",Context,"```java
class Order {
    protected Warehouse _warehouse;

    public int getDaysToShip() {
        return _warehouse.getDaysToShip();
    }
}

class PriorityOrder extends Order {
    protected PriorityPlan _priorityPlan;

    @Override
    public int getDaysToShip() {
        return _priorityPlan.getDaysToShip();
    }
}
```",0
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",ZeroShot,"```java
class Product {
    private Price _price;

    public void applyDiscount(double amount) {
        _price.setAmount(_price.getAmount() - amount);
    }
}

class Price {
    private double amount;

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
```",0
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Instruc,"```java
class Product {
    private final Price price;

    public Product(Price price) {
        this.price = price;
    }

    public Price getPrice() {
        return price;
    }

    public Product applyDiscount(double amount) {
        return new Product(new Price(price.getAmount() - amount));
    }
}

class Price {
    private final double amount;

    public Price(double amount) {
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Price)) return false;
        Price other = (Price) obj;
        return Double.compare(other.amount, amount) == 0;
    }

    @Override
    public int hashCode() {
        return Double.hashCode(amount);
    }
}
```",1
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Context,"```java
class Product {
    private Price _price;

    public void applyDiscount(double discountAmount) {
        _price.setAmount(_price.getAmount() - discountAmount);
    }
}

class Price {
    private double amount;

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
```",0
CHANGE REFERENCE TO VALUE,"class Product {
  applyDiscount(arg) {this._price.amount -= arg;}","class Product {
  applyDiscount(arg) {
    this._price = new Money(this._price.amount - arg, this._price.currency);
  }",Rules,"```java
class Product {
    private Money _price;

    public void applyDiscount(double arg) {
        _price.setAmount(_price.getAmount() - arg);
    }
}

class Money {
    private double amount;

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}
```",0
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",ZeroShot,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }
}

// Usage
Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Instruc,"```java
public class Organization {
    private final String name;
    private final String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        Organization organization = new Organization(""Acme Gooseberries"", ""GB"");

        // Accessing the data using accessor methods
        System.out.println(""Organization Name: "" + organization.getName());
        System.out.println(""Organization Country: "" + organization.getCountry());
    }
}
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Context,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }

    @Override
    public String toString() {
        return ""Organization{name='"" + name + ""', country='"" + country + ""'}"";
    }

    public static void main(String[] args) {
        Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
        System.out.println(organization);
    }
}
```",1
ENCAPSULATE RECORD,"organization = {name: “Acme Gooseberries”, country: “GB”};","class Organization {
  constructor(data) {
    this._name = data.name;
    this._country = data.country;
  }
  get name()    {return this._name;}
  set name(arg) {this._name = arg;}
  get country()    {return this._country;}
  set country(arg) {this._country = arg;}
}",Rules,"```java
public class Organization {
    private String name;
    private String country;

    public Organization(String name, String country) {
        this.name = name;
        this.country = country;
    }

    public String getName() {
        return name;
    }

    public String getCountry() {
        return country;
    }
}

// Usage
Organization organization = new Organization(""Acme Gooseberries"", ""GB"");
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",ZeroShot,"```java
abstract class Employee {
    abstract int getQuota();
}

class Engineer extends Employee {
    @Override
    int getQuota() {
        // Engineer specific quota implementation
        return 0; // Replace with actual logic
    }
}

class Salesman extends Employee {
    @Override
    int getQuota() {
        // Salesman specific quota implementation
        return 0; // Replace with actual logic
    }
}
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Instruc,"```java
class Employee {
    // No longer includes the quota method
}

class Engineer extends Employee {
    public int getQuota() {
        // Implementation specific to Engineer
    }
}

class Salesman extends Employee {
    public int getQuota() {
        // Implementation specific to Salesman
    }
}
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Context,"```java
abstract class Employee {
    public abstract int getQuota();
}

class Engineer extends Employee {
    @Override
    public int getQuota() {
        // Engineer-specific quota logic
        return 0; // Placeholder
    }
}

class Salesman extends Employee {
    @Override
    public int getQuota() {
        // Salesman-specific quota logic
        return 0; // Placeholder
    }
}
```",1
PUSH DOWN METHOD,"class Employee {
  get quota {...}
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}
class Salesman extends Employee {
  get quota {...}  
}",Rules,"```java
class Employee {
    public void getQuota() {
        // implement quota logic
    }
}

class Engineer extends Employee {
    // Engineer specific behaviors
}

class Salesman extends Employee {
    // Salesman specific behaviors
}
```",0
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",ZeroShot,"```java
public class InvoicePrinter {
    private Invoice invoice;

    public InvoicePrinter(Invoice invoice) {
        this.invoice = invoice;
    }

    public void printOwing() {
        printBanner();
        double outstanding = calculateOutstanding();

        printDetails(outstanding);
    }

    private void printDetails(double outstanding) {
        System.out.println(""name: "" + invoice.getCustomer());
        System.out.println(""amount: "" + outstanding);
    }

    private void printBanner() {
        // Implementation for printing the banner
    }

    private double calculateOutstanding() {
        // Implementation for calculating the outstanding amount
        return 0; // Placeholder return value
    }
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Instruc,"```javascript
function printOwing(invoice) {
  printBanner();
  let outstanding = calculateOutstanding();
  
  printDetails(invoice, outstanding);
}

function printDetails(invoice, outstanding) {
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Context,"```java
public void printOwing(Invoice invoice) {
    printBanner();
    double outstanding = calculateOutstanding(invoice);

    // Print details
    System.out.println(""name: "" + invoice.getCustomer());
    System.out.println(""amount: "" + outstanding);
}
```",1
EXTRACT FUNCTION,"function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();

  //print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);  
}","function printOwing(invoice) {
  printBanner();
  let outstanding  = calculateOutstanding();
  printDetails(outstanding);

  function printDetails(outstanding) {
    console.log(`name: ${invoice.customer}`);
    console.log(`amount: ${outstanding}`);
  }
}",Rules,"```javascript
function printOwing(invoice) {
  printBanner();
  let outstanding = calculateOutstanding();
  printDetails(invoice, outstanding);
}

function printDetails(invoice, outstanding) {
  // print details
  console.log(`name: ${invoice.customer}`);
  console.log(`amount: ${outstanding}`);
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",ZeroShot,"```java
if (this.discountRate != 0) {
    base = base - (this.discountRate * base);
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Instruc,"```java
assert this.discountRate != null : ""Discount rate should not be null"";

if (this.discountRate != null) {
    base = base - (this.discountRate * base);
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Context,"```java
if (discountRate > 0) {
    base -= discountRate * base;
}
```",1
INTRODUCE ASSERTION,"if (this.discountRate)
  base = base - (this.discountRate * base);","assert(this.discountRate >= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);",Rules,"```java
if (this.discountRate >= 0) {
  base = base - (this.discountRate * base);
}
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",ZeroShot,"```java
double itemPrice = order.itemPrice;
int quantity = order.quantity;
double discount = Math.max(0, quantity - 500) * itemPrice * 0.05;
double additionalCharge = Math.min(quantity * itemPrice * 0.1, 100);

return quantity * itemPrice - discount + additionalCharge;
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Instruc,"```java
double quantityPrice = order.quantity * order.itemPrice;
double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double minDiscount = Math.min(quantityPrice * 0.1, 100);

return quantityPrice - discount + minDiscount;
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Context,"```java
double calculateOrderTotal(Order order) {
    double basePrice = order.quantity * order.itemPrice;
    double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
    double additionalDiscount = Math.min(basePrice * 0.1, 100);

    return basePrice - discount + additionalDiscount;
}
```",1
EXTRACT VARIABLE,"return order.quantity * order.itemPrice -
    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +
    Math.min(order.quantity * order.itemPrice * 0.1, 100);","const basePrice = order.quantity * order.itemPrice;
const quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
const shipping = Math.min(basePrice * 0.1, 100);
return basePrice - quantityDiscount + shipping;",Rules,"```java
double quantityPrice = order.quantity * order.itemPrice;
double discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;
double minDiscount = Math.min(quantityPrice * 0.1, 100);
return quantityPrice - discount + minDiscount;
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,ZeroShot,"```java
return (anOrder.basePrice > 1000);
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Instruc,"```java
return (anOrder.basePrice > 1000);
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Context,"```java
double basePrice = anOrder.getBasePrice();
return basePrice > 1000;
```",1
INLINE VARIABLE,"let basePrice = anOrder.basePrice;
return (basePrice > 1000);",return anOrder.basePrice > 1000;,Rules,"```java
return (anOrder.basePrice > 1000);
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",ZeroShot,"```java
import java.util.List;

class Person {
    private List<Course> courses;

    public List<Course> getCourses() {
        return courses;
    }

    public void setCourses(List<Course> courses) {
        this.courses = courses;
    }
}
```",0
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Instruc,"```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Person {
    private List<String> _courses = new ArrayList<>();

    public List<String> getCourses() {
        return Collections.unmodifiableList(_courses);
    }

    public void addCourse(String course) {
        _courses.add(course);
    }

    public void removeCourse(String course) {
        _courses.remove(course);
    }
}
```",1
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Context,"```java
public class Person {
    private List<String> courses;

    public List<String> getCourses() {
        return courses;
    }

    public void setCourses(List<String> courses) {
        this.courses = courses;
    }
}
```",0
ENCAPSULATE COLLECTION,"class Person {              
  get courses() {return this._courses;}
  set courses(aList) {this._courses = aList;}","class Person {
  get courses() {return this._courses.slice();}
  addCourse(aCourse)    { ... }
  removeCourse(aCourse) { ... }",Rules,"```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Person {
    private final List<String> _courses = new ArrayList<>();

    public List<String> getCourses() {
        return Collections.unmodifiableList(_courses);
    }

    public void addCourse(String course) {
        _courses.add(course);
    }

    public void removeCourse(String course) {
        _courses.remove(course);
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",ZeroShot,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner() {
        this.firstName = ""Martin"";
        this.lastName = ""Fowler"";
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }
}

// Usage
Owner defaultOwner = new Owner();
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Instruc,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

// Usage
Owner defaultOwner = new Owner(""Martin"", ""Fowler"");
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Context,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner() {
        this.firstName = ""Martin"";
        this.lastName = ""Fowler"";
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }
}
```",1
ENCAPSULATE VARIABLE,"let defaultOwner = {firstName: “Martin”, lastName: “Fowler”};","let defaultOwnerData = {firstName: “Martin”, lastName: “Fowler”};
export function defaultOwner()       {return defaultOwnerData;}
export function setDefaultOwner(arg) {defaultOwnerData = arg;}",Rules,"```java
public class Owner {
    private String firstName;
    private String lastName;

    public Owner(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}

// Usage
Owner defaultOwner = new Owner(""Martin"", ""Fowler"");
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",ZeroShot,"```java
class Employee {
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Instruc,"```java
class Employee {
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",1
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Context,"```java
class Employee {
    private String quota;

    public String getQuota() {
        return quota;
    }

    public void setQuota(String quota) {
        this.quota = quota;
    }
}

class Engineer extends Employee {
    // Engineer-specific attributes and methods can be added here
}

class Salesman extends Employee {
    // Salesman-specific attributes and methods can be added here
}
```",0
PUSH DOWN FIELD,"class Employee {        // Java
  private String quota;
}

class Engineer extends Employee {...}
class Salesman extends Employee {...}","class Employee {...}
class Engineer extends Employee {...}

class Salesman extends Employee {
  protected String quota;
}",Rules,"```java
class Employee {
    // Java
}

class Engineer extends Employee {
    private String quota;
}

class Salesman extends Employee {
    private String quota;
}
```",0
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",ZeroShot,"```java
public double getPayAmount() {
    if (isDead) {
        return deadAmount();
    }
    if (isSeparated) {
        return separatedAmount();
    }
    if (isRetired) {
        return retiredAmount();
    }
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Instruc,"```java
function getPayAmount() {
    if (isDead) 
        return deadAmount();
    
    if (isSeparated) 
        return separatedAmount();
    
    if (isRetired) 
        return retiredAmount();
    
    return normalPayAmount();
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Context,"```java
public class PayCalculator {

    public double getPayAmount() {
        if (isDead) {
            return deadAmount();
        } 
        if (isSeparated) {
            return separatedAmount();
        } 
        if (isRetired) {
            return retiredAmount();
        } 
        return normalPayAmount();
    }

    // Assume these methods are defined elsewhere in the class
    private double deadAmount() {
        // Implementation
    }

    private double separatedAmount() {
        // Implementation
    }

    private double retiredAmount() {
        // Implementation
    }

    private double normalPayAmount() {
        // Implementation
    }

    private boolean isDead;
    private boolean isSeparated;
    private boolean isRetired;
}
```",1
REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES,"function getPayAmount() {
    let result;
    if (isDead)
        result = deadAmount();
    else {
        if (isSeparated)
            result = separatedAmount();
        else {
            if (isRetired)
                result = retiredAmount();
            else
                result = normalPayAmount();
        }
    }
    return result;
}","function getPayAmount() {
    if (isDead) return deadAmount();
    if (isSeparated) return separatedAmount();
    if (isRetired) return retiredAmount();
    return normalPayAmount();
}",Rules,"```java
function getPayAmount() {
    if (isDead) 
        return deadAmount();
    
    if (isSeparated) 
        return separatedAmount();
    
    if (isRetired) 
        return retiredAmount();
    
    return normalPayAmount();
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",ZeroShot,"```java
class Person {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```",0
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Instruc,"```java
class Person {
    private final String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
```",1
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Context,"```java
public class Person {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```",0
REMOVE SETTING METHOD,"class Person {
  get name() {...}
  set name(aString) {...}","class Person {
  get name() {...}",Rules,"```java
class Person {
  private final String name;

  public Person(String name) {
    this.name = name;
  }

  public String getName() {
    return name;
  }
}
```",1
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",ZeroShot,"```java
private double discount;
private double discountedTotal;

public double getDiscountedTotal() {
    return discountedTotal;
}

public void setDiscount(double aNumber) {
    double old = this.discount;
    this.discount = aNumber;
    this.discountedTotal += old - aNumber; 
}
```",0
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",Instruc,"```java
public class Order {
    private double _discount;
    private double _total;

    public double getDiscountedTotal() {
        return calculateDiscountedTotal();
    }

    public void setDiscount(double aNumber) {
        _discount = aNumber;
    }

    private double calculateDiscountedTotal() {
        return _total - _discount;
    }
}
```",1
REPLACE DERIVED VARIABLE WITH QUERY,"get discountedTotal() {return this._discountedTotal;}
set discount(aNumber) {
    const old = this._discount;
    this._discount = aNumber;
    this._discountedTotal += old - aNumber; 
}","get discountedTotal() {return this._baseTotal - this._discount;}
set discount(aNumber) {this._discount = aNumber;}",Context,"```java
public class DiscountedItem {
    private double discountedTotal;
    private double discount;

    public double getDiscountedTotal() {
        return discountedTotal;
    }

    public void setDiscount(double newDiscount) {
        double oldDiscount = this.discount;
        this.discount = newDiscount;
        this.discountedTotal += oldDiscount - newDiscount;
    }
}
```",0
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",ZeroShot,"```java
import java.util.List;

public class PersonFinder {
    public static String foundPerson(List<String> people) {
        for (String person : people) {
            if (isTargetPerson(person)) {
                return person;
            }
        }
        return """";
    }

    private static boolean isTargetPerson(String person) {
        return person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"");
    }
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Instruc,"```java
public class PersonFinder {
    public String foundPerson(String[] people) {
        for (String person : people) {
            if (isTargetPerson(person)) {
                return person;
            }
        }
        return """";
    }

    private boolean isTargetPerson(String person) {
        return person.equals(""Don"") || person.equals(""John"") || person.equals(""Kent"");
    }
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Context,"```java
public String foundPerson(List<String> people) {
    Set<String> targets = new HashSet<>(Arrays.asList(""Don"", ""John"", ""Kent""));
    
    for (String person : people) {
        if (targets.contains(person)) {
            return person;
        }
    }
    return """";
}
```",1
SUBSTITUTE ALGORITHM,"function foundPerson(people) {
  for(let i = 0; i < people.length; i++) {
    if (people[i] === “Don”) {
      return “Don”;
    }
    if (people[i] === “John”) {
      return “John”;
    }
    if (people[i] === “Kent”) {
      return “Kent”;
    }
  }
  return “”;
}","function foundPerson(people) {
  const candidates = [”Don”, “John”, “Kent”];
  return people.find(p => candidates.includes(p)) || '';
}",Rules,"```java
public String foundPerson(String[] people) {
    for (String person : people) {
        if (""Don"".equals(person) || ""John"".equals(person) || ""Kent"".equals(person)) {
            return person;
        }
    }
    return """";
}
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",ZeroShot,"```java
abstract class Bird {
    public abstract String getDescription();
}

class EuropeanSwallow extends Bird {
    @Override
    public String getDescription() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    public AfricanSwallow(int numberOfCoconuts) {
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    public String getDescription() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    public NorwegianBlueParrot(int voltage) {
        this.voltage = voltage;
    }

    @Override
    public String getDescription() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class UnknownBird extends Bird {
    @Override
    public String getDescription() {
        return ""unknown"";
    }
}

// Usage
Bird bird = // some instance of Bird
String description = bird.getDescription();
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Instruc,"```java
abstract class Bird {
    String type;
    
    public Bird(String type) {
        this.type = type;
    }
    
    public abstract String getStatus();
}

class EuropeanSwallow extends Bird {
    public EuropeanSwallow() {
        super(""EuropeanSwallow"");
    }
    
    @Override
    public String getStatus() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    public AfricanSwallow(int numberOfCoconuts) {
        super(""AfricanSwallow"");
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    public String getStatus() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    public NorwegianBlueParrot(int voltage) {
        super(""NorwegianBlueParrot"");
        this.voltage = voltage;
    }

    @Override
    public String getStatus() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class BirdFactory {
    public static Bird createBird(String type, int... params) {
        switch (type) {
            case ""EuropeanSwallow"":
                return new EuropeanSwallow();
            case ""AfricanSwallow"":
                return new AfricanSwallow(params[0]);
            case ""NorwegianBlueParrot"":
                return new NorwegianBlueParrot(params[0]);
            default:
                throw new IllegalArgumentException(""Unknown bird type"");
        }
    }
}

// Usage
Bird bird = BirdFactory.createBird(""AfricanSwallow"", 3);
String status = bird.getStatus();
```",1
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Context,"```java
public String getBirdBehavior(Bird bird) {
    switch (bird.getType()) {
        case EUROPEAN_SWALLOW:
            return ""average"";
        case AFRICAN_SWALLOW:
            return getAfricanSwallowBehavior(bird);
        case NORWEGIAN_BLUE_PARROT:
            return getNorwegianBlueParrotBehavior(bird);
        default:
            return ""unknown"";
    }
}

private String getAfricanSwallowBehavior(Bird bird) {
    return (bird.getNumberOfCoconuts() > 2) ? ""tired"" : ""average"";
}

private String getNorwegianBlueParrotBehavior(Bird bird) {
    return (bird.getVoltage() > 100) ? ""scorched"" : ""beautiful"";
}
```",0
REPLACE CONDITIONAL WITH POLYMORPHISM,"switch (bird.type) {
  case 'EuropeanSwallow':
    return “average”;
  case 'AfricanSwallow':
    return (bird.numberOfCoconuts > 2) ? “tired” : “average”;
  case 'NorwegianBlueParrot':
    return (bird.voltage > 100) ? “scorched” : “beautiful”;
  default:
    return “unknown”;","class EuropeanSwallow {
  get plumage() {
    return “average”;
  }
class AfricanSwallow {
  get plumage() {
     return (this.numberOfCoconuts > 2) ? “tired” : “average”;
  }
class NorwegianBlueParrot {
  get plumage() {
     return (this.voltage > 100) ? “scorched” : “beautiful”;
  }",Rules,"```java
abstract class Bird {
    abstract String getDescription();
}

class EuropeanSwallow extends Bird {
    @Override
    String getDescription() {
        return ""average"";
    }
}

class AfricanSwallow extends Bird {
    private int numberOfCoconuts;

    AfricanSwallow(int numberOfCoconuts) {
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    String getDescription() {
        return (numberOfCoconuts > 2) ? ""tired"" : ""average"";
    }
}

class NorwegianBlueParrot extends Bird {
    private int voltage;

    NorwegianBlueParrot(int voltage) {
        this.voltage = voltage;
    }

    @Override
    String getDescription() {
        return (voltage > 100) ? ""scorched"" : ""beautiful"";
    }
}

class BirdFactory {
    public static Bird createBird(String type, int... parameters) {
        switch (type) {
            case ""EuropeanSwallow"":
                return new EuropeanSwallow();
            case ""AfricanSwallow"":
                return new AfricanSwallow(parameters[0]);
            case ""NorwegianBlueParrot"":
                return new NorwegianBlueParrot(parameters[0]);
            default:
                return null; // or throw an exception
        }
    }
}

// Usage Example
Bird bird = BirdFactory.createBird(""AfricanSwallow"", 3);
String description = bird.getDescription();
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",ZeroShot,"```java
if (isInSummer(aDate, plan)) {
    charge = calculateSummerCharge(quantity, plan);
} else {
    charge = calculateRegularCharge(quantity, plan);
}

private boolean isInSummer(LocalDate aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}

private double calculateSummerCharge(int quantity, Plan plan) {
    return quantity * plan.summerRate;
}

private double calculateRegularCharge(int quantity, Plan plan) {
    return quantity * plan.regularRate + plan.regularServiceCharge;
}
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Instruc,"```java
if (isInSummer(aDate, plan)) {
    charge = calculateSummerCharge(quantity, plan);
} else {
    charge = calculateRegularCharge(quantity, plan);
}

private boolean isInSummer(LocalDate aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}

private double calculateSummerCharge(int quantity, Plan plan) {
    return quantity * plan.summerRate;
}

private double calculateRegularCharge(int quantity, Plan plan) {
    return quantity * plan.regularRate + plan.regularServiceCharge;
}
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Context,"```java
boolean isSummer = !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
charge = quantity * (isSummer ? plan.summerRate : plan.regularRate) + (isSummer ? 0 : plan.regularServiceCharge);
```",1
DECOMPOSE CONDITIONAL,"if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
  charge = quantity * plan.summerRate;
else
  charge = quantity * plan.regularRate + plan.regularServiceCharge;","if (summer())
  charge = summerCharge();
else
  charge = regularCharge();",Rules,"```java
if (isSummerCharge(aDate, plan)) {
    charge = calculateSummerCharge(quantity, plan);
} else {
    charge = calculateRegularCharge(quantity, plan);
}

private boolean isSummerCharge(LocalDate aDate, Plan plan) {
    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);
}

private double calculateSummerCharge(int quantity, Plan plan) {
    return quantity * plan.summerRate;
}

private double calculateRegularCharge(int quantity, Plan plan) {
    return quantity * plan.regularRate + plan.regularServiceCharge;
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",ZeroShot,"```java
class OrganizationUnit {
    private String name;

    public String getName() {
        return name;
    }
}

class Department extends OrganizationUnit {
    public double getTotalAnnualCost() {
        // Implementation details...
        return 0; // Placeholder return value
    }

    public int getHeadCount() {
        // Implementation details...
        return 0; // Placeholder return value
    }
}

class Employee extends OrganizationUnit {
    private String id;

    public String getId() {
        return id;
    }

    public double getAnnualCost() {
        // Implementation details...
        return 0; // Placeholder return value
    }
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Instruc,"```java
class Entity {
    String name;
    
    String getName() {
        return name;
    }
}

class Department extends Entity {
    int totalAnnualCost;
    int headCount;

    int getTotalAnnualCost() {
        return totalAnnualCost;
    }

    int getHeadCount() {
        return headCount;
    }
}

class Employee extends Entity {
    int annualCost;
    String id;

    int getAnnualCost() {
        return annualCost;
    }

    String getId() {
        return id;
    }
}
```",1
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Context,"```java
class Department {
    private double totalAnnualCost;
    private String name;
    private int headCount;

    public Department(double totalAnnualCost, String name, int headCount) {
        this.totalAnnualCost = totalAnnualCost;
        this.name = name;
        this.headCount = headCount;
    }

    public double getTotalAnnualCost() {
        return totalAnnualCost;
    }

    public String getName() {
        return name;
    }

    public int getHeadCount() {
        return headCount;
    }
}

class Employee {
    private double annualCost;
    private String name;
    private String id;

    public Employee(double annualCost, String name, String id) {
        this.annualCost = annualCost;
        this.name = name;
        this.id = id;
    }

    public double getAnnualCost() {
        return annualCost;
    }

    public String getName() {
        return name;
    }

    public String getId() {
        return id;
    }
}
```",0
EXTRACT SUPERCLASS,"class Department {
  get totalAnnualCost() {...}
  get name() {...}
  get headCount() {...}
}

class Employee {
  get annualCost() {...}
  get name() {...}
  get id() {...}
}","class Party {
  get name() {...}
  get annualCost() {...}
}

class Department extends Party {
  get annualCost() {...}
  get headCount() {...}
}

class Employee extends Party {
  get annualCost() {...}
  get id() {...}
}",Rules,"```java
class Entity {
    public String getName() {
        // implementation
    }
}

class Department extends Entity {
    public double getTotalAnnualCost() {
        // implementation
    }
    
    public int getHeadCount() {
        // implementation
    }
}

class Employee extends Entity {
    public double getAnnualCost() {
        // implementation
    }
    
    public String getId() {
        // implementation
    }
}
```",1
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",ZeroShot,"```java
List<String> names = input.stream()
                          .filter(i -> ""programmer"".equals(i.job))
                          .map(i -> i.name)
                          .collect(Collectors.toList());
```",1
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",Instruc,"```javascript
const names = input.filter(i => i.job === ""programmer"").map(i => i.name);
```",1
REPLACE LOOP WITH PIPELINE,"const names = [];
for (const i of input) {
    if (i.job === “programmer”)
        names.push(i.name);
}","const names = input
    .filter(i => i.job === “programmer”)
    .map(i => i.name)
;",Context,"```java
List<String> names = new ArrayList<>();
for (InputType entry : input) {
    if (""programmer"".equals(entry.getJob())) {
        names.add(entry.getName());
    }
}
```",0
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",ZeroShot,"```java
class List {
    // List methods and properties
}

class Stack {
    private List list = new List();
    
    // Delegate methods to the List instance
}
```",1
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Instruc,"```java
class List {
    // Original methods and fields of List
    public void push(Object item) {
        // Implementation
    }

    public Object pop() {
        // Implementation
        return null; // placeholder
    }
}

class Stack {
    private List delegate;

    public Stack() {
        this.delegate = new List();
    }

    public void push(Object item) {
        delegate.push(item);
    }

    public Object pop() {
        return delegate.pop();
    }
}
```",1
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Context,"```java
class List {
    // Add relevant fields and methods for List
}

class Stack extends List {
    // Add relevant fields and methods for Stack
}
```",0
REPLACE SUPERCLASS WITH DELEGATE,"class List {...}
class Stack extends List {...}","class Stack {
  constructor() {
    this._storage = new List();
  }
}
class List {...}",Rules,"```java
class List {
    // List class implementation
}

class Stack {
    private List delegate;

    public Stack(List delegate) {
        this.delegate = delegate;
    }

    // Stack class implementation that uses delegate
}
```",1
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",ZeroShot,"```java
class ChargeCalculator {

    public double calculateCharge(Reading aReading) {
        return base(aReading) + taxableCharge(aReading);
    }

    private double base(Reading aReading) {
        // Implementation of base charge calculation
    }

    private double taxableCharge(Reading aReading) {
        // Implementation of taxable charge calculation
    }
}
```",0
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",Instruc,"```java
class Reading {
    private double value;

    public Reading(double value) {
        this.value = value;
    }

    public double getValue() {
        return value;
    }

    public double base() {
        return this.value; // Assuming base calculation is simply returning the value
    }

    public double taxableCharge() {
        return calculateTaxableCharge(); // Accessing the new field
    }

    private double calculateTaxableCharge() {
        // Logic to calculate taxable charge based on the value
        return this.base() * 0.1; // Example: Taxable charge is 10% of the base
    }
}
```",1
COMBINE FUNCTIONS INTO TRANSFORM,"function base(aReading) {...}
function taxableCharge(aReading) {...}","function enrichReading(argReading) {
  const aReading = _.cloneDeep(argReading);
  aReading.baseCharge = base(aReading);
  aReading.taxableCharge = taxableCharge(aReading);
  return aReading;
}
",Context,"```java
public class Reading {
    private final double value;

    public Reading(double value) {
        this.value = value;
    }

    public double getValue() {
        return value;
    }
}

public class TaxCalculator {
    private static final double TAX_THRESHOLD = 10.0;

    public double calculateBase(Reading reading) {
        return reading.getValue();
    }

    public double calculateTaxableCharge(Reading reading) {
        return Math.max(0, calculateBase(reading) - TAX_THRESHOLD);
    }
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",ZeroShot,"```java
public class SalaryAdjuster {
    public void applyRaise(Person aPerson, double percentage) {
        aPerson.setSalary(aPerson.getSalary().multiply(BigDecimal.valueOf(1 + percentage)));
    }

    public void tenPercentRaise(Person aPerson) {
        applyRaise(aPerson, 0.10);
    }

    public void fivePercentRaise(Person aPerson) {
        applyRaise(aPerson, 0.05);
    }
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Instruc,"```java
function raiseSalary(aPerson, percentage) {
  aPerson.salary = aPerson.salary.multiply(1 + percentage / 100);
}

function tenPercentRaise(aPerson) {
  raiseSalary(aPerson, 10);
}

function fivePercentRaise(aPerson) {
  raiseSalary(aPerson, 5);
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Context,"```java
public class SalaryAdjuster {
    private static final double TEN_PERCENT = 1.10;
    private static final double FIVE_PERCENT = 1.05;

    public static void applyRaise(Person person, double percentage) {
        person.setSalary(person.getSalary().multiply(percentage));
    }

    public static void tenPercentRaise(Person person) {
        applyRaise(person, TEN_PERCENT);
    }

    public static void fivePercentRaise(Person person) {
        applyRaise(person, FIVE_PERCENT);
    }
}
```",1
PARAMETERIZE FUNCTION,"function tenPercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) {
  aPerson.salary = aPerson.salary.multiply(1.05);
}","function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}",Rules,"```java
public void raiseSalary(Person aPerson, double percentage) {
    aPerson.salary = aPerson.salary.multiply(1 + percentage / 100);
}

public void tenPercentRaise(Person aPerson) {
    raiseSalary(aPerson, 10);
}

public void fivePercentRaise(Person aPerson) {
    raiseSalary(aPerson, 5);
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",ZeroShot,"```java
public void setHeight(int height) {
    this._height = height;
}

public void setWidth(int width) {
    this._width = width;
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Instruc,"```java
public class Dimension {
    private int height;
    private int width;

    public void setHeight(int value) {
        this.height = value;
    }

    public void setWidth(int value) {
        this.width = value;
    }
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Context,"```java
public void setDimension(String name, double value) {
    switch (name) {
        case ""height"":
            this._height = value;
            break;
        case ""width"":
            this._width = value;
            break;
        default:
            throw new IllegalArgumentException(""Invalid dimension name: "" + name);
    }
}
```",1
REMOVE FLAG ARGUMENT,"function setDimension(name, value) {
  if (name === “height”) {
    this._height = value;
    return;
  }
  if (name === “width”) {
    this._width = value;
    return;
  }
}","function setHeight(value) {this._height = value;}
function setWidth (value) {this._width = value;}",Rules,"```java
public void setHeight(int height) {
    this._height = height;
}

public void setWidth(int width) {
    this._width = width;
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",ZeroShot,"```java
public int availableVacation(Employee anEmployee) {
    int grade = anEmployee.getGrade();
    // calculate vacation...
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Instruc,"```java
public int availableVacation(Employee anEmployee) {
    int grade = anEmployee.getGrade();
    // calculate vacation...
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Context,"```java
public class VacationCalculator {
    
    public static int availableVacation(Employee anEmployee) {
        return calculateVacation(anEmployee.getGrade());
    }

    private static int calculateVacation(Grade grade) {
        // Implement vacation calculation logic based on grade
        return switch (grade) {
            case JUNIOR -> 10;
            case MID -> 15;
            case SENIOR -> 20;
        };
    }
}
```",1
REPLACE PARAMETER WITH QUERY,"availableVacation(anEmployee, anEmployee.grade);

function availableVacation(anEmployee, grade) {
  // calculate vacation...","availableVacation(anEmployee)

function availableVacation(anEmployee) {
  const grade = anEmployee.grade;
  // calculate vacation...",Rules,"```java
availableVacation(anEmployee);

function availableVacation(anEmployee) {
  // calculate vacation using anEmployee.grade
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",ZeroShot,"```java
class ChargeCalculator {
    private Customer customer;
    private double usage;

    public ChargeCalculator(Customer customer, double usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double execute() {
        return calculateCharge();
    }

    private double calculateCharge() {
        return customer.getRate() * usage;
    }
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",Instruc,"```java
class ChargeCalculator {
    private Customer customer;
    private double usage;

    public ChargeCalculator(Customer customer, double usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double calculateCharge() {
        return calculateRate(customer, usage);
    }

    private double calculateRate(Customer customer, double usage) {
        return customer.getRate() * usage;
    }
}
```",1
REPLACE COMMAND WITH FUNCTION,"class ChargeCalculator {
  constructor (customer, usage){
    this._customer = customer;
    this._usage = usage;
  }
  execute() {
    return this._customer.rate * this._usage;
  }
}","function charge(customer, usage) {
  return customer.rate * usage;
}",Context,"```java
public class ChargeCalculator {
    private final Customer customer;
    private final double usage;

    public ChargeCalculator(Customer customer, double usage) {
        this.customer = customer;
        this.usage = usage;
    }

    public double calculateCharge() {
        return customer.getRate() * usage;
    }
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},ZeroShot,"```java
public double circum(double radius) {
    // Implementation code here
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Instruc,"```java
public static double circum(double radius) {
    return 2 * Math.PI * radius;
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Context,"```java
public class Circle {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double calculateCircumference() {
        return 2 * Math.PI * radius;
    }
}
```",1
CHANGE FUNCTION DECLARATION,function circum(radius) {...},function circumference(radius) {...},Rules,"```java
function circum(double radius) {
    // function implementation
}
```",1
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",ZeroShot,"```java
class Organization {
    private String name; // renamed from 'name' to 'name'

    public String getName() {
        return name;
    }
}
```",0
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",Instruc,"```java
class Organization {
    private String organizationName;

    public String getOrganizationName() {
        return organizationName;
    }
}
```",1
RENAME FIELD,"class Organization {
  get name() {...}
}","class Organization {
  get title() {...}
}",Context,"```java
class Organization {
    private String name;

    public Organization(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,ZeroShot,"```java
private boolean appliesToMass(Set<String> states) {
    for (String s : states) {
        if (s.equals(""MA"")) {
            return true;
        }
    }
    return false;
}
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,Instruc,"```java
boolean appliesToMass = false;
for (String s : states) {
    if (s.equals(""MA"")) {
        appliesToMass = true;
        break;
    }
}
```",1
REPLACE INLINE CODE WITH FUNCTION CALL,"let appliesToMass = false;
for(const s of states) {
    if (s === “MA”) appliesToMass = true;
}",appliesToMass = states.includes(“MA”);,Context,"```java
boolean appliesToMass = Arrays.asList(states).contains(""MA"");
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",ZeroShot,"```java
class Account {
    private double balance;
    private double overdraftLimit;

    public Account(double balance, double overdraftLimit) {
        this.balance = balance;
        this.overdraftLimit = overdraftLimit;
    }

    public double getOverdraftCharge() {
        if (balance < 0) {
            return -balance * 0.1; // Assume some charge calculation
        }
        return 0;
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Instruc,"```java
class Account {
    public double overdraftCharge() {
        // ... implementation details
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Context,"```java
class Account {
    public double getOverdraftCharge() {
        // Implementation of overdraft charge calculation
    }
}
```",1
MOVE FUNCTION,"class Account {
    get overdraftCharge() {...}","class AccountType {
    get overdraftCharge() {...}",Rules,"```java
class Account {
    // Method removed from Account class
}

class Customer {
    get overdraftCharge() {...}
}
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",ZeroShot,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);

int area = height * width;
System.out.println(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Instruc,"```java
final int initialTemp = 2 * (height + width);
System.out.println(initialTemp);
final int finalTemp = height * width;
System.out.println(finalTemp);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Context,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);

int area = height * width;
System.out.println(area);
```",1
SPLIT VARIABLE,"let temp = 2 * (height + width);
console.log(temp);
temp = height * width;
console.log(temp);","const perimeter = 2 * (height + width);
console.log(perimeter);
const area = height * width;
console.log(area);",Rules,"```java
int perimeter = 2 * (height + width);
System.out.println(perimeter);

int area = height * width;
System.out.println(area);
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",ZeroShot,"```java
public double targetTemperature(Plan aPlan) {
    double currentTemperature = thermostat.getCurrentTemperature();
    // rest of function...
}
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",Instruc,"```java
public double targetTemperature(Plan aPlan) {
    return getTargetTemperature(aPlan, thermostat.currentTemperature);
}

private double getTargetTemperature(Plan aPlan, double currentTemperature) {
    // rest of function...
}
```",1
REPLACE QUERY WITH PARAMETER,"targetTemperature(aPlan)

function targetTemperature(aPlan) {
    currentTemperature = thermostat.currentTemperature;
    // rest of function...
}","targetTemperature(aPlan, thermostat.currentTemperature)

function targetTemperature(aPlan, currentTemperature) {
  // rest of function...
}",Context,"```java
public class Thermostat {
    private double currentTemperature;

    public double getCurrentTemperature() {
        return currentTemperature;
    }

    // other methods...
}

public double targetTemperature(Thermostat thermostat) {
    double currentTemperature = thermostat.getCurrentTemperature();
    // rest of function...
}
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",ZeroShot,"```java
if (aCustomer.equals(""unknown"")) {
    customerName = ""occupant"";
} else {
    customerName = aCustomer;
}
```",0
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Instruc,"```java
class Customer {
    private String name;

    public Customer(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public boolean isSpecialCase() {
        return ""unknown"".equals(name);
    }
}

class CustomerContainer {
    private Customer customer;

    public CustomerContainer(Customer customer) {
        this.customer = customer;
    }

    public String getCustomerName() {
        if (customer.isSpecialCase()) {
            return ""occupant"";
        }
        return customer.getName();
    }
}
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Context,"```java
customerName = ""unknown"".equals(aCustomer) ? ""occupant"" : customerName;
```",1
INTRODUCE SPECIAL CASE,if (aCustomer === “unknown”) customerName = “occupant”;,"class UnknownCustomer {
    get name() {return “occupant”;}",Rules,"```java
customerName = new Occupant().getName();
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,ZeroShot,"```java
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,Instruc,"```java
// This code has been removed as it is dead code
```",1
REMOVE DEAD CODE,"if(false) {
  doSomethingThatUsedToMatter();
}",,Context,"```java
// Code has been removed as the condition will never be true.
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,ZeroShot,"```java
double area = height * width;
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,Instruc,"```java
let area = height * width;
```",1
RENAME VARIABLE,let a = height * width;,let area = height * width;,Context,"```java
int area = height * width;
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",ZeroShot,"```java
abstract class Employee {
    String name;

    Employee(String name) {
        this.name = name;
    }
}

class FullTimeEmployee extends Employee {
    FullTimeEmployee(String name) {
        super(name);
    }
}

class PartTimeEmployee extends Employee {
    PartTimeEmployee(String name) {
        super(name);
    }
}

class ContractEmployee extends Employee {
    ContractEmployee(String name) {
        super(name);
    }
}

class EmployeeFactory {
    public static Employee createEmployee(String name, String type) {
        switch (type.toLowerCase()) {
            case ""fulltime"":
                return new FullTimeEmployee(name);
            case ""parttime"":
                return new PartTimeEmployee(name);
            case ""contract"":
                return new ContractEmployee(name);
            default:
                throw new IllegalArgumentException(""Invalid employee type: "" + type);
        }
    }
}
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Instruc,"```java
abstract class Employee {
    protected String name;

    public Employee(String name) {
        this.name = name;
    }

    public abstract String getType();
}

class Manager extends Employee {
    public Manager(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Manager"";
    }
}

class Developer extends Employee {
    public Developer(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Developer"";
    }
}

class Tester extends Employee {
    public Tester(String name) {
        super(name);
    }

    @Override
    public String getType() {
        return ""Tester"";
    }
}

class EmployeeFactory {
    public static Employee createEmployee(String name, String type) {
        switch (type) {
            case ""Manager"":
                return new Manager(name);
            case ""Developer"":
                return new Developer(name);
            case ""Tester"":
                return new Tester(name);
            default:
                throw new IllegalArgumentException(""Unknown type: "" + type);
        }
    }
}
```",1
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Context,"```java
public Employee createEmployee(String name, String type) {
    return new Employee(name, type);
}
```",0
REPLACE TYPE CODE WITH SUBCLASSES,"function createEmployee(name, type) {
  return new Employee(name, type);
}","function createEmployee(name, type) {
  switch (type) {
    case “engineer”: return new Engineer(name);
    case “salesman”: return new Salesman(name);
    case “manager”:  return new Manager (name);
  }",Rules,"```java
class Employee {
    String name;
    EmployeeType type;

    public Employee(String name, EmployeeType type) {
        this.name = name;
        this.type = type;
    }
}

abstract class EmployeeType {}

class FullTimeEmployee extends EmployeeType {}

class PartTimeEmployee extends EmployeeType {}

class ContractEmployee extends EmployeeType {}

public class EmployeeFactory {
    public static Employee createEmployee(String name, EmployeeType type) {
        return new Employee(name, type);
    }
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",ZeroShot,"```java
function getRating(driver) {
    return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Instruc,"```java
int getRating(Driver driver) {
    return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Context,"```java
public class Driver {
    private int numberOfLateDeliveries;

    public Driver(int numberOfLateDeliveries) {
        this.numberOfLateDeliveries = numberOfLateDeliveries;
    }

    public int getRating() {
        return hasMoreThanFiveLateDeliveries() ? 2 : 1;
    }

    private boolean hasMoreThanFiveLateDeliveries() {
        return numberOfLateDeliveries > 5;
    }
}
```",1
INLINE FUNCTION,"function getRating(driver) {
  return moreThanFiveLateDeliveries(driver) ? 2 : 1;
}

function moreThanFiveLateDeliveries(driver) {
  return driver.numberOfLateDeliveries > 5;
}","function getRating(driver) {
  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;
}",Rules,"```java
function getRating(driver) {
  return driver.numberOfLateDeliveries > 5 ? 2 : 1;
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",ZeroShot,"```java
class Reading {
    private final int quantity;
    private final double price;

    public Reading(int quantity, double price) {
        this.quantity = quantity;
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getPrice() {
        return price;
    }

    public double baseCharge() {
        return quantity * price;
    }

    public double taxableCharge() {
        return baseCharge() * 0.1; // Assuming a simple tax calculation for demonstration
    }
    
    public double calculateBaseCharge() {
        return baseCharge() + taxableCharge();
    }
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",Instruc,"```java
class Reading {
    private final double value;

    public Reading(double value) {
        this.value = value;
    }

    public double getValue() {
        return value;
    }
    
    public double baseCharge() {
        // Logic from base(aReading)
        return value * 0.5; // Example calculation
    }

    public double taxableCharge() {
        // Logic from taxableCharge(aReading)
        return baseCharge() * 0.1; // Example calculation
    }

    public double calculateBaseCharge() {
        // Logic from calculateBaseCharge(aReading)
        return baseCharge() + taxableCharge(); // Example calculation
    }
}
```",1
COMBINE FUNCTIONS INTO CLASS,"function base(aReading) {...}
function taxableCharge(aReading) {...}
function calculateBaseCharge(aReading) {...}","class Reading {
  base() {...}
  taxableCharge() {...}
  calculateBaseCharge() {...}
}",Context,"```java
public class ElectricityBilling {

    public double calculateBaseCharge(Reading aReading) {
        return aReading.getQuantity() * aReading.getRate();
    }

    public double taxableCharge(Reading aReading) {
        double baseCharge = calculateBaseCharge(aReading);
        return baseCharge > 100 ? baseCharge - 100 : 0;
    }

    public double base(Reading aReading) {
        return calculateBaseCharge(aReading) + taxableCharge(aReading);
    }
}

class Reading {
    private double quantity;
    private double rate;

    public Reading(double quantity, double rate) {
        this.quantity = quantity;
        this.rate = rate;
    }

    public double getQuantity() {
        return quantity;
    }

    public double getRate() {
        return rate;
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",ZeroShot,"```java
class Customer {
    private Plan plan;
    private double discountRate;

    public Plan getPlan() {
        return plan;
    }

    public double getDiscountRate() {
        return discountRate;
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Instruc,"```java
class Customer {
    private Plan _plan; // Assuming Plan is another class
    private double _discountRate;

    public Plan getPlan() {
        return _plan;
    }

    public double getDiscountRate() {
        return _discountRate;
    }
}

class Plan {
    // Plan class implementation
}
```",0
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Context,"```java
class Customer {
    private Plan plan;
    private double discountRate;

    public Plan getPlan() {
        return plan;
    }

    public double getDiscountRate() {
        return discountRate;
    }
}
```",1
MOVE FIELD,"class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this._discountRate;}","class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}",Rules,"```java
class Customer {
  private Plan plan;
  private double discountRate;

  public Plan getPlan() {
    return this.plan;
  }

  public double getDiscountRate() {
    return this.discountRate;
  }
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",ZeroShot,"```java
double basePrice = this._quantity * this._itemPrice;
double discountRate = basePrice > 1000 ? 0.95 : 0.98;
return basePrice * discountRate;
```",0
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Instruc,"```java
public double calculateBasePrice() {
    return this._quantity * this._itemPrice;
}

public double getDiscountedPrice() {
    double basePrice = calculateBasePrice();
    if (basePrice > 1000) {
        return basePrice * 0.95;
    } else {
        return basePrice * 0.98;
    }
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Context,"```java
public double calculatePrice() {
    double basePrice = this._quantity * this._itemPrice;
    double discount = (basePrice > 1000) ? 0.95 : 0.98;
    return basePrice * discount;
}
```",1
REPLACE TEMP WITH QUERY,"const basePrice = this._quantity * this._itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;","get basePrice() {this._quantity * this._itemPrice;}

// ...

if (this.basePrice > 1000)
  return this.basePrice * 0.95;
else
  return this.basePrice * 0.98;",Rules,"```java
if (this._quantity * this._itemPrice > 1000)
  return (this._quantity * this._itemPrice) * 0.95;
else
  return (this._quantity * this._itemPrice) * 0.98;
```",0
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,ZeroShot,"```java
Customer customer = Customer.from(customerData);
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Instruc,"```java
public class CustomerRepository {
    // Assuming this is a placeholder for actual data storage
    private Map<String, Customer> customerMap;

    public CustomerRepository() {
        this.customerMap = new HashMap<>();
    }

    public Customer getCustomer(String customerId) {
        return customerMap.get(customerId);
    }

    public void addCustomer(Customer customer) {
        customerMap.put(customer.getId(), customer);
    }
}

public class Customer {
    private String id;
    // Other customer-related fields

    public Customer(String id) {
        this.id = id;
        // Initialize other fields
    }

    public String getId() {
        return id;
    }
}

public class HostObject {
    private Customer customer;

    public HostObject(String customerId, CustomerRepository customerRepository) {
        this.customer = customerRepository.getCustomer(customerId);
    }

    // Other methods
}

// Usage
CustomerRepository customerRepository = new CustomerRepository();
// Add customer to repository first before retrieval
customerRepository.addCustomer(new Customer(""1""));
HostObject hostObject = new HostObject(""1"", customerRepository);
```",1
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Context,"```java
Customer customer = new Customer(customerData);
```",0
CHANGE VALUE TO REFERENCE,let customer = new Customer(customerData);,let customer = customerRepository.get(customerData.id);,Rules,"```java
let customer = CustomerFactory.createCustomer(customerData);
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",ZeroShot,"```java
public void generatePhotoInfo(List<String> result, Person person) {
    result.add(String.format(""<p>title: %s</p>"", person.getPhoto().getTitle()));
    result.addAll(photoData(person.getPhoto()));
}

private List<String> photoData(Photo aPhoto) {
    return Arrays.asList(
        String.format(""<p>location: %s</p>"", aPhoto.getLocation()),
        String.format(""<p>date: %s</p>"", aPhoto.getDate().toString())
    );
}
```",1
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",Instruc,"```java
function createPhotoDetails(person) {
  const result = [];
  result.push(`<p>title: ${person.photo.title}</p>`);
  result.concat(photoData(person.photo));
  return result;
}

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}
```",0
MOVE STATEMENTS INTO FUNCTION,"result.push(`<p>title: ${person.photo.title}</p>`);
result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}","result.concat(photoData(person.photo));

function photoData(aPhoto) {
  return [
    `<p>title: ${aPhoto.title}</p>`,
    `<p>location: ${aPhoto.location}</p>`,
    `<p>date: ${aPhoto.date.toDateString()}</p>`,
  ];
}",Context,"```java
result.push(formatPhotoTitle(person.photo));
result.pushAll(getPhotoDetails(person.photo));

private String formatPhotoTitle(Photo photo) {
    return String.format(""<p>title: %s</p>"", photo.title);
}

private List<String> getPhotoDetails(Photo photo) {
    List<String> details = new ArrayList<>();
    details.add(String.format(""<p>location: %s</p>"", photo.location));
    details.add(String.format(""<p>date: %s</p>"", photo.date.toDateString()));
    return details;
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",ZeroShot,"```java
public class InvoiceProcessor {
    private Customer customer;

    public InvoiceProcessor(Customer customer) {
        this.customer = customer;
    }

    public double getTotalOutstanding() {
        return calculateTotalOutstanding();
    }

    public void sendBill() {
        // Implementation of sendBill goes here
    }

    private double calculateTotalOutstanding() {
        return customer.getInvoices().stream()
            .mapToDouble(Invoice::getAmount)
            .sum();
    }
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Instruc,"```java
public class Customer {
    private List<Invoice> invoices;

    public int getTotalOutstanding() {
        return invoices.stream().mapToInt(Invoice::getAmount).sum();
    }

    public void sendBill() {
        // logic to send bill
    }

    public void getTotalOutstandingAndSendBill() {
        int result = getTotalOutstanding();
        sendBill();
    }
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Context,"```java
public class InvoiceManager {

    private Customer customer;

    public InvoiceManager(Customer customer) {
        this.customer = customer;
    }

    public double getTotalOutstandingAndSendBill() {
        double totalOutstanding = calculateTotalOutstanding();
        sendBill();
        return totalOutstanding;
    }

    private double calculateTotalOutstanding() {
        return customer.getInvoices().stream()
                .mapToDouble(Invoice::getAmount)
                .sum();
    }

    private void sendBill() {
        // Implementation for sending the bill
    }
}
```",1
SEPARATE QUERY FROM MODIFIER,"function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}","function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);  
}
function sendBill() {
  emailGateway.send(formatBill(customer));
}",Rules,"```java
public class BillingService {
    
    public int getTotalOutstanding() {
        return customer.getInvoices().stream()
                .mapToInt(Invoice::getAmount)
                .sum();
    }
    
    public void sendBill() {
        // Implementation for sending the bill
    }
    
    public void getTotalOutstandingAndSendBill() {
        int totalOutstanding = getTotalOutstanding();
        sendBill();
    }
}
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",ZeroShot,"```java
Person aPerson = ...; // Assume aPerson is initialized
Department department = aPerson.getDepartment();
Manager manager = department.getManager();
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Instruc,"```java
public class Department {
    private Manager manager;

    public Manager getManager() {
        return manager;
    }

    public String getManagerName() {
        return manager.getName();
    }

    // Other methods and attributes
}

public class Manager {
    private String name;

    public String getName() {
        return name;
    }

    // Other methods and attributes
}

public class Person {
    private Department department;

    public Department getDepartment() {
        return department;
    }

    public String getManagerName() {
        return department.getManagerName();
    }

    // Other methods and attributes
}
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Context,"```java
Manager manager = aPerson.getDepartment().getManager();
```",1
HIDE DELEGATE,manager = aPerson.department.manager;,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",Rules,"```java
manager = aPerson.department.manager; 
```",0
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",ZeroShot,"```java
abstract class Employee {
    public abstract String getName();
}

class Salesman extends Employee {
    @Override
    public String getName() {
        // Implementation for Salesman
    }
}

class Engineer extends Employee {
    @Override
    public String getName() {
        // Implementation for Engineer
    }
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Instruc,"```java
class Employee {
    public String getName() {
        // common implementation for getting name
    }
}

class Salesman extends Employee {
    @Override
    public String getName() {
        // specific implementation for Salesman, if needed
        return super.getName();
    }
}

class Engineer extends Employee {
    @Override
    public String getName() {
        // specific implementation for Engineer, if needed
        return super.getName();
    }
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Context,"```java
abstract class Employee {
    public abstract String getName();
}

class Salesman extends Employee {
    @Override
    public String getName() {
        // Implementation for Salesman
        return ""Salesman Name"";
    }
}

class Engineer extends Employee {
    @Override
    public String getName() {
        // Implementation for Engineer
        return ""Engineer Name"";
    }
}
```",1
PULL UP METHOD,"class Employee {...}

class Salesman extends Employee {
  get name() {...}
}

class Engineer extends Employee {
  get name() {...}
}","class Employee {
  get name() {...}
}

class Salesman extends Employee {...}
class Engineer extends Employee {...}",Rules,"```java
class Employee {
    public String getName() {
        // Implementation for getting the name
        return ""Employee Name"";
    }
}

class Salesman extends Employee {
    // Additional Salesman specific implementation
}

class Engineer extends Employee {
    // Additional Engineer specific implementation
}
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",ZeroShot,"```java
PricingPlan pricingPlan = retrievePricingPlan();
Order order = retrieveOrder();
double charge = 0;
double chargePerUnit = pricingPlan.getUnit();
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Instruc,"```java
PricingPlan pricingPlan = retrievePricingPlan();
Order order = retrieveOrder();
double chargePerUnit = pricingPlan.getUnit();
double charge;
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Context,"```java
PricingPlan pricingPlan = retrievePricingPlan();
Order order = retrieveOrder();
double charge;
double chargePerUnit = pricingPlan.getUnit();
```",1
SLIDE STATEMENTS,"const pricingPlan = retrievePricingPlan();
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;","const pricingPlan = retrievePricingPlan();
const chargePerUnit = pricingPlan.unit;
const order = retreiveOrder();
let charge;",Rules,"```javascript
const pricingPlan = retrievePricingPlan();
const order = retrieveOrder();
const chargePerUnit = pricingPlan.unit;
let charge = chargePerUnit * order.units;
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",ZeroShot,"```java
class Person {
    private PhoneNumber officePhoneNumber;

    public String getOfficeAreaCode() {
        return officePhoneNumber.getAreaCode();
    }

    public String getOfficeNumber() {
        return officePhoneNumber.getNumber();
    }
}

class PhoneNumber {
    private String areaCode;
    private String number;

    public PhoneNumber(String areaCode, String number) {
        this.areaCode = areaCode;
        this.number = number;
    }

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Instruc,"```java
class Person {
    private OfficeDetails officeDetails;

    public Person(String officeAreaCode, String officeNumber) {
        this.officeDetails = new OfficeDetails(officeAreaCode, officeNumber);
    }

    public String getOfficeAreaCode() {
        return officeDetails.getOfficeAreaCode();
    }

    public String getOfficeNumber() {
        return officeDetails.getOfficeNumber();
    }

    // Other Person related methods
}

class OfficeDetails {
    private String officeAreaCode;
    private String officeNumber;

    public OfficeDetails(String officeAreaCode, String officeNumber) {
        this.officeAreaCode = officeAreaCode;
        this.officeNumber = officeNumber;
    }

    public String getOfficeAreaCode() {
        return officeAreaCode;
    }

    public String getOfficeNumber() {
        return officeNumber;
    }
}
```",1
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Context,"```java
class Person {
    private String officeAreaCode;
    private String officeNumber;

    public String getOfficeAreaCode() {
        return officeAreaCode;
    }

    public String getOfficeNumber() {
        return officeNumber;
    }

    public void setOfficeAreaCode(String officeAreaCode) {
        this.officeAreaCode = officeAreaCode;
    }

    public void setOfficeNumber(String officeNumber) {
        this.officeNumber = officeNumber;
    }
}
```",0
EXTRACT CLASS,"class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}","class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}",Rules,"```java
class Office {
    private String officeAreaCode;
    private String officeNumber;

    public Office(String officeAreaCode, String officeNumber) {
        this.officeAreaCode = officeAreaCode;
        this.officeNumber = officeNumber;
    }

    public String getOfficeAreaCode() {
        return officeAreaCode;
    }

    public String getOfficeNumber() {
        return officeNumber;
    }
}

class Person {
    private Office office;

    public Person(Office office) {
        this.office = office;
    }

    public String getOfficeAreaCode() {
        return office.getOfficeAreaCode();
    }

    public String getOfficeNumber() {
        return office.getOfficeNumber();
    }
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",ZeroShot,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {
    return 0;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Instruc,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {
    return 0;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Context,"```java
if (isIneligible(anEmployee)) return 0;

private boolean isIneligible(Employee anEmployee) {
    return anEmployee.seniority < 2 || 
           anEmployee.monthsDisabled > 12 || 
           anEmployee.isPartTime;
}
```",1
CONSOLIDATE CONDITIONAL EXPRESSION,"if (anEmployee.seniority < 2) return 0;
if (anEmployee.monthsDisabled > 12) return 0;
if (anEmployee.isPartTime) return 0;","if (isNotEligibleForDisability()) return 0;

function isNotEligibleForDisability() {
return ((anEmployee.seniority < 2)
        || (anEmployee.monthsDisabled > 12)
        || (anEmployee.isPartTime));
}",Rules,"```java
if (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {
    return 0;
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",ZeroShot,"```java
class Party {
    // Class body for Party
}

class Employee extends Party {
    private String name;
    private int id;
    private double monthlyCost;

    public Employee(String name, int id, double monthlyCost) {
        super();
        this.id = id;
        this.name = name;
        this.monthlyCost = monthlyCost;
    }
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Instruc,"```java
class Party {
    protected String _name;
    protected double _monthlyCost;

    public Party(String name, double monthlyCost) {
        this._name = name;
        this._monthlyCost = monthlyCost;
    }
}

class Employee extends Party {
    private int _id;

    public Employee(String name, int id, double monthlyCost) {
        super(name, monthlyCost);
        this._id = id;
    }
}
```",1
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Context,"```java
class Party {
    // Party class implementation
}

class Employee extends Party {
    private String name;
    private String id;
    private double monthlyCost;

    public Employee(String name, String id, double monthlyCost) {
        this.name = name;
        this.id = id;
        this.monthlyCost = monthlyCost;
    }

    // Getters and setters (if needed)
    public String getName() {
        return name;
    }

    public String getId() {
        return id;
    }

    public double getMonthlyCost() {
        return monthlyCost;
    }
}
```",0
PULL UP CONSTRUCTOR BODY,"class Party {...}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super();
    this._id = id;
    this._name = name;
    this._monthlyCost = monthlyCost;
  }
}","class Party {
  constructor(name){
    this._name = name;
  }
}

class Employee extends Party {
  constructor(name, id, monthlyCost) {
    super(name);
    this._id = id;
    this._monthlyCost = monthlyCost;
  }
}",Rules,"```java
class Party {
    private String name;

    public Party(String name) {
        this.name = name;
    }
}

class Employee extends Party {
    private int id;
    private double monthlyCost;

    public Employee(String name, int id, double monthlyCost) {
        super(name);
        this.id = id;
        this.monthlyCost = monthlyCost;
    }
}
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,ZeroShot,"```java
public class EmployeeFactory {
    public static Employee createLeadEngineer(Document document) {
        return new Employee(document.leadEngineer, 'E');
    }
}

// Usage
Employee leadEngineer = EmployeeFactory.createLeadEngineer(document);
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Instruc,"```java
public class Employee {
    private String name;
    private String role;

    // Limited visibility; constructor is now private
    private Employee(String name, String role) {
        this.name = name;
        this.role = role;
    }

    // Factory function
    public static Employee createLeadEngineer(String name) {
        return new Employee(name, ""E"");
    }
}

// Usage
Employee leadEngineer = Employee.createLeadEngineer(document.leadEngineer);
```",1
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Context,"```java
Employee leadEngineer = new Employee(document.getLeadEngineer(), 'E');
```",0
REPLACE CONSTRUCTOR WITH FACTORY FUNCTION,"leadEngineer = new Employee(document.leadEngineer, 'E');",leadEngineer = createEngineer(document.leadEngineer);,Rules,"```java
public class EmployeeFactory {
    public static Employee createLeadEngineer(Document document) {
        return new Employee(document.leadEngineer, 'E');
    }
}

// Usage
Employee leadEngineer = EmployeeFactory.createLeadEngineer(document);
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",ZeroShot,"```java
class Person {
    String genderCode() {
        return ""X"";
    }
}

class Male extends Person {
    @Override
    String genderCode() {
        return ""M"";
    }
}

class Female extends Person {
    @Override
    String genderCode() {
        return ""F"";
    }
}
```",0
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Instruc,"```java
class Person {
    private String genderType;

    public Person(String genderType) {
        this.genderType = genderType;
    }

    public String getGenderCode() {
        return genderType;
    }

    public static Person createPerson(String gender) {
        return new Person(gender);
    }
}

// Usage
// Person male = Person.createPerson(""M"");
// Person female = Person.createPerson(""F"");
```",1
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Context,"```java
abstract class Person {
    public abstract String getGenderCode();
}

class Male extends Person {
    @Override
    public String getGenderCode() {
        return ""M"";
    }
}

class Female extends Person {
    @Override
    public String getGenderCode() {
        return ""F"";
    }
}

class UnknownGender extends Person {
    @Override
    public String getGenderCode() {
        return ""X"";
    }
}
```",0
REMOVE SUBCLASS,"class Person {
  get genderCode() {return “X”;}
}
class Male extends Person {
  get genderCode() {return “M”;}
}
class Female extends Person {
  get genderCode() {return “F”;}
}","class Person {
  get genderCode() {return this._genderCode;}
}",Rules,"```java
class Person {
    private String genderCode;

    public Person(String genderCode) {
        this.genderCode = genderCode;
    }

    public String getGenderCode() {
        return genderCode;
    }
}

class Male extends Person {
    public Male() {
        super(""M"");
    }
}

class Female extends Person {
    public Female() {
        super(""F"");
    }
}
```",0
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",ZeroShot,"```java
class DateRange {
    private LocalDate startDate;
    private LocalDate endDate;

    public DateRange(LocalDate startDate, LocalDate endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }
}

class InvoiceService {
    public Amount amountInvoiced(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }

    public Amount amountReceived(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }

    public Amount amountOverdue(DateRange dateRange) {
        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()
    }
}
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Instruc,"```java
public class InvoiceDateRange {
    private final Date startDate;
    private final Date endDate;

    public InvoiceDateRange(Date startDate, Date endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public Date getEndDate() {
        return endDate;
    }
}

public class Invoice {

    public double amountInvoiced(InvoiceDateRange dateRange) {
        Date startDate = dateRange.getStartDate();
        Date endDate = dateRange.getEndDate();
        // Implementation logic
        return 0.0; // Replace with actual computation
    }

    public double amountReceived(InvoiceDateRange dateRange) {
        Date startDate = dateRange.getStartDate();
        Date endDate = dateRange.getEndDate();
        // Implementation logic
        return 0.0; // Replace with actual computation
    }

    public double amountOverdue(InvoiceDateRange dateRange) {
        Date startDate = dateRange.getStartDate();
        Date endDate = dateRange.getEndDate();
        // Implementation logic
        return 0.0; // Replace with actual computation
    }
}
```",1
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Context,"```java
public class InvoiceManager {

    public double calculateAmountInvoiced(Date startDate, Date endDate) {
        // Logic for calculating amount invoiced
    }

    public double calculateAmountReceived(Date startDate, Date endDate) {
        // Logic for calculating amount received
    }

    public double calculateAmountOverdue(Date startDate, Date endDate) {
        // Logic for calculating amount overdue
    }
}
```",0
INTRODUCE PARAMETER OBJECT,"function amountInvoiced(startDate, endDate) {...}
function amountReceived(startDate, endDate) {...}
function amountOverdue(startDate, endDate) {...}","function amountInvoiced(aDateRange) {...}
function amountReceived(aDateRange) {...}
function amountOverdue(aDateRange) {...}",Rules,"```java
class DateRange {
    private Date startDate;
    private Date endDate;

    public DateRange(Date startDate, Date endDate) {
        this.startDate = startDate;
        this.endDate = endDate;
    }

    public Date getStartDate() {
        return startDate;
    }

    public Date getEndDate() {
        return endDate;
    }
}

public class Invoice {

    public double amountInvoiced(DateRange dateRange) {
        // Implementation here
    }

    public double amountReceived(DateRange dateRange) {
        // Implementation here
    }

    public double amountOverdue(DateRange dateRange) {
        // Implementation here
    }
}
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",ZeroShot,"```java
double averageAge = 0;
double totalSalary = 0;

for (Person p : people) {
    totalSalary += p.salary;
}

for (Person p : people) {
    averageAge += p.age;
}

averageAge = averageAge / people.size();
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",Instruc,"```java
double averageAge = 0;
double totalSalary = 0;

for (Person p : people) {
    averageAge += p.age;
}

averageAge = averageAge / people.size();

for (Person p : people) {
    totalSalary += p.salary;
}
```",1
SPLIT LOOP,"let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
    averageAge += p.age;
    totalSalary += p.salary;
}
averageAge = averageAge / people.length;","let totalSalary = 0;
for (const p of people) {
    totalSalary += p.salary;
}

let averageAge = 0;
for (const p of people) {
    averageAge += p.age;
}
averageAge = averageAge / people.length;",Context,"```java
double averageAge = 0;
double totalSalary = 0;

for (Person person : people) {
    averageAge += person.getAge();
    totalSalary += person.getSalary();
}

averageAge /= people.size();
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),ZeroShot,"```java
public class Order {
    private String priority;

    // Constructor, getters, and setters
    public Order(String priority) {
        this.priority = priority;
    }

    public String getPriority() {
        return priority;
    }
}

import java.util.List;
import java.util.stream.Collectors;

public class OrderFilter {
    public List<Order> filterOrders(List<Order> orders) {
        OrderCriteria criteria = new OrderCriteria(""high"", ""rush"");
        return orders.stream()
                .filter(o -> criteria.isPriorityMatch(o.getPriority()))
                .collect(Collectors.toList());
    }
}

class OrderCriteria {
    private String[] acceptablePriorities;

    public OrderCriteria(String... acceptablePriorities) {
        this.acceptablePriorities = acceptablePriorities;
    }

    public boolean isPriorityMatch(String priority) {
        for (String acceptablePriority : acceptablePriorities) {
            if (acceptablePriority.equals(priority)) {
                return true;
            }
        }
        return false;
    }
}
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Instruc,"```java
public class Order {
    private Priority priority;

    public Order(String priority) {
        this.priority = new Priority(priority);
    }

    public Priority getPriority() {
        return priority;
    }

    public void setPriority(String priority) {
        this.priority = new Priority(priority);
    }

    public static void main(String[] args) {
        List<Order> orders = // initialize your order list
        orders.stream()
              .filter(o -> o.getPriority().getValue().equals(""high"") 
                            || o.getPriority().getValue().equals(""rush""))
              .collect(Collectors.toList());
    }
}

class Priority {
    private final String value;

    public Priority(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Context,"```java
orders.stream()
      .filter(o -> ""high"".equals(o.getPriority()) || ""rush"".equals(o.getPriority()))
      .collect(Collectors.toList());
```",1
REPLACE PRIMITIVE WITH OBJECT,"orders.filter(o => “high” === o.priority
                || “rush” === o.priority);  ",orders.filter(o => o.priority.higherThan(new Priority(“normal”))),Rules,"```java
class OrderPriority {
    public static final OrderPriority HIGH = new OrderPriority(""high"");
    public static final OrderPriority RUSH = new OrderPriority(""rush"");

    private String priority;

    private OrderPriority(String priority) {
        this.priority = priority;
    }

    public String getPriority() {
        return priority;
    }
}

// Filtering using the new OrderPriority class
orders.filter(o -> OrderPriority.HIGH.equals(o.getPriority()) 
                || OrderPriority.RUSH.equals(o.getPriority()));
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",ZeroShot,"```java
outStream.write(""<p>title: "" + person.photo.title + ""</p>\n"");
outStream.write(""<p>location: "" + person.photo.location + ""</p>\n"");
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",Instruc,"```java
outStream.write(`<p>title: ${person.photo.title}</p>\n`);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);
```",1
MOVE STATEMENTS TO CALLERS,"emitPhotoData(outStream, person.photo);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
  outStream.write(`<p>location: ${photo.location}</p>\n`);
}","emitPhotoData(outStream, person.photo);
outStream.write(`<p>location: ${person.photo.location}</p>\n`);

function emitPhotoData(outStream, photo) {
  outStream.write(`<p>title: ${photo.title}</p>\n`);
}",Context,"```java
public void emitPhotoData(OutputStream outStream, Photo photo) throws IOException {
    PrintWriter writer = new PrintWriter(outStream);
    writer.printf(""<p>title: %s</p>%n"", photo.getTitle());
    writer.printf(""<p>location: %s</p>%n"", photo.getLocation());
    writer.flush();
}
```",0
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",ZeroShot,"```java
class Person {
    private String officeAreaCode;
    private String officeNumber;
    
    public Person(TelephoneNumber telephoneNumber) {
        this.officeAreaCode = telephoneNumber.getAreaCode();
        this.officeNumber = telephoneNumber.getNumber();
    }
    
    public String getOfficeAreaCode() {
        return officeAreaCode;
    }

    public String getOfficeNumber() {
        return officeNumber;
    }
}

class TelephoneNumber {
    private String areaCode;
    private String number;

    public TelephoneNumber(String areaCode, String number) {
        this.areaCode = areaCode;
        this.number = number;
    }

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",1
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Instruc,"```java
class Person {
    private String _areaCode;
    private String _number;

    public String getOfficeAreaCode() {
        return _areaCode;
    }

    public String getOfficeNumber() {
        return _number;
    }

    public Person(String areaCode, String number) {
        this._areaCode = areaCode;
        this._number = number;
    }
}
```",1
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Context,"```java
class Person {
    private TelephoneNumber telephoneNumber;

    public Person(TelephoneNumber telephoneNumber) {
        this.telephoneNumber = telephoneNumber;
    }

    public String getOfficeAreaCode() {
        return telephoneNumber.getAreaCode();
    }

    public String getOfficeNumber() {
        return telephoneNumber.getNumber();
    }
}

class TelephoneNumber {
    private String areaCode;
    private String number;

    public TelephoneNumber(String areaCode, String number) {
        this.areaCode = areaCode;
        this.number = number;
    }

    public String getAreaCode() {
        return areaCode;
    }

    public String getNumber() {
        return number;
    }
}
```",1
INLINE CLASS,"class Person {
  get officeAreaCode() {return this._telephoneNumber.areaCode;}
  get officeNumber()   {return this._telephoneNumber.number;}
}
class TelephoneNumber {
  get areaCode() {return this._areaCode;}
  get number()   {return this._number;}
}","class Person {
  get officeAreaCode() {return this._officeAreaCode;}
  get officeNumber()   {return this._officeNumber;}",Rules,"```java
class Person {
    private String _telephoneNumberAreaCode;
    private String _telephoneNumberNumber;

    public String getOfficeAreaCode() {
        return this._telephoneNumberAreaCode;
    }

    public String getOfficeNumber() {
        return this._telephoneNumberNumber;
    }
}
```",0
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,ZeroShot,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Instruc,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Context,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}

class Department {
    private Manager manager;

    public Manager getManager() {
        return manager;
    }
}

class Manager {
    // Manager implementation
}
```",1
REMOVE MIDDLE MAN,"manager = aPerson.manager;

class Person {
  get manager() {return this.department.manager;}",manager = aPerson.department.manager;,Rules,"```java
class Person {
    private Department department;

    public Manager getManager() {
        return department.getManager();
    }
}

class Department {
    private Manager manager;

    public Manager getManager() {
        return manager;
    }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",ZeroShot,"```java
public class ScoringSystem {
    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Instruc,"```java
class ScoreCommand {
    private Candidate candidate;
    private MedicalExam medicalExam;
    private ScoringGuide scoringGuide;

    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        this.candidate = candidate;
        this.medicalExam = medicalExam;
        this.scoringGuide = scoringGuide;
    }

    public int execute() {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}

// Forwarding function
public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
    ScoreCommand command = new ScoreCommand(candidate, medicalExam, scoringGuide);
    return command.execute();
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Context,"```java
public class ScoringSystem {
    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}
```",1
REPLACE FUNCTION WITH COMMAND,"function score(candidate, medicalExam, scoringGuide) {
    let result = 0;
    let healthLevel = 0;
// long body code
}","class Scorer {
  constructor(candidate, medicalExam, scoringGuide) {
    this._candidate = candidate;
    this._medicalExam = medicalExam;
    this._scoringGuide = scoringGuide;
  }

  execute() {
    this._result = 0;
    this._healthLevel = 0;
    // long body code
  }
}",Rules,"```java
class CandidateScoring {
    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        return calculateScore(candidate, medicalExam, scoringGuide);
    }

    private int calculateScore(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {
        int result = 0;
        int healthLevel = 0;
        // long body code
        return result;
    }
}
```",1
