{
    "FOWLER_EX_PULL UP FIELD": {
        "RefactMethod": "PULL UP FIELD",
        "BeforeRefact": "class Employee {...} // Java\n\nclass Salesman extends Employee {\n  private String name;\n}\n\nclass Engineer extends Employee {\n  private String name;\n}",
        "AfterRefact": "class Employee {\n  protected String name;\n}\n\nclass Salesman extends Employee {...}\nclass Engineer extends Employee {...}",
        "ZeroShotCode": "```java\nclass Employee {\n    private String name;\n}\n\nclass Salesman extends Employee {\n}\n\nclass Engineer extends Employee {\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n    protected String name;\n}\n\nclass Salesman extends Employee {\n    // name field is now inherited from Employee\n}\n\nclass Engineer extends Employee {\n    // name field is now inherited from Employee\n}\n```",
        "ContextCode": "```java\nclass Employee {\n    private String name;\n\n    public Employee(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\nclass Salesman extends Employee {\n    public Salesman(String name) {\n        super(name);\n    }\n}\n\nclass Engineer extends Employee {\n    public Engineer(String name) {\n        super(name);\n    }\n}\n```",
        "RulesCode": "```java\nclass Employee {\n  protected String name;\n}\n\nclass Salesman extends Employee {\n}\n\nclass Engineer extends Employee {\n}\n```"
    },
    "FOWLER_EX_PRESERVE WHOLE OBJECT": {
        "RefactMethod": "PRESERVE WHOLE OBJECT",
        "BeforeRefact": "const low = aRoom.daysTempRange.low;\nconst high = aRoom.daysTempRange.high;\nif (aPlan.withinRange(low, high))",
        "AfterRefact": "if (aPlan.withinRange(aRoom.daysTempRange))",
        "ZeroShotCode": "```java\nif (aPlan.withinRange(aRoom.daysTempRange))\n```",
        "InstrucCode": "```java\nif (aPlan.withinRange(aRoom.daysTempRange))\n```",
        "ContextCode": "```java\nint low = aRoom.daysTempRange.low;\nint high = aRoom.daysTempRange.high;\nif (aPlan.withinRange(low, high)) {\n    // Code to execute if within range\n}\n```",
        "RulesCode": "```java\nif (aPlan.withinRange(aRoom.daysTempRange))\n```"
    },
    "FOWLER_EX_SPLIT PHASE": {
        "RefactMethod": "SPLIT PHASE",
        "BeforeRefact": "const orderData = orderString.split(/\\s+/);\nconst productPrice = priceList[orderData[0].split(\u201c-\u201d)[1]];\nconst orderPrice = parseInt(orderData[1]) * productPrice;",
        "AfterRefact": "const orderRecord = parseOrder(order);\nconst orderPrice = price(orderRecord, priceList);\n\nfunction parseOrder(aString) {\n  const values =  aString.split(/\\s+/);\n  return ({\n    productID: values[0].split(\u201c-\u201d)[1],\n    quantity: parseInt(values[1]),\n  });\n}\nfunction price(order, priceList) {\n  return order.quantity * priceList[order.productID];\n}",
        "ZeroShotCode": "```java\nString[] orderData = orderString.split(\"\\\\s+\");\nString[] productDetails = orderData[0].split(\"-\");\nint productId = Integer.parseInt(productDetails[1]);\nint productPrice = priceList[productId];\nint orderPrice = Integer.parseInt(orderData[1]) * productPrice;\n```",
        "InstrucCode": "```java\nclass OrderProcessor {\n    private static class IntermediateData {\n        String productId;\n        int quantity;\n        double productPrice;\n    }\n\n    private static IntermediateData extractOrderData(String orderString, Map<String, Double> priceList) {\n        String[] orderData = orderString.split(\"\\\\s+\");\n        IntermediateData data = new IntermediateData();\n        data.productId = orderData[0].split(\"-\")[1];\n        data.quantity = Integer.parseInt(orderData[1]);\n        data.productPrice = priceList.get(data.productId);\n        return data;\n    }\n\n    private static double calculateOrderPrice(IntermediateData data) {\n        return data.quantity * data.productPrice;\n    }\n\n    public static double processOrder(String orderString, Map<String, Double> priceList) {\n        IntermediateData data = extractOrderData(orderString, priceList);\n        return calculateOrderPrice(data);\n    }\n}\n```",
        "ContextCode": "```java\nString[] orderData = orderString.split(\"\\\\s+\");\nint productId = Integer.parseInt(orderData[0].split(\"-\")[1]);\nint productPrice = priceList[productId];\nint orderPrice = Integer.parseInt(orderData[1]) * productPrice;\n```"
    },
    "FOWLER_EX_COLLAPSE HIERARCHY": {
        "RefactMethod": "COLLAPSE HIERARCHY",
        "BeforeRefact": "class Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}",
        "ZeroShotCode": "```java\nclass Employee {\n    // Employee fields and methods\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n    // Fields and methods from both Employee and Salesman classes\n    // Move all fields and methods from Salesman to Employee\n}\n```",
        "ContextCode": "```java\nclass Employee {\n    // Employee class implementation\n}\n\nclass Salesman extends Employee {\n    // Salesman class implementation\n}\n```",
        "RulesCode": "```java\nclass Employee {\n    // Fields and methods from Salesman will be moved here\n}\n```"
    },
    "FOWLER_EX_REPLACE SUBCLASS WITH DELEGATE": {
        "RefactMethod": "REPLACE SUBCLASS WITH DELEGATE",
        "BeforeRefact": "class Order {\n  get daysToShip() {\n    return this._warehouse.daysToShip;\n  }\n}\n\nclass PriorityOrder extends Order {\n  get daysToShip() {\n    return this._priorityPlan.daysToShip;\n  }\n}",
        "AfterRefact": "class Order {\n  get daysToShip() {\n    return (this._priorityDelegate)\n      ? this._priorityDelegate.daysToShip\n      : this._warehouse.daysToShip;\n  }\n}\n\nclass PriorityOrderDelegate {\n  get daysToShip() {\n    return this._priorityPlan.daysToShip\n  }\n}",
        "ZeroShotCode": "```java\nclass Order {\n  private Warehouse warehouse;\n  private PriorityPlan priorityPlan;\n\n  Order(Warehouse warehouse) {\n    this.warehouse = warehouse;\n  }\n\n  void setPriorityPlan(PriorityPlan priorityPlan) {\n    this.priorityPlan = priorityPlan;\n  }\n\n  int getDaysToShip() {\n    if (priorityPlan != null) {\n      return priorityPlan.getDaysToShip();\n    }\n    return warehouse.getDaysToShip();\n  }\n}\n\nclass Warehouse {\n  int getDaysToShip() {\n    // Implementation for warehouse days to ship\n    return 5; // Example value\n  }\n}\n\nclass PriorityPlan {\n  int getDaysToShip() {\n    // Implementation for priority plan days to ship\n    return 2; // Example value\n  }\n}\n```",
        "InstrucCode": "```java\nclass Order {\n  private PriorityOrderDelegate priorityDelegate;\n\n  Order(PriorityOrderDelegate priorityDelegate) {\n    this.priorityDelegate = priorityDelegate;\n  }\n\n  int getDaysToShip() {\n    if (priorityDelegate != null) {\n      return priorityDelegate.getDaysToShip();\n    }\n    return this._warehouse.daysToShip;\n  }\n}\n\nclass PriorityOrderDelegate {\n  private PriorityPlan _priorityPlan;\n\n  PriorityOrderDelegate(PriorityPlan priorityPlan) {\n    this._priorityPlan = priorityPlan;\n  }\n\n  int getDaysToShip() {\n    return this._priorityPlan.daysToShip;\n  }\n}\n\n// Usage example\nOrder order = new Order(new PriorityOrderDelegate(priorityPlan));\n```",
        "ContextCode": "```java\nclass Order {\n    private Warehouse warehouse;\n\n    public Order(Warehouse warehouse) {\n        this.warehouse = warehouse;\n    }\n\n    public int getDaysToShip() {\n        return warehouse.getDaysToShip();\n    }\n}\n\nclass PriorityOrder extends Order {\n    private PriorityPlan priorityPlan;\n\n    public PriorityOrder(Warehouse warehouse, PriorityPlan priorityPlan) {\n        super(warehouse);\n        this.priorityPlan = priorityPlan;\n    }\n\n    @Override\n    public int getDaysToShip() {\n        return priorityPlan.getDaysToShip();\n    }\n}\n```"
    },
    "FOWLER_EX_CHANGE REFERENCE TO VALUE": {
        "RefactMethod": "CHANGE REFERENCE TO VALUE",
        "BeforeRefact": "class Product {\n  applyDiscount(arg) {this._price.amount -= arg;}",
        "AfterRefact": "class Product {\n  applyDiscount(arg) {\n    this._price = new Money(this._price.amount - arg, this._price.currency);\n  }",
        "ZeroShotCode": "```java\nclass Product {\n    private Price price;\n\n    Product(Price price) {\n        this.price = new Price(price.getAmount());\n    }\n\n    void applyDiscount(double discount) {\n        double newAmount = this.price.getAmount() - discount;\n        this.price = new Price(newAmount);\n    }\n}\n\nclass Price {\n    private double amount;\n\n    Price(double amount) {\n        this.amount = amount;\n    }\n\n    double getAmount() {\n        return amount;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Product {\n    private final Price price;\n\n    public Product(Price price) {\n        this.price = price;\n    }\n\n    public void applyDiscount(double discount) {\n        this.price = new Price(this.price.getAmount() - discount);\n    }\n\n    public Price getPrice() {\n        return price;\n    }\n}\n\nclass Price {\n    private final double amount;\n\n    public Price(double amount) {\n        this.amount = amount;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Price price = (Price) o;\n        return Double.compare(price.amount, amount) == 0;\n    }\n\n    @Override\n    public int hashCode() {\n        return Double.hashCode(amount);\n    }\n}\n```",
        "ContextCode": "```java\nclass Product {\n    private Price price;\n\n    public void applyDiscount(double discount) {\n        this.price.setAmount(this.price.getAmount() - discount);\n    }\n}\n\nclass Price {\n    private double amount;\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public void setAmount(double amount) {\n        this.amount = amount;\n    }\n}\n```",
        "RulesCode": "```java\nclass Product {\n    private final Price _price;\n\n    public Product(Price price) {\n        this._price = price;\n    }\n\n    public void applyDiscount(double arg) {\n        this._price = new Price(this._price.getAmount() - arg);\n    }\n\n    public Price getPrice() {\n        return _price;\n    }\n}\n\nclass Price {\n    private final double amount;\n\n    public Price(double amount) {\n        this.amount = amount;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Price price = (Price) o;\n        return Double.compare(price.amount, amount) == 0;\n    }\n\n    @Override\n    public int hashCode() {\n        return Double.hashCode(amount);\n    }\n}\n```"
    },
    "FOWLER_EX_ENCAPSULATE RECORD": {
        "RefactMethod": "ENCAPSULATE RECORD",
        "BeforeRefact": "organization = {name: \u201cAcme Gooseberries\u201d, country: \u201cGB\u201d};",
        "AfterRefact": "class Organization {\n  constructor(data) {\n    this._name = data.name;\n    this._country = data.country;\n  }\n  get name()    {return this._name;}\n  set name(arg) {this._name = arg;}\n  get country()    {return this._country;}\n  set country(arg) {this._country = arg;}\n}",
        "ZeroShotCode": "```java\npublic class Organization {\n    private String name;\n    private String country;\n\n    public Organization(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n}\n\n// Usage\nOrganization organization = new Organization(\"Acme Gooseberries\", \"GB\");\n```",
        "InstrucCode": "```java\npublic class Organization {\n    private String name;\n    private String country;\n\n    public Organization(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n}\n\n// Usage\npublic class Main {\n    public static void main(String[] args) {\n        Organization organization = new Organization(\"Acme Gooseberries\", \"GB\");\n        System.out.println(\"Name: \" + organization.getName());\n        System.out.println(\"Country: \" + organization.getCountry());\n    }\n}\n```",
        "ContextCode": "```java\npublic class Organization {\n    private String name;\n    private String country;\n\n    public Organization(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public static void main(String[] args) {\n        Organization organization = new Organization(\"Acme Gooseberries\", \"GB\");\n    }\n}\n```",
        "RulesCode": "```java\npublic class Organization {\n    private String name;\n    private String country;\n\n    public Organization(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n}\n```"
    },
    "FOWLER_EX_PUSH DOWN METHOD": {
        "RefactMethod": "PUSH DOWN METHOD",
        "BeforeRefact": "class Employee {\n  get quota {...}\n}\n\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {\n  get quota {...}  \n}",
        "ZeroShotCode": "```java\nclass Employee {\n    // Other methods and fields\n}\n\nclass Engineer extends Employee {\n    get quota {\n        // Implementation of quota for Engineer\n    }\n}\n\nclass Salesman extends Employee {\n    get quota {\n        // Implementation of quota for Salesman\n    }\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n  // quota method removed from superclass\n}\n\nclass Engineer extends Employee {\n  get quota {...}\n}\n\nclass Salesman extends Employee {\n  get quota {...}\n}\n```",
        "ContextCode": "```java\nclass Employee {\n    private double quota;\n\n    public double getQuota() {\n        return quota;\n    }\n\n    public void setQuota(double quota) {\n        this.quota = quota;\n    }\n}\n\nclass Engineer extends Employee {\n    // Engineer-specific methods and fields\n}\n\nclass Salesman extends Employee {\n    // Salesman-specific methods and fields\n}\n```",
        "RulesCode": "```java\nclass Employee {\n  // quota method is pushed down to subclasses\n}\n\nclass Engineer extends Employee {\n  get quota {...}\n}\n\nclass Salesman extends Employee {\n  get quota {...}\n}\n```"
    },
    "FOWLER_EX_EXTRACT FUNCTION": {
        "RefactMethod": "EXTRACT FUNCTION",
        "BeforeRefact": "function printOwing(invoice) {\n  printBanner();\n  let outstanding  = calculateOutstanding();\n\n  //print details\n  console.log(`name: ${invoice.customer}`);\n  console.log(`amount: ${outstanding}`);  \n}",
        "AfterRefact": "function printOwing(invoice) {\n  printBanner();\n  let outstanding  = calculateOutstanding();\n  printDetails(outstanding);\n\n  function printDetails(outstanding) {\n    console.log(`name: ${invoice.customer}`);\n    console.log(`amount: ${outstanding}`);\n  }\n}",
        "ZeroShotCode": "```java\npublic class InvoicePrinter {\n\n    public void printOwing(Invoice invoice) {\n        printBanner();\n        double outstanding = calculateOutstanding();\n        printDetails(invoice, outstanding);\n    }\n\n    private void printBanner() {\n        // Implementation for printing banner\n    }\n\n    private double calculateOutstanding() {\n        // Implementation for calculating outstanding amount\n        return 0.0; // Placeholder return value\n    }\n\n    private void printDetails(Invoice invoice, double outstanding) {\n        System.out.println(\"name: \" + invoice.getCustomer());\n        System.out.println(\"amount: \" + outstanding);\n    }\n}\n\nclass Invoice {\n    private String customer;\n\n    public String getCustomer() {\n        return customer;\n    }\n\n    public void setCustomer(String customer) {\n        this.customer = customer;\n    }\n}\n```",
        "InstrucCode": "```java\npublic void printOwing(Invoice invoice) {\n    printBanner();\n    double outstanding = calculateOutstanding();\n    printDetails(invoice, outstanding);\n}\n\nprivate void printDetails(Invoice invoice, double outstanding) {\n    System.out.println(\"name: \" + invoice.getCustomer());\n    System.out.println(\"amount: \" + outstanding);\n}\n```",
        "ContextCode": "```java\npublic void printOwing(Invoice invoice) {\n    printBanner();\n    double outstanding = calculateOutstanding();\n\n    // Print details\n    System.out.println(\"name: \" + invoice.getCustomer());\n    System.out.println(\"amount: \" + outstanding);\n}\n```",
        "RulesCode": "```java\npublic class Invoice {\n    public void printOwing(Invoice invoice) {\n        printBanner();\n        double outstanding = calculateOutstanding();\n        printDetails(invoice, outstanding);\n    }\n\n    private void printDetails(Invoice invoice, double outstanding) {\n        System.out.println(\"name: \" + invoice.getCustomer());\n        System.out.println(\"amount: \" + outstanding);\n    }\n\n    private void printBanner() {\n        // Implementation for printing banner\n    }\n\n    private double calculateOutstanding() {\n        // Implementation for calculating outstanding amount\n        return 0.0;\n    }\n\n    public String getCustomer() {\n        // Implementation for getting customer name\n        return \"\";\n    }\n}\n```"
    },
    "FOWLER_EX_INTRODUCE ASSERTION": {
        "RefactMethod": "INTRODUCE ASSERTION",
        "BeforeRefact": "if (this.discountRate)\n  base = base - (this.discountRate * base);",
        "AfterRefact": "assert(this.discountRate >= 0);\nif (this.discountRate)\n  base = base - (this.discountRate * base);",
        "ZeroShotCode": "```java\nassert this.discountRate >= 0 && this.discountRate <= 1 : \"Discount rate must be between 0 and 1\";\nbase = base - (this.discountRate * base);\n```",
        "InstrucCode": "```java\nassert this.discountRate >= 0 && this.discountRate <= 1 : \"Discount rate must be between 0 and 1\";\nif (this.discountRate)\n  base = base - (this.discountRate * base);\n```",
        "ContextCode": "```java\nif (this.discountRate != 0) {\n    base -= this.discountRate * base;\n}\n```",
        "RulesCode": "```java\nassert this.discountRate != null : \"Discount rate should not be null\";\nif (this.discountRate) {\n    base = base - (this.discountRate * base);\n}\n```"
    },
    "FOWLER_EX_EXTRACT VARIABLE": {
        "RefactMethod": "EXTRACT VARIABLE",
        "BeforeRefact": "return order.quantity * order.itemPrice -\n    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +\n    Math.min(order.quantity * order.itemPrice * 0.1, 100);",
        "AfterRefact": "const basePrice = order.quantity * order.itemPrice;\nconst quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\nconst shipping = Math.min(basePrice * 0.1, 100);\nreturn basePrice - quantityDiscount + shipping;",
        "ZeroShotCode": "```java\ndouble basePrice = order.quantity * order.itemPrice;\ndouble quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\ndouble shippingCost = Math.min(order.quantity * order.itemPrice * 0.1, 100);\nreturn basePrice - quantityDiscount + shippingCost;\n```",
        "InstrucCode": "```java\ndouble basePrice = order.quantity * order.itemPrice;\ndouble quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\ndouble shippingCost = Math.min(order.quantity * order.itemPrice * 0.1, 100);\n\nreturn basePrice - quantityDiscount + shippingCost;\n```",
        "ContextCode": "```java\ndouble basePrice = order.quantity * order.itemPrice;\ndouble discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\ndouble shippingCost = Math.min(order.quantity * order.itemPrice * 0.1, 100);\nreturn basePrice - discount + shippingCost;\n```",
        "RulesCode": "```java\ndouble basePrice = order.quantity * order.itemPrice;\ndouble quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\ndouble shippingCost = Math.min(order.quantity * order.itemPrice * 0.1, 100);\nreturn basePrice - quantityDiscount + shippingCost;\n```"
    },
    "FOWLER_EX_INLINE VARIABLE": {
        "RefactMethod": "INLINE VARIABLE",
        "BeforeRefact": "let basePrice = anOrder.basePrice;\nreturn (basePrice > 1000);",
        "AfterRefact": "return anOrder.basePrice > 1000;",
        "ZeroShotCode": "```java\nreturn (anOrder.basePrice > 1000);\n```",
        "InstrucCode": "```java\nreturn (anOrder.basePrice > 1000);\n```",
        "ContextCode": "```java\nreturn anOrder.basePrice > 1000;\n```",
        "RulesCode": "```java\nreturn (anOrder.basePrice > 1000);\n```"
    },
    "FOWLER_EX_ENCAPSULATE COLLECTION": {
        "RefactMethod": "ENCAPSULATE COLLECTION",
        "BeforeRefact": "class Person {              \n  get courses() {return this._courses;}\n  set courses(aList) {this._courses = aList;}",
        "AfterRefact": "class Person {\n  get courses() {return this._courses.slice();}\n  addCourse(aCourse)    { ... }\n  removeCourse(aCourse) { ... }",
        "ZeroShotCode": "```java\nclass Person {\n    private List<Course> _courses = new ArrayList<>();\n\n    public List<Course> getCourses() {\n        return Collections.unmodifiableList(_courses);\n    }\n\n    public void addCourse(Course course) {\n        _courses.add(course);\n    }\n\n    public void removeCourse(Course course) {\n        _courses.remove(course);\n    }\n}\n```",
        "InstrucCode": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Person {\n    private List<String> courses = new ArrayList<>();\n\n    public List<String> getCourses() {\n        return Collections.unmodifiableList(courses);\n    }\n\n    public void addCourse(String course) {\n        courses.add(course);\n    }\n\n    public void removeCourse(String course) {\n        courses.remove(course);\n    }\n\n    public void setCourses(List<String> newCourses) {\n        this.courses = new ArrayList<>(newCourses);\n    }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private List<Course> courses;\n\n    public List<Course> getCourses() {\n        return Collections.unmodifiableList(courses);\n    }\n\n    public void setCourses(List<Course> courses) {\n        this.courses = new ArrayList<>(courses);\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n    private List<Course> _courses = new ArrayList<>();\n\n    public List<Course> getCourses() {\n        return Collections.unmodifiableList(_courses);\n    }\n\n    public void addCourse(Course course) {\n        _courses.add(course);\n    }\n\n    public void removeCourse(Course course) {\n        _courses.remove(course);\n    }\n}\n```"
    },
    "FOWLER_EX_ENCAPSULATE VARIABLE": {
        "RefactMethod": "ENCAPSULATE VARIABLE",
        "BeforeRefact": "let defaultOwner = {firstName: \u201cMartin\u201d, lastName: \u201cFowler\u201d};",
        "AfterRefact": "let defaultOwnerData = {firstName: \u201cMartin\u201d, lastName: \u201cFowler\u201d};\nexport function defaultOwner()       {return defaultOwnerData;}\nexport function setDefaultOwner(arg) {defaultOwnerData = arg;}",
        "ZeroShotCode": "```java\npublic class DefaultOwner {\n    private String firstName;\n    private String lastName;\n\n    public DefaultOwner(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\n\n// Usage\nDefaultOwner defaultOwner = new DefaultOwner(\"Martin\", \"Fowler\");\n```",
        "InstrucCode": "```java\npublic class DefaultOwner {\n    private String firstName;\n    private String lastName;\n\n    public DefaultOwner(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\n\npublic class Application {\n    private static DefaultOwner defaultOwner = new DefaultOwner(\"Martin\", \"Fowler\");\n\n    public static DefaultOwner getDefaultOwner() {\n        return defaultOwner;\n    }\n\n    public static void setDefaultOwner(DefaultOwner owner) {\n        defaultOwner = owner;\n    }\n}\n```",
        "ContextCode": "```java\npublic class DefaultOwner {\n    private String firstName;\n    private String lastName;\n\n    public DefaultOwner(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public static void main(String[] args) {\n        DefaultOwner defaultOwner = new DefaultOwner(\"Martin\", \"Fowler\");\n    }\n}\n```",
        "RulesCode": "```java\npublic class Owner {\n    private String firstName;\n    private String lastName;\n\n    public Owner(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\n\npublic class DefaultOwner {\n    private static Owner defaultOwner = new Owner(\"Martin\", \"Fowler\");\n\n    public static Owner getDefaultOwner() {\n        return defaultOwner;\n    }\n\n    public static void setDefaultOwner(Owner owner) {\n        defaultOwner = owner;\n    }\n}\n```"
    },
    "FOWLER_EX_PUSH DOWN FIELD": {
        "RefactMethod": "PUSH DOWN FIELD",
        "BeforeRefact": "class Employee {        // Java\n  private String quota;\n}\n\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}\nclass Engineer extends Employee {...}\n\nclass Salesman extends Employee {\n  protected String quota;\n}",
        "ZeroShotCode": "```java\nclass Employee {\n}\n\nclass Engineer extends Employee {\n    private String quota;\n}\n\nclass Salesman extends Employee {\n    private String quota;\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n}\n\nclass Engineer extends Employee {\n}\n\nclass Salesman extends Employee {\n  private String quota;\n}\n```",
        "ContextCode": "```java\nclass Employee {\n    private String quota;\n\n    public String getQuota() {\n        return quota;\n    }\n\n    public void setQuota(String quota) {\n        this.quota = quota;\n    }\n}\n\nclass Engineer extends Employee {\n    // Additional Engineer-specific fields and methods\n}\n\nclass Salesman extends Employee {\n    // Additional Salesman-specific fields and methods\n}\n```",
        "RulesCode": "```java\nclass Employee {\n}\n\nclass Engineer extends Employee {\n    private String quota;\n}\n\nclass Salesman extends Employee {\n    private String quota;\n}\n```"
    },
    "FOWLER_EX_REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES": {
        "RefactMethod": "REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES",
        "BeforeRefact": "function getPayAmount() {\n    let result;\n    if (isDead)\n        result = deadAmount();\n    else {\n        if (isSeparated)\n            result = separatedAmount();\n        else {\n            if (isRetired)\n                result = retiredAmount();\n            else\n                result = normalPayAmount();\n        }\n    }\n    return result;\n}",
        "AfterRefact": "function getPayAmount() {\n    if (isDead) return deadAmount();\n    if (isSeparated) return separatedAmount();\n    if (isRetired) return retiredAmount();\n    return normalPayAmount();\n}",
        "ZeroShotCode": "```java\npublic double getPayAmount() {\n    if (isDead) {\n        return deadAmount();\n    }\n    if (isSeparated) {\n        return separatedAmount();\n    }\n    if (isRetired) {\n        return retiredAmount();\n    }\n    return normalPayAmount();\n}\n```",
        "InstrucCode": "```java\npublic double getPayAmount() {\n    if (isDead) return deadAmount();\n    if (isSeparated) return separatedAmount();\n    if (isRetired) return retiredAmount();\n    return normalPayAmount();\n}\n```",
        "ContextCode": "```java\npublic int getPayAmount() {\n    if (isDead) {\n        return deadAmount();\n    }\n    if (isSeparated) {\n        return separatedAmount();\n    }\n    if (isRetired) {\n        return retiredAmount();\n    }\n    return normalPayAmount();\n}\n```",
        "RulesCode": "```java\nfunction getPayAmount() {\n    if (isDead) return deadAmount();\n    if (isSeparated) return separatedAmount();\n    if (isRetired) return retiredAmount();\n    return normalPayAmount();\n}\n```"
    },
    "FOWLER_EX_REMOVE SETTING METHOD": {
        "RefactMethod": "REMOVE SETTING METHOD",
        "BeforeRefact": "class Person {\n  get name() {...}\n  set name(aString) {...}",
        "AfterRefact": "class Person {\n  get name() {...}",
        "ZeroShotCode": "```java\nclass Person {\n  private String name;\n\n  public String getName() {\n    return name;\n  }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n  private final String name;\n\n  public Person(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n  private final String name;\n\n  public Person(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n```"
    },
    "FOWLER_EX_REPLACE DERIVED VARIABLE WITH QUERY": {
        "RefactMethod": "REPLACE DERIVED VARIABLE WITH QUERY",
        "BeforeRefact": "get discountedTotal() {return this._discountedTotal;}\nset discount(aNumber) {\n    const old = this._discount;\n    this._discount = aNumber;\n    this._discountedTotal += old - aNumber; \n}",
        "AfterRefact": "get discountedTotal() {return this._baseTotal - this._discount;}\nset discount(aNumber) {this._discount = aNumber;}",
        "ZeroShotCode": "```java\npublic double getDiscountedTotal() {\n    return calculateDiscountedTotal();\n}\n\npublic void setDiscount(double aNumber) {\n    this._discount = aNumber;\n}\n\nprivate double calculateDiscountedTotal() {\n    return this._discountedTotal + (this._discount - this._discount);\n}\n```",
        "InstrucCode": "```java\npublic double getDiscountedTotal() {\n    return calculateDiscountedTotal();\n}\n\npublic void setDiscount(double aNumber) {\n    this._discount = aNumber;\n}\n\nprivate double calculateDiscountedTotal() {\n    return this._baseTotal - this._discount;\n}\n```",
        "ContextCode": "```java\npublic double getDiscountedTotal() {\n    return this.discountedTotal;\n}\n\npublic void setDiscount(double aNumber) {\n    double oldDiscount = this.discount;\n    this.discount = aNumber;\n    this.discountedTotal += oldDiscount - aNumber;\n}\n```"
    },
    "FOWLER_EX_SUBSTITUTE ALGORITHM": {
        "RefactMethod": "SUBSTITUTE ALGORITHM",
        "BeforeRefact": "function foundPerson(people) {\n  for(let i = 0; i < people.length; i++) {\n    if (people[i] === \u201cDon\u201d) {\n      return \u201cDon\u201d;\n    }\n    if (people[i] === \u201cJohn\u201d) {\n      return \u201cJohn\u201d;\n    }\n    if (people[i] === \u201cKent\u201d) {\n      return \u201cKent\u201d;\n    }\n  }\n  return \u201c\u201d;\n}",
        "AfterRefact": "function foundPerson(people) {\n  const candidates = [\u201dDon\u201d, \u201cJohn\u201d, \u201cKent\u201d];\n  return people.find(p => candidates.includes(p)) || '';\n}",
        "ZeroShotCode": "```java\npublic String foundPerson(String[] people) {\n    for (String person : people) {\n        if (person.equals(\"Don\") || person.equals(\"John\") || person.equals(\"Kent\")) {\n            return person;\n        }\n    }\n    return \"\";\n}\n```",
        "InstrucCode": "```java\npublic String foundPerson(String[] people) {\n    for (String person : people) {\n        if (person.equals(\"Don\") || person.equals(\"John\") || person.equals(\"Kent\")) {\n            return person;\n        }\n    }\n    return \"\";\n}\n```",
        "ContextCode": "```java\npublic String foundPerson(String[] people) {\n    for (String person : people) {\n        if (person.equals(\"Don\") || person.equals(\"John\") || person.equals(\"Kent\")) {\n            return person;\n        }\n    }\n    return \"\";\n}\n```",
        "RulesCode": "```java\npublic String foundPerson(String[] people) {\n    for (String person : people) {\n        if (person.equals(\"Don\") || person.equals(\"John\") || person.equals(\"Kent\")) {\n            return person;\n        }\n    }\n    return \"\";\n}\n```"
    },
    "FOWLER_EX_REPLACE CONDITIONAL WITH POLYMORPHISM": {
        "RefactMethod": "REPLACE CONDITIONAL WITH POLYMORPHISM",
        "BeforeRefact": "switch (bird.type) {\n  case 'EuropeanSwallow':\n    return \u201caverage\u201d;\n  case 'AfricanSwallow':\n    return (bird.numberOfCoconuts > 2) ? \u201ctired\u201d : \u201caverage\u201d;\n  case 'NorwegianBlueParrot':\n    return (bird.voltage > 100) ? \u201cscorched\u201d : \u201cbeautiful\u201d;\n  default:\n    return \u201cunknown\u201d;",
        "AfterRefact": "class EuropeanSwallow {\n  get plumage() {\n    return \u201caverage\u201d;\n  }\nclass AfricanSwallow {\n  get plumage() {\n     return (this.numberOfCoconuts > 2) ? \u201ctired\u201d : \u201caverage\u201d;\n  }\nclass NorwegianBlueParrot {\n  get plumage() {\n     return (this.voltage > 100) ? \u201cscorched\u201d : \u201cbeautiful\u201d;\n  }",
        "ZeroShotCode": "```java\nabstract class Bird {\n    abstract String getSpeed();\n}\n\nclass EuropeanSwallow extends Bird {\n    @Override\n    String getSpeed() {\n        return \"average\";\n    }\n}\n\nclass AfricanSwallow extends Bird {\n    private int numberOfCoconuts;\n\n    AfricanSwallow(int numberOfCoconuts) {\n        this.numberOfCoconuts = numberOfCoconuts;\n    }\n\n    @Override\n    String getSpeed() {\n        return (numberOfCoconuts > 2) ? \"tired\" : \"average\";\n    }\n}\n\nclass NorwegianBlueParrot extends Bird {\n    private int voltage;\n\n    NorwegianBlueParrot(int voltage) {\n        this.voltage = voltage;\n    }\n\n    @Override\n    String getSpeed() {\n        return (voltage > 100) ? \"scorched\" : \"beautiful\";\n    }\n}\n\nclass UnknownBird extends Bird {\n    @Override\n    String getSpeed() {\n        return \"unknown\";\n    }\n}\n```",
        "InstrucCode": "```java\n// Superclass\nabstract class Bird {\n    public abstract String getSpeed();\n}\n\n// Subclasses\nclass EuropeanSwallow extends Bird {\n    @Override\n    public String getSpeed() {\n        return \"average\";\n    }\n}\n\nclass AfricanSwallow extends Bird {\n    private int numberOfCoconuts;\n\n    public AfricanSwallow(int numberOfCoconuts) {\n        this.numberOfCoconuts = numberOfCoconuts;\n    }\n\n    @Override\n    public String getSpeed() {\n        return (numberOfCoconuts > 2) ? \"tired\" : \"average\";\n    }\n}\n\nclass NorwegianBlueParrot extends Bird {\n    private int voltage;\n\n    public NorwegianBlueParrot(int voltage) {\n        this.voltage = voltage;\n    }\n\n    @Override\n    public String getSpeed() {\n        return (voltage > 100) ? \"scorched\" : \"beautiful\";\n    }\n}\n\nclass UnknownBird extends Bird {\n    @Override\n    public String getSpeed() {\n        return \"unknown\";\n    }\n}\n\n// Factory function\nclass BirdFactory {\n    public static Bird createBird(String type, int numberOfCoconuts, int voltage) {\n        switch (type) {\n            case \"EuropeanSwallow\":\n                return new EuropeanSwallow();\n            case \"AfricanSwallow\":\n                return new AfricanSwallow(numberOfCoconuts);\n            case \"NorwegianBlueParrot\":\n                return new NorwegianBlueParrot(voltage);\n            default:\n                return new UnknownBird();\n        }\n    }\n}\n\n// Usage\npublic class Main {\n    public static void main(String[] args) {\n        Bird bird = BirdFactory.createBird(\"AfricanSwallow\", 3, 0);\n        System.out.println(bird.getSpeed()); // Output: \"tired\"\n    }\n}\n```",
        "ContextCode": "```java\nswitch (bird.type) {\n    case \"EuropeanSwallow\":\n        return \"average\";\n    case \"AfricanSwallow\":\n        return bird.numberOfCoconuts > 2 ? \"tired\" : \"average\";\n    case \"NorwegianBlueParrot\":\n        return bird.voltage > 100 ? \"scorched\" : \"beautiful\";\n    default:\n        return \"unknown\";\n}\n```",
        "RulesCode": "```java\nabstract class Bird {\n    abstract String getSpeed();\n}\n\nclass EuropeanSwallow extends Bird {\n    @Override\n    String getSpeed() {\n        return \"average\";\n    }\n}\n\nclass AfricanSwallow extends Bird {\n    private int numberOfCoconuts;\n\n    AfricanSwallow(int numberOfCoconuts) {\n        this.numberOfCoconuts = numberOfCoconuts;\n    }\n\n    @Override\n    String getSpeed() {\n        return (numberOfCoconuts > 2) ? \"tired\" : \"average\";\n    }\n}\n\nclass NorwegianBlueParrot extends Bird {\n    private int voltage;\n\n    NorwegianBlueParrot(int voltage) {\n        this.voltage = voltage;\n    }\n\n    @Override\n    String getSpeed() {\n        return (voltage > 100) ? \"scorched\" : \"beautiful\";\n    }\n}\n\nclass UnknownBird extends Bird {\n    @Override\n    String getSpeed() {\n        return \"unknown\";\n    }\n}\n```"
    },
    "FOWLER_EX_DECOMPOSE CONDITIONAL": {
        "RefactMethod": "DECOMPOSE CONDITIONAL",
        "BeforeRefact": "if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))\n  charge = quantity * plan.summerRate;\nelse\n  charge = quantity * plan.regularRate + plan.regularServiceCharge;",
        "AfterRefact": "if (summer())\n  charge = summerCharge();\nelse\n  charge = regularCharge();",
        "ZeroShotCode": "```java\nif (isSummer(aDate, plan)) {\n    charge = quantity * plan.summerRate;\n} else {\n    charge = quantity * plan.regularRate + plan.regularServiceCharge;\n}\n\nprivate boolean isSummer(Date aDate, Plan plan) {\n    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);\n}\n```",
        "InstrucCode": "```java\nif (isSummer(aDate, plan))\n  charge = summerCharge(quantity, plan);\nelse\n  charge = regularCharge(quantity, plan);\n\nprivate boolean isSummer(Date aDate, Plan plan) {\n  return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);\n}\n\nprivate double summerCharge(int quantity, Plan plan) {\n  return quantity * plan.summerRate;\n}\n\nprivate double regularCharge(int quantity, Plan plan) {\n  return quantity * plan.regularRate + plan.regularServiceCharge;\n}\n```",
        "ContextCode": "```java\nboolean isSummer = !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);\ncharge = isSummer ? quantity * plan.summerRate : quantity * plan.regularRate + plan.regularServiceCharge;\n```",
        "RulesCode": "```java\npublic double calculateCharge(Date aDate, Plan plan, int quantity) {\n    if (isSummer(aDate, plan)) {\n        return calculateSummerCharge(quantity, plan);\n    } else {\n        return calculateRegularCharge(quantity, plan);\n    }\n}\n\nprivate boolean isSummer(Date aDate, Plan plan) {\n    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);\n}\n\nprivate double calculateSummerCharge(int quantity, Plan plan) {\n    return quantity * plan.summerRate;\n}\n\nprivate double calculateRegularCharge(int quantity, Plan plan) {\n    return quantity * plan.regularRate + plan.regularServiceCharge;\n}\n```"
    },
    "FOWLER_EX_EXTRACT SUPERCLASS": {
        "RefactMethod": "EXTRACT SUPERCLASS",
        "BeforeRefact": "class Department {\n  get totalAnnualCost() {...}\n  get name() {...}\n  get headCount() {...}\n}\n\nclass Employee {\n  get annualCost() {...}\n  get name() {...}\n  get id() {...}\n}",
        "AfterRefact": "class Party {\n  get name() {...}\n  get annualCost() {...}\n}\n\nclass Department extends Party {\n  get annualCost() {...}\n  get headCount() {...}\n}\n\nclass Employee extends Party {\n  get annualCost() {...}\n  get id() {...}\n}",
        "ZeroShotCode": "```java\nclass Party {\n    get name() {...}\n    get annualCost() {...}\n}\n\nclass Department extends Party {\n    get totalAnnualCost() {\n        return this.annualCost();\n    }\n    get headCount() {...}\n}\n\nclass Employee extends Party {\n    get id() {...}\n}\n```",
        "InstrucCode": "```java\nclass Party {\n  get name() {...}\n  get annualCost() {...}\n}\n\nclass Department extends Party {\n  get headCount() {...}\n  get totalAnnualCost() {\n    return this.annualCost();\n  }\n}\n\nclass Employee extends Party {\n  get id() {...}\n  get annualCost() {...}\n}\n```",
        "ContextCode": "```java\nabstract class Party {\n    abstract double getAnnualCost();\n    abstract String getName();\n}\n\nclass Department extends Party {\n    @Override\n    double getAnnualCost() {\n        // Implementation for total annual cost\n    }\n\n    @Override\n    String getName() {\n        // Implementation for name\n    }\n\n    int getHeadCount() {\n        // Implementation for head count\n    }\n}\n\nclass Employee extends Party {\n    @Override\n    double getAnnualCost() {\n        // Implementation for annual cost\n    }\n\n    @Override\n    String getName() {\n        // Implementation for name\n    }\n\n    String getId() {\n        // Implementation for ID\n    }\n}\n```",
        "RulesCode": "```java\nclass Party {\n  get name() {...}\n  get annualCost() {...}\n}\n\nclass Department extends Party {\n  get totalAnnualCost() {\n    return annualCost();\n  }\n  get headCount() {...}\n}\n\nclass Employee extends Party {\n  get id() {...}\n}\n```"
    },
    "FOWLER_EX_REPLACE LOOP WITH PIPELINE": {
        "RefactMethod": "REPLACE LOOP WITH PIPELINE",
        "BeforeRefact": "const names = [];\nfor (const i of input) {\n    if (i.job === \u201cprogrammer\u201d)\n        names.push(i.name);\n}",
        "AfterRefact": "const names = input\n    .filter(i => i.job === \u201cprogrammer\u201d)\n    .map(i => i.name)\n;",
        "ZeroShotCode": "```java\nList<String> names = input.stream()\n    .filter(i -> \"programmer\".equals(i.getJob()))\n    .map(i -> i.getName())\n    .collect(Collectors.toList());\n```",
        "InstrucCode": "```java\nList<String> names = input.stream()\n    .filter(i -> \"programmer\".equals(i.getJob()))\n    .map(i -> i.getName())\n    .collect(Collectors.toList());\n```",
        "ContextCode": "```java\nList<String> names = new ArrayList<>();\nfor (Person person : input) {\n    if (\"programmer\".equals(person.getJob())) {\n        names.add(person.getName());\n    }\n}\n```"
    },
    "FOWLER_EX_REPLACE SUPERCLASS WITH DELEGATE": {
        "RefactMethod": "REPLACE SUPERCLASS WITH DELEGATE",
        "BeforeRefact": "class List {...}\nclass Stack extends List {...}",
        "AfterRefact": "class Stack {\n  constructor() {\n    this._storage = new List();\n  }\n}\nclass List {...}",
        "ZeroShotCode": "```java\nclass List {\n    // List implementation\n}\n\nclass Stack {\n    private List list;\n\n    public Stack() {\n        this.list = new List();\n    }\n\n    // Delegate methods to List\n    public void push(Object item) {\n        // Add item to the list\n    }\n\n    public Object pop() {\n        // Remove and return the last item from the list\n        return null;\n    }\n\n    // Other Stack-specific methods\n}\n```",
        "InstrucCode": "```java\nclass List {\n    // List implementation\n}\n\nclass Stack {\n    private List delegate = new List();\n\n    // Forwarding methods for List functionality\n    public void add(Object item) {\n        delegate.add(item);\n    }\n\n    public Object get(int index) {\n        return delegate.get(index);\n    }\n\n    public void remove(int index) {\n        delegate.remove(index);\n    }\n\n    // Stack-specific methods\n    public void push(Object item) {\n        add(item);\n    }\n\n    public Object pop() {\n        Object item = get(size() - 1);\n        remove(size() - 1);\n        return item;\n    }\n\n    public int size() {\n        return delegate.size();\n    }\n}\n```",
        "ContextCode": "```java\nclass List {\n    // List implementation\n}\n\nclass Stack {\n    private List list;\n\n    public Stack() {\n        this.list = new List();\n    }\n\n    // Stack methods using the list\n}\n```",
        "RulesCode": "```java\nclass List {\n    // List implementation\n}\n\nclass Stack {\n    private List delegate;\n\n    public Stack() {\n        this.delegate = new List();\n    }\n\n    // Delegate methods to List\n    public void push(Object item) {\n        // Implement push using delegate\n    }\n\n    public Object pop() {\n        // Implement pop using delegate\n    }\n\n    // Other Stack-specific methods\n}\n```"
    },
    "FOWLER_EX_COMBINE FUNCTIONS INTO TRANSFORM": {
        "RefactMethod": "COMBINE FUNCTIONS INTO TRANSFORM",
        "BeforeRefact": "function base(aReading) {...}\nfunction taxableCharge(aReading) {...}",
        "AfterRefact": "function enrichReading(argReading) {\n  const aReading = _.cloneDeep(argReading);\n  aReading.baseCharge = base(aReading);\n  aReading.taxableCharge = taxableCharge(aReading);\n  return aReading;\n}\n",
        "ZeroShotCode": "```java\nclass Reading {\n    private double baseCharge;\n    private double taxableCharge;\n\n    public Reading(double baseCharge, double taxableCharge) {\n        this.baseCharge = baseCharge;\n        this.taxableCharge = taxableCharge;\n    }\n\n    public double getBaseCharge() {\n        return baseCharge;\n    }\n\n    public double getTaxableCharge() {\n        return taxableCharge;\n    }\n}\n\nclass ReadingCalculator {\n    public static Reading calculateReading(double aReading) {\n        double baseCharge = base(aReading);\n        double taxableCharge = taxableCharge(aReading, baseCharge);\n        return new Reading(baseCharge, taxableCharge);\n    }\n\n    private static double base(double aReading) {\n        // Implementation of base calculation\n        return aReading * 0.1; // Example calculation\n    }\n\n    private static double taxableCharge(double aReading, double baseCharge) {\n        // Implementation of taxable charge calculation\n        return Math.max(0, baseCharge - 5); // Example calculation\n    }\n}\n```",
        "InstrucCode": "```java\nclass Reading {\n    private int base;\n    private int taxableCharge;\n\n    public Reading(int base, int taxableCharge) {\n        this.base = base;\n        this.taxableCharge = taxableCharge;\n    }\n\n    public int getBase() {\n        return base;\n    }\n\n    public int getTaxableCharge() {\n        return taxableCharge;\n    }\n}\n\nclass ReadingTransformer {\n    public static Reading transform(Reading originalReading) {\n        int base = calculateBase(originalReading);\n        int taxableCharge = calculateTaxableCharge(originalReading);\n        return new Reading(base, taxableCharge);\n    }\n\n    private static int calculateBase(Reading reading) {\n        // Logic to calculate base\n        return reading.getBase(); // Placeholder for actual logic\n    }\n\n    private static int calculateTaxableCharge(Reading reading) {\n        // Logic to calculate taxable charge\n        return reading.getBase() * 1.1; // Placeholder for actual logic\n    }\n}\n\n// Client code\nReading originalReading = new Reading(100, 0);\nReading transformedReading = ReadingTransformer.transform(originalReading);\n\nSystem.out.println(\"Base: \" + transformedReading.getBase());\nSystem.out.println(\"Taxable Charge: \" + transformedReading.getTaxableCharge());\n```",
        "ContextCode": "```java\nclass Reading {\n    private int value;\n\n    public Reading(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\nclass ChargeCalculator {\n    public static int base(Reading aReading) {\n        // Calculate base charge logic\n        return aReading.getValue() * 2; // Example calculation\n    }\n\n    public static int taxableCharge(Reading aReading) {\n        // Calculate taxable charge logic\n        return Math.max(0, base(aReading) - 100); // Example calculation\n    }\n}\n```"
    },
    "FOWLER_EX_PARAMETERIZE FUNCTION": {
        "RefactMethod": "PARAMETERIZE FUNCTION",
        "BeforeRefact": "function tenPercentRaise(aPerson) {\n  aPerson.salary = aPerson.salary.multiply(1.1);\n}\nfunction fivePercentRaise(aPerson) {\n  aPerson.salary = aPerson.salary.multiply(1.05);\n}",
        "AfterRefact": "function raise(aPerson, factor) {\n  aPerson.salary = aPerson.salary.multiply(1 + factor);\n}",
        "ZeroShotCode": "```java\npublic void applyRaise(Person aPerson, double raisePercentage) {\n    aPerson.setSalary(aPerson.getSalary().multiply(BigDecimal.valueOf(1 + raisePercentage)));\n}\n```",
        "InstrucCode": "```java\npublic void raiseSalary(Person aPerson, double raisePercentage) {\n    aPerson.setSalary(aPerson.getSalary().multiply(BigDecimal.valueOf(1 + raisePercentage / 100)));\n}\n```",
        "ContextCode": "```java\npublic void applyRaise(Person aPerson, double raisePercentage) {\n    aPerson.setSalary(aPerson.getSalary().multiply(BigDecimal.valueOf(1 + raisePercentage)));\n}\n```",
        "RulesCode": "```java\npublic void raiseSalary(Person aPerson, double raisePercentage) {\n    aPerson.salary = aPerson.salary.multiply(BigDecimal.valueOf(1 + raisePercentage / 100));\n}\n```"
    },
    "FOWLER_EX_REMOVE FLAG ARGUMENT": {
        "RefactMethod": "REMOVE FLAG ARGUMENT",
        "BeforeRefact": "function setDimension(name, value) {\n  if (name === \u201cheight\u201d) {\n    this._height = value;\n    return;\n  }\n  if (name === \u201cwidth\u201d) {\n    this._width = value;\n    return;\n  }\n}",
        "AfterRefact": "function setHeight(value) {this._height = value;}\nfunction setWidth (value) {this._width = value;}",
        "ZeroShotCode": "```java\npublic void setHeight(int height) {\n    this._height = height;\n}\n\npublic void setWidth(int width) {\n    this._width = width;\n}\n```",
        "InstrucCode": "```java\npublic void setHeight(int value) {\n    this._height = value;\n}\n\npublic void setWidth(int value) {\n    this._width = value;\n}\n```",
        "ContextCode": "```java\npublic void setDimension(String name, int value) {\n    switch (name) {\n        case \"height\":\n            this._height = value;\n            break;\n        case \"width\":\n            this._width = value;\n            break;\n        default:\n            // Handle unexpected name values if necessary\n            break;\n    }\n}\n```",
        "RulesCode": "```java\npublic void setHeight(int value) {\n    this._height = value;\n}\n\npublic void setWidth(int value) {\n    this._width = value;\n}\n```"
    },
    "FOWLER_EX_REPLACE PARAMETER WITH QUERY": {
        "RefactMethod": "REPLACE PARAMETER WITH QUERY",
        "BeforeRefact": "availableVacation(anEmployee, anEmployee.grade);\n\nfunction availableVacation(anEmployee, grade) {\n  // calculate vacation...",
        "AfterRefact": "availableVacation(anEmployee)\n\nfunction availableVacation(anEmployee) {\n  const grade = anEmployee.grade;\n  // calculate vacation...",
        "ZeroShotCode": "```java\nfunction availableVacation(anEmployee) {\n  int grade = anEmployee.grade;\n  // calculate vacation...\n}\n```",
        "InstrucCode": "```java\nfunction availableVacation(anEmployee) {\n  int grade = anEmployee.grade;\n  // calculate vacation...\n}\n```",
        "ContextCode": "```java\nint availableVacation(Employee anEmployee) {\n    return calculateVacation(anEmployee, anEmployee.getGrade());\n}\n\nint calculateVacation(Employee anEmployee, int grade) {\n    // calculate vacation...\n}\n```",
        "RulesCode": "```java\nfunction availableVacation(anEmployee) {\n  int grade = anEmployee.grade;\n  // calculate vacation...\n}\n```"
    },
    "FOWLER_EX_REPLACE COMMAND WITH FUNCTION": {
        "RefactMethod": "REPLACE COMMAND WITH FUNCTION",
        "BeforeRefact": "class ChargeCalculator {\n  constructor (customer, usage){\n    this._customer = customer;\n    this._usage = usage;\n  }\n  execute() {\n    return this._customer.rate * this._usage;\n  }\n}",
        "AfterRefact": "function charge(customer, usage) {\n  return customer.rate * usage;\n}",
        "ZeroShotCode": "```java\nclass ChargeCalculator {\n    private Customer customer;\n    private double usage;\n\n    public ChargeCalculator(Customer customer, double usage) {\n        this.customer = customer;\n        this.usage = usage;\n    }\n\n    public double execute() {\n        return customer.getRate() * usage;\n    }\n}\n```",
        "InstrucCode": "```java\nclass ChargeCalculator {\n  public static double calculateCharge(Customer customer, double usage) {\n    return customer.rate * usage;\n  }\n}\n```",
        "ContextCode": "```java\nclass ChargeCalculator {\n    private final Customer customer;\n    private final double usage;\n\n    public ChargeCalculator(Customer customer, double usage) {\n        this.customer = customer;\n        this.usage = usage;\n    }\n\n    public double calculateCharge() {\n        return customer.getRate() * usage;\n    }\n}\n```"
    },
    "FOWLER_EX_CHANGE FUNCTION DECLARATION": {
        "RefactMethod": "CHANGE FUNCTION DECLARATION",
        "BeforeRefact": "function circum(radius) {...}",
        "AfterRefact": "function circumference(radius) {...}",
        "ZeroShotCode": "```java\ndouble circumference(double radius) {\n    // Function implementation\n}\n```",
        "InstrucCode": "```java\ndouble circumference(double r) {\n    // Function implementation\n}\n```",
        "ContextCode": "```java\npublic double calculateCircumference(double radius) {\n    return 2 * Math.PI * radius;\n}\n```",
        "RulesCode": "```java\npublic double calculateCircumference(double diameter, String unit) {\n    double radius = diameter / 2;\n    // Assuming the body of the function calculates the circumference\n    return 2 * Math.PI * radius;\n}\n```"
    },
    "FOWLER_EX_RENAME FIELD": {
        "RefactMethod": "RENAME FIELD",
        "BeforeRefact": "class Organization {\n  get name() {...}\n}",
        "AfterRefact": "class Organization {\n  get title() {...}\n}",
        "ZeroShotCode": "```java\nclass Organization {\n  get title() {...}\n}\n```",
        "InstrucCode": "```java\nclass Organization {\n  private String organizationName;\n\n  public String getOrganizationName() {\n    return organizationName;\n  }\n}\n```",
        "ContextCode": "```java\nclass Organization {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n}\n```"
    },
    "FOWLER_EX_REPLACE INLINE CODE WITH FUNCTION CALL": {
        "RefactMethod": "REPLACE INLINE CODE WITH FUNCTION CALL",
        "BeforeRefact": "let appliesToMass = false;\nfor(const s of states) {\n    if (s === \u201cMA\u201d) appliesToMass = true;\n}",
        "AfterRefact": "appliesToMass = states.includes(\u201cMA\u201d);",
        "ZeroShotCode": "```java\nboolean appliesToMass = states.contains(\"MA\");\n```",
        "InstrucCode": "```java\nboolean appliesToMass = states.contains(\"MA\");\n```",
        "ContextCode": "```java\nboolean appliesToMass = states.contains(\"MA\");\n```"
    },
    "FOWLER_EX_MOVE FUNCTION": {
        "RefactMethod": "MOVE FUNCTION",
        "BeforeRefact": "class Account {\n    get overdraftCharge() {...}",
        "AfterRefact": "class AccountType {\n    get overdraftCharge() {...}",
        "ZeroShotCode": "```java\nclass Account {\n    // Moved overdraftCharge method to a new class\n}\n\nclass AccountType {\n    double overdraftCharge(Account account) {\n        // Implementation of overdraftCharge\n    }\n}\n```",
        "InstrucCode": "```java\nclass Account {\n    private double balance;\n\n    public double getOverdraftCharge() {\n        return new OverdraftCalculator().calculateOverdraftCharge(this);\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n}\n\nclass OverdraftCalculator {\n    public double calculateOverdraftCharge(Account account) {\n        // Implementation of overdraft charge calculation\n        // Example logic:\n        if (account.getBalance() < 0) {\n            return Math.abs(account.getBalance()) * 0.1; // 10% charge\n        }\n        return 0;\n    }\n}\n```",
        "ContextCode": "```java\nclass Account {\n    double getOverdraftCharge() {\n        // Implementation of overdraft charge calculation\n    }\n}\n```",
        "RulesCode": "```java\nclass Account {\n    // The overdraftCharge method has been moved to the AccountType class\n}\n\nclass AccountType {\n    get overdraftCharge() {...}\n}\n```"
    },
    "FOWLER_EX_SPLIT VARIABLE": {
        "RefactMethod": "SPLIT VARIABLE",
        "BeforeRefact": "let temp = 2 * (height + width);\nconsole.log(temp);\ntemp = height * width;\nconsole.log(temp);",
        "AfterRefact": "const perimeter = 2 * (height + width);\nconsole.log(perimeter);\nconst area = height * width;\nconsole.log(area);",
        "ZeroShotCode": "```java\nint perimeter = 2 * (height + width);\nSystem.out.println(perimeter);\n\nint area = height * width;\nSystem.out.println(area);\n```",
        "InstrucCode": "```java\nint perimeter = 2 * (height + width);\nSystem.out.println(perimeter);\n\nint area = height * width;\nSystem.out.println(area);\n```",
        "ContextCode": "```java\nint perimeter = 2 * (height + width);\nSystem.out.println(perimeter);\n\nint area = height * width;\nSystem.out.println(area);\n```",
        "RulesCode": "```java\nint perimeter = 2 * (height + width);\nSystem.out.println(perimeter);\n\nint area = height * width;\nSystem.out.println(area);\n```"
    },
    "FOWLER_EX_REPLACE QUERY WITH PARAMETER": {
        "RefactMethod": "REPLACE QUERY WITH PARAMETER",
        "BeforeRefact": "targetTemperature(aPlan)\n\nfunction targetTemperature(aPlan) {\n    currentTemperature = thermostat.currentTemperature;\n    // rest of function...\n}",
        "AfterRefact": "targetTemperature(aPlan, thermostat.currentTemperature)\n\nfunction targetTemperature(aPlan, currentTemperature) {\n  // rest of function...\n}",
        "ZeroShotCode": "```java\npublic double targetTemperature(Plan aPlan, Thermostat thermostat) {\n    double currentTemperature = thermostat.getCurrentTemperature();\n    // rest of function...\n}\n```",
        "InstrucCode": "```java\nfunction targetTemperature(aPlan, currentTemperature) {\n    // rest of function...\n}\n```",
        "ContextCode": "```java\nint targetTemperature(Plan aPlan) {\n    int currentTemperature = thermostat.getCurrentTemperature();\n    // rest of function...\n}\n```"
    },
    "FOWLER_EX_INTRODUCE SPECIAL CASE": {
        "RefactMethod": "INTRODUCE SPECIAL CASE",
        "BeforeRefact": "if (aCustomer === \u201cunknown\u201d) customerName = \u201coccupant\u201d;",
        "AfterRefact": "class UnknownCustomer {\n    get name() {return \u201coccupant\u201d;}",
        "ZeroShotCode": "```java\nclass Customer {\n    private String name;\n\n    public Customer(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public static Customer unknownCustomer() {\n        return new Customer(\"occupant\");\n    }\n}\n\n// Usage\nCustomer aCustomer = ...; // Assume this is initialized somewhere\nString customerName = aCustomer.getName();\n```",
        "InstrucCode": "```java\nclass Customer {\n    private String name;\n\n    public Customer(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public boolean isUnknown() {\n        return false;\n    }\n}\n\nclass UnknownCustomer extends Customer {\n    public UnknownCustomer() {\n        super(\"occupant\");\n    }\n\n    @Override\n    public boolean isUnknown() {\n        return true;\n    }\n}\n\nclass CustomerFactory {\n    public static Customer createCustomer(String name) {\n        if (name == null || name.equals(\"unknown\")) {\n            return new UnknownCustomer();\n        }\n        return new Customer(name);\n    }\n}\n\n// Usage\nCustomer aCustomer = CustomerFactory.createCustomer(\"unknown\");\nString customerName = aCustomer.getName();\n```",
        "ContextCode": "```java\nif (\"unknown\".equals(aCustomer)) {\n    customerName = \"occupant\";\n}\n```",
        "RulesCode": "```java\nclass Customer {\n    private String name;\n\n    public Customer(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass NullCustomer extends Customer {\n    public NullCustomer() {\n        super(\"occupant\");\n    }\n}\n\n// Usage\nCustomer aCustomer = getCustomer(); // Assume getCustomer() returns a Customer object or null\nString customerName = (aCustomer != null) ? aCustomer.getName() : new NullCustomer().getName();\n```"
    },
    "FOWLER_EX_REMOVE DEAD CODE": {
        "RefactMethod": "REMOVE DEAD CODE",
        "BeforeRefact": "if(false) {\n  doSomethingThatUsedToMatter();\n}",
        "AfterRefact": "",
        "ZeroShotCode": "```java\n// The code block is removed as it is unreachable due to the condition being false.\n```",
        "InstrucCode": "```java\n// Final version after applying REMOVE DEAD CODE refactoring\n```",
        "ContextCode": "```java\n// The if(false) block is redundant and can be removed entirely\n```"
    },
    "FOWLER_EX_RENAME VARIABLE": {
        "RefactMethod": "RENAME VARIABLE",
        "BeforeRefact": "let a = height * width;",
        "AfterRefact": "let area = height * width;",
        "ZeroShotCode": "```java\nint area = height * width;\n```",
        "InstrucCode": "```java\nlet area = height * width;\n```",
        "ContextCode": "```java\nint area = height * width;\n```"
    },
    "FOWLER_EX_REPLACE TYPE CODE WITH SUBCLASSES": {
        "RefactMethod": "REPLACE TYPE CODE WITH SUBCLASSES",
        "BeforeRefact": "function createEmployee(name, type) {\n  return new Employee(name, type);\n}",
        "AfterRefact": "function createEmployee(name, type) {\n  switch (type) {\n    case \u201cengineer\u201d: return new Engineer(name);\n    case \u201csalesman\u201d: return new Salesman(name);\n    case \u201cmanager\u201d:  return new Manager (name);\n  }",
        "ZeroShotCode": "```java\nabstract class Employee {\n    protected String name;\n\n    protected Employee(String name) {\n        this.name = name;\n    }\n\n    public abstract String getType();\n}\n\nclass Engineer extends Employee {\n    public Engineer(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Engineer\";\n    }\n}\n\nclass Manager extends Employee {\n    public Manager(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Manager\";\n    }\n}\n\nclass Salesman extends Employee {\n    public Salesman(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Salesman\";\n    }\n}\n\nclass EmployeeFactory {\n    public static Employee createEmployee(String name, String type) {\n        switch (type) {\n            case \"Engineer\":\n                return new Engineer(name);\n            case \"Manager\":\n                return new Manager(name);\n            case \"Salesman\":\n                return new Salesman(name);\n            default:\n                throw new IllegalArgumentException(\"Invalid employee type\");\n        }\n    }\n}\n```",
        "InstrucCode": "```java\nabstract class Employee {\n    private String name;\n\n    protected Employee(String name) {\n        this.name = name;\n    }\n\n    public abstract int getType();\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass Engineer extends Employee {\n    public Engineer(String name) {\n        super(name);\n    }\n\n    @Override\n    public int getType() {\n        return EmployeeType.ENGINEER;\n    }\n}\n\nclass Manager extends Employee {\n    public Manager(String name) {\n        super(name);\n    }\n\n    @Override\n    public int getType() {\n        return EmployeeType.MANAGER;\n    }\n}\n\nclass Salesman extends Employee {\n    public Salesman(String name) {\n        super(name);\n    }\n\n    @Override\n    public int getType() {\n        return EmployeeType.SALESMAN;\n    }\n}\n\nclass EmployeeFactory {\n    public static Employee createEmployee(String name, int type) {\n        switch (type) {\n            case EmployeeType.ENGINEER:\n                return new Engineer(name);\n            case EmployeeType.MANAGER:\n                return new Manager(name);\n            case EmployeeType.SALESMAN:\n                return new Salesman(name);\n            default:\n                throw new IllegalArgumentException(\"Invalid employee type\");\n        }\n    }\n}\n\nclass EmployeeType {\n    public static final int ENGINEER = 0;\n    public static final int MANAGER = 1;\n    public static final int SALESMAN = 2;\n}\n```",
        "ContextCode": "```java\npublic Employee createEmployee(String name, String type) {\n    return new Employee(name, type);\n}\n```",
        "RulesCode": "```java\nabstract class Employee {\n    private String name;\n\n    protected Employee(String name) {\n        this.name = name;\n    }\n\n    public static Employee createEmployee(String name, String type) {\n        switch (type) {\n            case \"Engineer\":\n                return new Engineer(name);\n            case \"Manager\":\n                return new Manager(name);\n            default:\n                throw new IllegalArgumentException(\"Invalid employee type\");\n        }\n    }\n\n    public abstract String getType();\n}\n\nclass Engineer extends Employee {\n    public Engineer(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Engineer\";\n    }\n}\n\nclass Manager extends Employee {\n    public Manager(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Manager\";\n    }\n}\n```"
    },
    "FOWLER_EX_INLINE FUNCTION": {
        "RefactMethod": "INLINE FUNCTION",
        "BeforeRefact": "function getRating(driver) {\n  return moreThanFiveLateDeliveries(driver) ? 2 : 1;\n}\n\nfunction moreThanFiveLateDeliveries(driver) {\n  return driver.numberOfLateDeliveries > 5;\n}",
        "AfterRefact": "function getRating(driver) {\n  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;\n}",
        "ZeroShotCode": "```java\npublic int getRating(Driver driver) {\n    return driver.numberOfLateDeliveries > 5 ? 2 : 1;\n}\n```",
        "InstrucCode": "```java\npublic int getRating(Driver driver) {\n    return driver.numberOfLateDeliveries > 5 ? 2 : 1;\n}\n```",
        "ContextCode": "```java\npublic int getRating(Driver driver) {\n    return driver.getNumberOfLateDeliveries() > 5 ? 2 : 1;\n}\n```",
        "RulesCode": "```java\npublic int getRating(Driver driver) {\n    return driver.numberOfLateDeliveries > 5 ? 2 : 1;\n}\n```"
    },
    "FOWLER_EX_COMBINE FUNCTIONS INTO CLASS": {
        "RefactMethod": "COMBINE FUNCTIONS INTO CLASS",
        "BeforeRefact": "function base(aReading) {...}\nfunction taxableCharge(aReading) {...}\nfunction calculateBaseCharge(aReading) {...}",
        "AfterRefact": "class Reading {\n  base() {...}\n  taxableCharge() {...}\n  calculateBaseCharge() {...}\n}",
        "ZeroShotCode": "```java\nclass Reading {\n    private double value;\n\n    public Reading(double value) {\n        this.value = value;\n    }\n\n    public double base() {\n        // Implementation of base function\n        return value * 0.1; // Example calculation\n    }\n\n    public double taxableCharge() {\n        // Implementation of taxableCharge function\n        return Math.max(0, base() - 10); // Example calculation\n    }\n\n    public double calculateBaseCharge() {\n        // Implementation of calculateBaseCharge function\n        return base() * 1.2; // Example calculation\n    }\n}\n```",
        "InstrucCode": "```java\nclass Reading {\n    private int value;\n\n    public Reading(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public double base() {\n        // Implementation of base logic\n        return value * 0.1; // Example calculation\n    }\n\n    public double taxableCharge() {\n        // Implementation of taxableCharge logic\n        return Math.max(0, base() - 10); // Example calculation\n    }\n\n    public double calculateBaseCharge() {\n        // Implementation of calculateBaseCharge logic\n        return base() * 1.2; // Example calculation\n    }\n}\n```",
        "ContextCode": "```java\nclass Reading {\n    private int value;\n\n    public Reading(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\nclass ChargeCalculator {\n    public int base(Reading aReading) {\n        // Implementation for base calculation\n        return aReading.getValue() * 2;\n    }\n\n    public int taxableCharge(Reading aReading) {\n        // Implementation for taxable charge calculation\n        return Math.max(0, base(aReading) - 100);\n    }\n\n    public int calculateBaseCharge(Reading aReading) {\n        // Implementation for base charge calculation\n        return base(aReading) + 50;\n    }\n}\n```"
    },
    "FOWLER_EX_MOVE FIELD": {
        "RefactMethod": "MOVE FIELD",
        "BeforeRefact": "class Customer {\n  get plan() {return this._plan;}\n  get discountRate() {return this._discountRate;}",
        "AfterRefact": "class Customer {\n  get plan() {return this._plan;}\n  get discountRate() {return this.plan.discountRate;}",
        "ZeroShotCode": "```java\nclass Customer {\n  private Plan plan;\n\n  Customer(Plan plan) {\n    this.plan = plan;\n  }\n\n  get plan() {\n    return this.plan;\n  }\n\n  get discountRate() {\n    return this.plan.getDiscountRate();\n  }\n}\n\nclass Plan {\n  private double discountRate;\n\n  Plan(double discountRate) {\n    this.discountRate = discountRate;\n  }\n\n  double getDiscountRate() {\n    return this.discountRate;\n  }\n}\n```",
        "InstrucCode": "```java\nclass Customer {\n  private Plan plan;\n\n  Customer(Plan plan) {\n    this.plan = plan;\n  }\n\n  Plan getPlan() {\n    return this.plan;\n  }\n\n  double getDiscountRate() {\n    return this.plan.getDiscountRate();\n  }\n}\n\nclass Plan {\n  private double discountRate;\n\n  Plan(double discountRate) {\n    this.discountRate = discountRate;\n  }\n\n  double getDiscountRate() {\n    return this.discountRate;\n  }\n\n  void setDiscountRate(double discountRate) {\n    this.discountRate = discountRate;\n  }\n}\n```",
        "ContextCode": "```java\nclass Customer {\n    private Plan plan;\n    private double discountRate;\n\n    public Plan getPlan() {\n        return plan;\n    }\n\n    public double getDiscountRate() {\n        return discountRate;\n    }\n}\n```",
        "RulesCode": "```java\nclass Customer {\n  private Plan _plan;\n\n  get plan() { return this._plan; }\n  get discountRate() { return this._plan.getDiscountRate(); }\n}\n\nclass Plan {\n  private double _discountRate;\n\n  get discountRate() { return this._discountRate; }\n  set discountRate(double discountRate) { this._discountRate = discountRate; }\n}\n```"
    },
    "FOWLER_EX_REPLACE TEMP WITH QUERY": {
        "RefactMethod": "REPLACE TEMP WITH QUERY",
        "BeforeRefact": "const basePrice = this._quantity * this._itemPrice;\nif (basePrice > 1000)\n  return basePrice * 0.95;\nelse\n  return basePrice * 0.98;",
        "AfterRefact": "get basePrice() {this._quantity * this._itemPrice;}\n\n// ...\n\nif (this.basePrice > 1000)\n  return this.basePrice * 0.95;\nelse\n  return this.basePrice * 0.98;",
        "ZeroShotCode": "```java\nif (getBasePrice() > 1000)\n    return getBasePrice() * 0.95;\nelse\n    return getBasePrice() * 0.98;\n\nprivate double getBasePrice() {\n    return this._quantity * this._itemPrice;\n}\n```",
        "InstrucCode": "```java\npublic double calculatePrice() {\n    if (getBasePrice() > 1000)\n        return getBasePrice() * 0.95;\n    else\n        return getBasePrice() * 0.98;\n}\n\nprivate double getBasePrice() {\n    return this._quantity * this._itemPrice;\n}\n```",
        "ContextCode": "```java\ndouble calculatePrice() {\n    double basePrice = this._quantity * this._itemPrice;\n    double discountRate = (basePrice > 1000) ? 0.95 : 0.98;\n    return basePrice * discountRate;\n}\n```",
        "RulesCode": "```java\npublic double calculatePrice() {\n    if (getBasePrice() > 1000)\n        return getBasePrice() * 0.95;\n    else\n        return getBasePrice() * 0.98;\n}\n\nprivate double getBasePrice() {\n    return this._quantity * this._itemPrice;\n}\n```"
    },
    "FOWLER_EX_CHANGE VALUE TO REFERENCE": {
        "RefactMethod": "CHANGE VALUE TO REFERENCE",
        "BeforeRefact": "let customer = new Customer(customerData);",
        "AfterRefact": "let customer = customerRepository.get(customerData.id);",
        "ZeroShotCode": "```java\nCustomer customer = Customer.getCustomer(customerData.getId());\n```",
        "InstrucCode": "```java\n// Assuming CustomerRepository is a class that manages Customer instances\nCustomerRepository customerRepository = new CustomerRepository();\n\n// Look up the customer instance using the repository\nCustomer customer = customerRepository.findCustomerById(customerData.getId());\n```",
        "ContextCode": "```java\nCustomer customer = new Customer(customerData);\n```",
        "RulesCode": "```java\nCustomer customer = Customer.getOrCreate(customerData);\n```"
    },
    "FOWLER_EX_MOVE STATEMENTS INTO FUNCTION": {
        "RefactMethod": "MOVE STATEMENTS INTO FUNCTION",
        "BeforeRefact": "result.push(`<p>title: ${person.photo.title}</p>`);\nresult.concat(photoData(person.photo));\n\nfunction photoData(aPhoto) {\n  return [\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}",
        "AfterRefact": "result.concat(photoData(person.photo));\n\nfunction photoData(aPhoto) {\n  return [\n    `<p>title: ${aPhoto.title}</p>`,\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}",
        "ZeroShotCode": "```java\npublic String generatePhotoInfo(Photo photo) {\n    return String.format(\"<p>title: %s</p>\", photo.getTitle()) + \n           String.join(\"\", photoData(photo));\n}\n\npublic List<String> photoData(Photo photo) {\n    return Arrays.asList(\n        String.format(\"<p>location: %s</p>\", photo.getLocation()),\n        String.format(\"<p>date: %s</p>\", photo.getDate().toDateString())\n    );\n}\n```",
        "InstrucCode": "```java\nresult.push(renderPhotoData(person.photo));\n\nfunction renderPhotoData(aPhoto) {\n  return [\n    `<p>title: ${aPhoto.title}</p>`,\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}\n```",
        "ContextCode": "```java\nresult.push(String.format(\"<p>title: %s</p>\", person.photo.title));\nresult.addAll(photoData(person.photo));\n\nprivate List<String> photoData(Photo photo) {\n    return Arrays.asList(\n        String.format(\"<p>location: %s</p>\", photo.location),\n        String.format(\"<p>date: %s</p>\", photo.date.toDateString())\n    );\n}\n```"
    },
    "FOWLER_EX_SEPARATE QUERY FROM MODIFIER": {
        "RefactMethod": "SEPARATE QUERY FROM MODIFIER",
        "BeforeRefact": "function getTotalOutstandingAndSendBill() {\n  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);\n  sendBill();\n  return result;\n}",
        "AfterRefact": "function totalOutstanding() {\n  return customer.invoices.reduce((total, each) => each.amount + total, 0);  \n}\nfunction sendBill() {\n  emailGateway.send(formatBill(customer));\n}",
        "ZeroShotCode": "```java\npublic double getTotalOutstanding() {\n    return customer.getInvoices().stream().mapToDouble(Invoice::getAmount).sum();\n}\n\npublic void sendBill() {\n    // Logic to send the bill\n}\n\npublic double getTotalOutstandingAndSendBill() {\n    double totalOutstanding = getTotalOutstanding();\n    sendBill();\n    return totalOutstanding;\n}\n```",
        "InstrucCode": "```java\npublic double getTotalOutstanding() {\n    return customer.invoices.stream().mapToDouble(invoice -> invoice.amount).sum();\n}\n\npublic void sendBill() {\n    // Logic to send the bill\n}\n\npublic void getTotalOutstandingAndSendBill() {\n    double totalOutstanding = getTotalOutstanding();\n    sendBill();\n}\n```",
        "ContextCode": "```java\npublic double calculateTotalOutstandingAndSendBill(Customer customer) {\n    double totalOutstanding = customer.getInvoices().stream()\n        .mapToDouble(Invoice::getAmount)\n        .sum();\n    sendBill();\n    return totalOutstanding;\n}\n```",
        "RulesCode": "```java\npublic double getTotalOutstanding() {\n    return customer.invoices.stream().mapToDouble(invoice -> invoice.amount).sum();\n}\n\npublic void sendBill() {\n    // Logic to send the bill\n}\n\npublic void getTotalOutstandingAndSendBill() {\n    double totalOutstanding = getTotalOutstanding();\n    sendBill();\n}\n```"
    },
    "FOWLER_EX_HIDE DELEGATE": {
        "RefactMethod": "HIDE DELEGATE",
        "BeforeRefact": "manager = aPerson.department.manager;",
        "AfterRefact": "manager = aPerson.manager;\n\nclass Person {\n  get manager() {return this.department.manager;}",
        "ZeroShotCode": "```java\nmanager = aPerson.getManager();\n```",
        "InstrucCode": "```java\n// In the Person class\npublic Manager getManager() {\n    return department.getManager();\n}\n\n// Client code\nmanager = aPerson.getManager();\n```",
        "ContextCode": "```java\nmanager = aPerson.getDepartment().getManager();\n```",
        "RulesCode": "```java\nmanager = aPerson.getManager();\n```"
    },
    "FOWLER_EX_PULL UP METHOD": {
        "RefactMethod": "PULL UP METHOD",
        "BeforeRefact": "class Employee {...}\n\nclass Salesman extends Employee {\n  get name() {...}\n}\n\nclass Engineer extends Employee {\n  get name() {...}\n}",
        "AfterRefact": "class Employee {\n  get name() {...}\n}\n\nclass Salesman extends Employee {...}\nclass Engineer extends Employee {...}",
        "ZeroShotCode": "```java\nclass Employee {\n  get name() {...}\n}\n\nclass Salesman extends Employee {\n  // name method is now inherited from Employee\n}\n\nclass Engineer extends Employee {\n  // name method is now inherited from Employee\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n  String get name() {\n    // Implementation of the name method\n  }\n}\n\nclass Salesman extends Employee {\n  // The name method is now inherited from Employee\n}\n\nclass Engineer extends Employee {\n  // The name method is now inherited from Employee\n}\n```",
        "ContextCode": "```java\nclass Employee {\n    private String name;\n\n    public Employee(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass Salesman extends Employee {\n    public Salesman(String name) {\n        super(name);\n    }\n}\n\nclass Engineer extends Employee {\n    public Engineer(String name) {\n        super(name);\n    }\n}\n```",
        "RulesCode": "```java\nclass Employee {\n  get name() {...}\n}\n\nclass Salesman extends Employee {\n}\n\nclass Engineer extends Employee {\n}\n```"
    },
    "FOWLER_EX_SLIDE STATEMENTS": {
        "RefactMethod": "SLIDE STATEMENTS",
        "BeforeRefact": "const pricingPlan = retrievePricingPlan();\nconst order = retreiveOrder();\nlet charge;\nconst chargePerUnit = pricingPlan.unit;",
        "AfterRefact": "const pricingPlan = retrievePricingPlan();\nconst chargePerUnit = pricingPlan.unit;\nconst order = retreiveOrder();\nlet charge;",
        "ZeroShotCode": "```java\nPricingPlan pricingPlan = retrievePricingPlan();\nOrder order = retrieveOrder();\nint chargePerUnit = pricingPlan.getUnit();\nint charge;\n```",
        "InstrucCode": "```java\nconst pricingPlan = retrievePricingPlan();\nconst chargePerUnit = pricingPlan.unit;\nconst order = retrieveOrder();\nlet charge;\n```",
        "ContextCode": "```java\nPricingPlan pricingPlan = retrievePricingPlan();\nOrder order = retrieveOrder();\ndouble chargePerUnit = pricingPlan.getUnit();\n```",
        "RulesCode": "```java\nconst pricingPlan = retrievePricingPlan();\nconst chargePerUnit = pricingPlan.unit;\nconst order = retrieveOrder();\nlet charge;\n```"
    },
    "FOWLER_EX_EXTRACT CLASS": {
        "RefactMethod": "EXTRACT CLASS",
        "BeforeRefact": "class Person {\n  get officeAreaCode() {return this._officeAreaCode;}\n  get officeNumber()   {return this._officeNumber;}",
        "AfterRefact": "class Person {\n  get officeAreaCode() {return this._telephoneNumber.areaCode;}\n  get officeNumber()   {return this._telephoneNumber.number;}\n}\nclass TelephoneNumber {\n  get areaCode() {return this._areaCode;}\n  get number()   {return this._number;}\n}",
        "ZeroShotCode": "```java\nclass Person {\n  private TelephoneNumber _telephoneNumber;\n\n  public Person() {\n    this._telephoneNumber = new TelephoneNumber();\n  }\n\n  public String getOfficeAreaCode() {\n    return _telephoneNumber.getAreaCode();\n  }\n\n  public String getOfficeNumber() {\n    return _telephoneNumber.getNumber();\n  }\n}\n\nclass TelephoneNumber {\n  private String _areaCode;\n  private String _number;\n\n  public String getAreaCode() {\n    return _areaCode;\n  }\n\n  public String getNumber() {\n    return _number;\n  }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n  private Office office;\n\n  public Person(String areaCode, String number) {\n    this.office = new Office(areaCode, number);\n  }\n\n  public String getOfficeAreaCode() {\n    return office.getAreaCode();\n  }\n\n  public String getOfficeNumber() {\n    return office.getNumber();\n  }\n}\n\nclass Office {\n  private String areaCode;\n  private String number;\n\n  public Office(String areaCode, String number) {\n    this.areaCode = areaCode;\n    this.number = number;\n  }\n\n  public String getAreaCode() {\n    return areaCode;\n  }\n\n  public String getNumber() {\n    return number;\n  }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private String officeAreaCode;\n    private String officeNumber;\n\n    public String getOfficeAreaCode() {\n        return officeAreaCode;\n    }\n\n    public String getOfficeNumber() {\n        return officeNumber;\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n  private TelephoneNumber _telephoneNumber;\n\n  Person() {\n    this._telephoneNumber = new TelephoneNumber();\n  }\n\n  get officeAreaCode() {\n    return this._telephoneNumber.getAreaCode();\n  }\n\n  get officeNumber() {\n    return this._telephoneNumber.getNumber();\n  }\n}\n\nclass TelephoneNumber {\n  private String _areaCode;\n  private String _number;\n\n  getAreaCode() {\n    return this._areaCode;\n  }\n\n  getNumber() {\n    return this._number;\n  }\n}\n```"
    },
    "FOWLER_EX_CONSOLIDATE CONDITIONAL EXPRESSION": {
        "RefactMethod": "CONSOLIDATE CONDITIONAL EXPRESSION",
        "BeforeRefact": "if (anEmployee.seniority < 2) return 0;\nif (anEmployee.monthsDisabled > 12) return 0;\nif (anEmployee.isPartTime) return 0;",
        "AfterRefact": "if (isNotEligibleForDisability()) return 0;\n\nfunction isNotEligibleForDisability() {\nreturn ((anEmployee.seniority < 2)\n        || (anEmployee.monthsDisabled > 12)\n        || (anEmployee.isPartTime));\n}",
        "ZeroShotCode": "```java\nif (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {\n    return 0;\n}\n```",
        "InstrucCode": "```java\nif (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {\n    return 0;\n}\n```",
        "ContextCode": "```java\nif (isEligibleForBenefit(anEmployee)) {\n    return 0;\n}\n\nprivate boolean isEligibleForBenefit(Employee anEmployee) {\n    return anEmployee.seniority < 2 || \n           anEmployee.monthsDisabled > 12 || \n           anEmployee.isPartTime;\n}\n```",
        "RulesCode": "```java\nif (isEligibleForZero(anEmployee)) return 0;\n\n// Helper method\nprivate boolean isEligibleForZero(Employee anEmployee) {\n    return anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime;\n}\n```"
    },
    "FOWLER_EX_PULL UP CONSTRUCTOR BODY": {
        "RefactMethod": "PULL UP CONSTRUCTOR BODY",
        "BeforeRefact": "class Party {...}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super();\n    this._id = id;\n    this._name = name;\n    this._monthlyCost = monthlyCost;\n  }\n}",
        "AfterRefact": "class Party {\n  constructor(name){\n    this._name = name;\n  }\n}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super(name);\n    this._id = id;\n    this._monthlyCost = monthlyCost;\n  }\n}",
        "ZeroShotCode": "```java\nclass Party {\n  constructor(name) {\n    this._name = name;\n  }\n}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super(name);\n    this._id = id;\n    this._monthlyCost = monthlyCost;\n  }\n}\n```",
        "InstrucCode": "```java\nclass Party {\n  constructor(name) {\n    this._name = name;\n  }\n}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super(name);\n    this._id = id;\n    this._monthlyCost = monthlyCost;\n  }\n}\n```",
        "ContextCode": "```java\nclass Party {\n}\n\nclass Employee extends Party {\n    private String name;\n    private String id;\n    private double monthlyCost;\n\n    public Employee(String name, String id, double monthlyCost) {\n        super();\n        this.name = name;\n        this.id = id;\n        this.monthlyCost = monthlyCost;\n    }\n}\n```",
        "RulesCode": "```java\nclass Party {\n  constructor(name) {\n    this._name = name;\n  }\n}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super(name);\n    this._id = id;\n    this._monthlyCost = monthlyCost;\n  }\n}\n```"
    },
    "FOWLER_EX_REPLACE CONSTRUCTOR WITH FACTORY FUNCTION": {
        "RefactMethod": "REPLACE CONSTRUCTOR WITH FACTORY FUNCTION",
        "BeforeRefact": "leadEngineer = new Employee(document.leadEngineer, 'E');",
        "AfterRefact": "leadEngineer = createEngineer(document.leadEngineer);",
        "ZeroShotCode": "```java\nleadEngineer = Employee.createEmployee(document.leadEngineer, 'E');\n```",
        "InstrucCode": "```java\n// Factory function\npublic static Employee createLeadEngineer(Document document) {\n    return new Employee(document.leadEngineer, 'E');\n}\n\n// Usage\nleadEngineer = createLeadEngineer(document);\n```",
        "ContextCode": "```java\nleadEngineer = new Employee(document.getLeadEngineer(), EmployeeType.ENGINEER);\n```",
        "RulesCode": "```java\n// Factory method\npublic static Employee createLeadEngineer(Document document) {\n    return new Employee(document.leadEngineer, 'E');\n}\n\n// Usage\nleadEngineer = Employee.createLeadEngineer(document);\n```"
    },
    "FOWLER_EX_REMOVE SUBCLASS": {
        "RefactMethod": "REMOVE SUBCLASS",
        "BeforeRefact": "class Person {\n  get genderCode() {return \u201cX\u201d;}\n}\nclass Male extends Person {\n  get genderCode() {return \u201cM\u201d;}\n}\nclass Female extends Person {\n  get genderCode() {return \u201cF\u201d;}\n}",
        "AfterRefact": "class Person {\n  get genderCode() {return this._genderCode;}\n}",
        "ZeroShotCode": "```java\nclass Person {\n    private String genderCode;\n\n    public Person(String genderCode) {\n        this.genderCode = genderCode;\n    }\n\n    public String getGenderCode() {\n        return genderCode;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n    private String genderCode;\n\n    private Person(String genderCode) {\n        this.genderCode = genderCode;\n    }\n\n    public static Person createMale() {\n        return new Person(\"M\");\n    }\n\n    public static Person createFemale() {\n        return new Person(\"F\");\n    }\n\n    public static Person createDefault() {\n        return new Person(\"X\");\n    }\n\n    public String getGenderCode() {\n        return genderCode;\n    }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    String getGenderCode() {\n        return \"X\";\n    }\n}\n\nclass Male extends Person {\n    @Override\n    String getGenderCode() {\n        return \"M\";\n    }\n}\n\nclass Female extends Person {\n    @Override\n    String getGenderCode() {\n        return \"F\";\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n    private final String genderCode;\n\n    private Person(String genderCode) {\n        this.genderCode = genderCode;\n    }\n\n    public static Person createMale() {\n        return new Person(\"M\");\n    }\n\n    public static Person createFemale() {\n        return new Person(\"F\");\n    }\n\n    public String getGenderCode() {\n        return genderCode;\n    }\n}\n```"
    },
    "FOWLER_EX_INTRODUCE PARAMETER OBJECT": {
        "RefactMethod": "INTRODUCE PARAMETER OBJECT",
        "BeforeRefact": "function amountInvoiced(startDate, endDate) {...}\nfunction amountReceived(startDate, endDate) {...}\nfunction amountOverdue(startDate, endDate) {...}",
        "AfterRefact": "function amountInvoiced(aDateRange) {...}\nfunction amountReceived(aDateRange) {...}\nfunction amountOverdue(aDateRange) {...}",
        "ZeroShotCode": "```java\nclass DateRange {\n    private final Date startDate;\n    private final Date endDate;\n\n    public DateRange(Date startDate, Date endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n}\n\nclass Invoice {\n    public double amountInvoiced(DateRange dateRange) {\n        // Implementation\n    }\n\n    public double amountReceived(DateRange dateRange) {\n        // Implementation\n    }\n\n    public double amountOverdue(DateRange dateRange) {\n        // Implementation\n    }\n}\n```",
        "InstrucCode": "```java\nclass DateRange {\n    private final Date startDate;\n    private final Date endDate;\n\n    public DateRange(Date startDate, Date endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n}\n\nclass Invoice {\n    public double amountInvoiced(DateRange dateRange) {\n        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()\n    }\n\n    public double amountReceived(DateRange dateRange) {\n        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()\n    }\n\n    public double amountOverdue(DateRange dateRange) {\n        // Implementation using dateRange.getStartDate() and dateRange.getEndDate()\n    }\n}\n```",
        "ContextCode": "```java\npublic class InvoiceCalculator {\n\n    public double amountInvoiced(Date startDate, Date endDate) {\n        // Implementation for calculating invoiced amount\n    }\n\n    public double amountReceived(Date startDate, Date endDate) {\n        // Implementation for calculating received amount\n    }\n\n    public double amountOverdue(Date startDate, Date endDate) {\n        // Implementation for calculating overdue amount\n    }\n}\n```",
        "RulesCode": "```java\nclass DateRange {\n    private Date startDate;\n    private Date endDate;\n\n    public DateRange(Date startDate, Date endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n}\n\nclass Invoice {\n    public double amountInvoiced(DateRange dateRange) {\n        // Implementation\n    }\n\n    public double amountReceived(DateRange dateRange) {\n        // Implementation\n    }\n\n    public double amountOverdue(DateRange dateRange) {\n        // Implementation\n    }\n}\n```"
    },
    "FOWLER_EX_SPLIT LOOP": {
        "RefactMethod": "SPLIT LOOP",
        "BeforeRefact": "let averageAge = 0;\nlet totalSalary = 0;\nfor (const p of people) {\n    averageAge += p.age;\n    totalSalary += p.salary;\n}\naverageAge = averageAge / people.length;",
        "AfterRefact": "let totalSalary = 0;\nfor (const p of people) {\n    totalSalary += p.salary;\n}\n\nlet averageAge = 0;\nfor (const p of people) {\n    averageAge += p.age;\n}\naverageAge = averageAge / people.length;",
        "ZeroShotCode": "```java\nint totalAge = 0;\nfor (Person p : people) {\n    totalAge += p.age;\n}\ndouble averageAge = (double) totalAge / people.length;\n\nint totalSalary = 0;\nfor (Person p : people) {\n    totalSalary += p.salary;\n}\n```",
        "InstrucCode": "```java\nint totalAge = 0;\nfor (Person p : people) {\n    totalAge += p.getAge();\n}\ndouble averageAge = (double) totalAge / people.length;\n\nint totalSalary = 0;\nfor (Person p : people) {\n    totalSalary += p.getSalary();\n}\n```",
        "ContextCode": "```java\ndouble averageAge = people.stream().mapToDouble(p -> p.age).average().orElse(0);\nint totalSalary = people.stream().mapToInt(p -> p.salary).sum();\n```"
    },
    "FOWLER_EX_REPLACE PRIMITIVE WITH OBJECT": {
        "RefactMethod": "REPLACE PRIMITIVE WITH OBJECT",
        "BeforeRefact": "orders.filter(o => \u201chigh\u201d === o.priority\n                || \u201crush\u201d === o.priority);  ",
        "AfterRefact": "orders.filter(o => o.priority.higherThan(new Priority(\u201cnormal\u201d)))",
        "ZeroShotCode": "```java\norders.stream()\n      .filter(o -> Priority.HIGH.equals(o.getPriority())\n                || Priority.RUSH.equals(o.getPriority()));\n```",
        "InstrucCode": "```java\nclass Priority {\n    private String value;\n\n    public Priority(String value) {\n        this.value = value;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}\n\norders.stream()\n      .filter(o -> \"high\".equals(o.getPriority().getValue()) \n      .filter(o -> \"rush\".equals(o.getPriority().getValue()));\n```",
        "ContextCode": "```java\norders.stream()\n      .filter(o -> \"high\".equals(o.getPriority()) || \"rush\".equals(o.getPriority()))\n      .collect(Collectors.toList());\n```",
        "RulesCode": "```java\norders.stream()\n      .filter(o -> Priority.HIGH.equals(o.getPriority()) \n      || Priority.RUSH.equals(o.getPriority()));\n```"
    },
    "FOWLER_EX_MOVE STATEMENTS TO CALLERS": {
        "RefactMethod": "MOVE STATEMENTS TO CALLERS",
        "BeforeRefact": "emitPhotoData(outStream, person.photo);\n\nfunction emitPhotoData(outStream, photo) {\n  outStream.write(`<p>title: ${photo.title}</p>\\n`);\n  outStream.write(`<p>location: ${photo.location}</p>\\n`);\n}",
        "AfterRefact": "emitPhotoData(outStream, person.photo);\noutStream.write(`<p>location: ${person.photo.location}</p>\\n`);\n\nfunction emitPhotoData(outStream, photo) {\n  outStream.write(`<p>title: ${photo.title}</p>\\n`);\n}",
        "ZeroShotCode": "```java\noutStream.write(`<p>title: ${person.photo.title}</p>\\n`);\noutStream.write(`<p>location: ${person.photo.location}</p>\\n`);\n```",
        "InstrucCode": "```java\noutStream.write(\"<p>title: \" + person.photo.title + \"</p>\\n\");\noutStream.write(\"<p>location: \" + person.photo.location + \"</p>\\n\");\n```",
        "ContextCode": "```java\nemitPhotoData(outStream, person.getPhoto());\n\nprivate void emitPhotoData(OutputStream outStream, Photo photo) throws IOException {\n    outStream.write(String.format(\"<p>title: %s</p>\\n\", photo.getTitle()).getBytes());\n    outStream.write(String.format(\"<p>location: %s</p>\\n\", photo.getLocation()).getBytes());\n}\n```"
    },
    "FOWLER_EX_INLINE CLASS": {
        "RefactMethod": "INLINE CLASS",
        "BeforeRefact": "class Person {\n  get officeAreaCode() {return this._telephoneNumber.areaCode;}\n  get officeNumber()   {return this._telephoneNumber.number;}\n}\nclass TelephoneNumber {\n  get areaCode() {return this._areaCode;}\n  get number()   {return this._number;}\n}",
        "AfterRefact": "class Person {\n  get officeAreaCode() {return this._officeAreaCode;}\n  get officeNumber()   {return this._officeNumber;}",
        "ZeroShotCode": "```java\nclass Person {\n  private String _areaCode;\n  private String _number;\n\n  String getOfficeAreaCode() {\n    return this._areaCode;\n  }\n\n  String getOfficeNumber() {\n    return this._number;\n  }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n  private String _areaCode;\n  private String _number;\n\n  String getOfficeAreaCode() {\n    return this._areaCode;\n  }\n\n  String getOfficeNumber() {\n    return this._number;\n  }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private TelephoneNumber telephoneNumber;\n\n    public String getOfficeAreaCode() {\n        return telephoneNumber.getAreaCode();\n    }\n\n    public String getOfficeNumber() {\n        return telephoneNumber.getNumber();\n    }\n}\n\nclass TelephoneNumber {\n    private String areaCode;\n    private String number;\n\n    public String getAreaCode() {\n        return areaCode;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n  get officeAreaCode() {return this._areaCode;}\n  get officeNumber()   {return this._number;}\n}\n```"
    },
    "FOWLER_EX_REMOVE MIDDLE MAN": {
        "RefactMethod": "REMOVE MIDDLE MAN",
        "BeforeRefact": "manager = aPerson.manager;\n\nclass Person {\n  get manager() {return this.department.manager;}",
        "AfterRefact": "manager = aPerson.department.manager;",
        "ZeroShotCode": "```java\nmanager = aPerson.getDepartment().getManager();\n\nclass Person {\n  private Department department;\n\n  public Department getDepartment() {\n    return this.department;\n  }\n}\n\nclass Department {\n  private Manager manager;\n\n  public Manager getManager() {\n    return this.manager;\n  }\n}\n```",
        "InstrucCode": "```java\nmanager = aPerson.getDepartment().getManager();\n\nclass Person {\n  private Department department;\n\n  public Department getDepartment() {\n    return this.department;\n  }\n}\n\nclass Department {\n  private Manager manager;\n\n  public Manager getManager() {\n    return this.manager;\n  }\n}\n```",
        "ContextCode": "```java\nmanager = aPerson.getManager();\n\nclass Person {\n    public Manager getManager() {\n        return this.department.getManager();\n    }\n}\n```",
        "RulesCode": "```java\nmanager = aPerson.department.manager;\n\nclass Person {\n  // The get manager() method is removed as it was acting as a middle man.\n}\n```"
    },
    "FOWLER_EX_REPLACE FUNCTION WITH COMMAND": {
        "RefactMethod": "REPLACE FUNCTION WITH COMMAND",
        "BeforeRefact": "function score(candidate, medicalExam, scoringGuide) {\n    let result = 0;\n    let healthLevel = 0;\n// long body code\n}",
        "AfterRefact": "class Scorer {\n  constructor(candidate, medicalExam, scoringGuide) {\n    this._candidate = candidate;\n    this._medicalExam = medicalExam;\n    this._scoringGuide = scoringGuide;\n  }\n\n  execute() {\n    this._result = 0;\n    this._healthLevel = 0;\n    // long body code\n  }\n}",
        "ZeroShotCode": "```java\nclass ScoreCommand {\n    private Candidate candidate;\n    private MedicalExam medicalExam;\n    private ScoringGuide scoringGuide;\n    private int result;\n    private int healthLevel;\n\n    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n        this.candidate = candidate;\n        this.medicalExam = medicalExam;\n        this.scoringGuide = scoringGuide;\n        this.result = 0;\n        this.healthLevel = 0;\n    }\n\n    public void execute() {\n        // long body code\n    }\n\n    public int getResult() {\n        return result;\n    }\n\n    public int getHealthLevel() {\n        return healthLevel;\n    }\n}\n```",
        "InstrucCode": "```java\npublic class ScoreCommand {\n    private Candidate candidate;\n    private MedicalExam medicalExam;\n    private ScoringGuide scoringGuide;\n\n    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n        this.candidate = candidate;\n        this.medicalExam = medicalExam;\n        this.scoringGuide = scoringGuide;\n    }\n\n    public int execute() {\n        int result = 0;\n        int healthLevel = 0;\n        // long body code\n        return result;\n    }\n}\n\n// Original function as a forwarding function\npublic int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n    return new ScoreCommand(candidate, medicalExam, scoringGuide).execute();\n}\n```",
        "ContextCode": "```java\npublic int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n    int result = 0;\n    int healthLevel = 0;\n    // Refactored long body code\n}\n```",
        "RulesCode": "```java\nclass ScoreCommand {\n    private Candidate candidate;\n    private MedicalExam medicalExam;\n    private ScoringGuide scoringGuide;\n    private int result;\n    private int healthLevel;\n\n    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n        this.candidate = candidate;\n        this.medicalExam = medicalExam;\n        this.scoringGuide = scoringGuide;\n        this.result = 0;\n        this.healthLevel = 0;\n    }\n\n    public int execute() {\n        // long body code\n        return result;\n    }\n}\n\n// Usage\nScoreCommand scoreCommand = new ScoreCommand(candidate, medicalExam, scoringGuide);\nint result = scoreCommand.execute();\n```"
    }
}