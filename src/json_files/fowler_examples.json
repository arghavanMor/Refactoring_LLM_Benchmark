{
    "PULL UP FIELD": {
        "BeforeRefact": "class Employee {...} // Java\n\nclass Salesman extends Employee {\n  private String name;\n}\n\nclass Engineer extends Employee {\n  private String name;\n}",
        "AfterRefact": "class Employee {\n  protected String name;\n}\n\nclass Salesman extends Employee {...}\nclass Engineer extends Employee {...}"
    },
    "PRESERVE WHOLE OBJECT": {
        "BeforeRefact": "const low = aRoom.daysTempRange.low;\nconst high = aRoom.daysTempRange.high;\nif (aPlan.withinRange(low, high))",
        "AfterRefact": "if (aPlan.withinRange(aRoom.daysTempRange))"
    },
    "SPLIT PHASE": {
        "BeforeRefact": "const orderData = orderString.split(/\\s+/);\nconst productPrice = priceList[orderData[0].split(\u201c-\u201d)[1]];\nconst orderPrice = parseInt(orderData[1]) * productPrice;",
        "AfterRefact": "const orderRecord = parseOrder(order);\nconst orderPrice = price(orderRecord, priceList);\n\nfunction parseOrder(aString) {\n  const values =  aString.split(/\\s+/);\n  return ({\n    productID: values[0].split(\u201c-\u201d)[1],\n    quantity: parseInt(values[1]),\n  });\n}\nfunction price(order, priceList) {\n  return order.quantity * priceList[order.productID];\n}"
    },
    "COLLAPSE HIERARCHY": {
        "BeforeRefact": "class Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}"
    },
    "REPLACE SUBCLASS WITH DELEGATE": {
        "BeforeRefact": "class Order {\n  get daysToShip() {\n    return this._warehouse.daysToShip;\n  }\n}\n\nclass PriorityOrder extends Order {\n  get daysToShip() {\n    return this._priorityPlan.daysToShip;\n  }\n}",
        "AfterRefact": "class Order {\n  get daysToShip() {\n    return (this._priorityDelegate)\n      ? this._priorityDelegate.daysToShip\n      : this._warehouse.daysToShip;\n  }\n}\n\nclass PriorityOrderDelegate {\n  get daysToShip() {\n    return this._priorityPlan.daysToShip\n  }\n}"
    },
    "CHANGE REFERENCE TO VALUE": {
        "BeforeRefact": "class Product {\n  applyDiscount(arg) {this._price.amount -= arg;}",
        "AfterRefact": "class Product {\n  applyDiscount(arg) {\n    this._price = new Money(this._price.amount - arg, this._price.currency);\n  }"
    },
    "ENCAPSULATE RECORD": {
        "BeforeRefact": "organization = {name: \u201cAcme Gooseberries\u201d, country: \u201cGB\u201d};",
        "AfterRefact": "class Organization {\n  constructor(data) {\n    this._name = data.name;\n    this._country = data.country;\n  }\n  get name()    {return this._name;}\n  set name(arg) {this._name = arg;}\n  get country()    {return this._country;}\n  set country(arg) {this._country = arg;}\n}"
    },
    "PUSH DOWN METHOD": {
        "BeforeRefact": "class Employee {\n  get quota {...}\n}\n\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {\n  get quota {...}  \n}"
    },
    "EXTRACT FUNCTION": {
        "BeforeRefact": "function printOwing(invoice) {\n  printBanner();\n  let outstanding  = calculateOutstanding();\n\n  //print details\n  console.log(`name: ${invoice.customer}`);\n  console.log(`amount: ${outstanding}`);  \n}",
        "AfterRefact": "function printOwing(invoice) {\n  printBanner();\n  let outstanding  = calculateOutstanding();\n  printDetails(outstanding);\n\n  function printDetails(outstanding) {\n    console.log(`name: ${invoice.customer}`);\n    console.log(`amount: ${outstanding}`);\n  }\n}"
    },
    "INTRODUCE ASSERTION": {
        "BeforeRefact": "if (this.discountRate)\n  base = base - (this.discountRate * base);",
        "AfterRefact": "assert(this.discountRate >= 0);\nif (this.discountRate)\n  base = base - (this.discountRate * base);"
    },
    "EXTRACT VARIABLE": {
        "BeforeRefact": "return order.quantity * order.itemPrice -\n    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +\n    Math.min(order.quantity * order.itemPrice * 0.1, 100);",
        "AfterRefact": "const basePrice = order.quantity * order.itemPrice;\nconst quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\nconst shipping = Math.min(basePrice * 0.1, 100);\nreturn basePrice - quantityDiscount + shipping;"
    },
    "INLINE VARIABLE": {
        "BeforeRefact": "let basePrice = anOrder.basePrice;\nreturn (basePrice > 1000);",
        "AfterRefact": "return anOrder.basePrice > 1000;"
    },
    "ENCAPSULATE COLLECTION": {
        "BeforeRefact": "class Person {              \n  get courses() {return this._courses;}\n  set courses(aList) {this._courses = aList;}",
        "AfterRefact": "class Person {\n  get courses() {return this._courses.slice();}\n  addCourse(aCourse)    { ... }\n  removeCourse(aCourse) { ... }"
    },
    "ENCAPSULATE VARIABLE": {
        "BeforeRefact": "let defaultOwner = {firstName: \u201cMartin\u201d, lastName: \u201cFowler\u201d};",
        "AfterRefact": "let defaultOwnerData = {firstName: \u201cMartin\u201d, lastName: \u201cFowler\u201d};\nexport function defaultOwner()       {return defaultOwnerData;}\nexport function setDefaultOwner(arg) {defaultOwnerData = arg;}"
    },
    "PUSH DOWN FIELD": {
        "BeforeRefact": "class Employee {        // Java\n  private String quota;\n}\n\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}\nclass Engineer extends Employee {...}\n\nclass Salesman extends Employee {\n  protected String quota;\n}"
    },
    "REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES": {
        "BeforeRefact": "function getPayAmount() {\n    let result;\n    if (isDead)\n        result = deadAmount();\n    else {\n        if (isSeparated)\n            result = separatedAmount();\n        else {\n            if (isRetired)\n                result = retiredAmount();\n            else\n                result = normalPayAmount();\n        }\n    }\n    return result;\n}",
        "AfterRefact": "function getPayAmount() {\n    if (isDead) return deadAmount();\n    if (isSeparated) return separatedAmount();\n    if (isRetired) return retiredAmount();\n    return normalPayAmount();\n}"
    },
    "REMOVE SETTING METHOD": {
        "BeforeRefact": "class Person {\n  get name() {...}\n  set name(aString) {...}",
        "AfterRefact": "class Person {\n  get name() {...}"
    },
    "REPLACE DERIVED VARIABLE WITH QUERY": {
        "BeforeRefact": "get discountedTotal() {return this._discountedTotal;}\nset discount(aNumber) {\n    const old = this._discount;\n    this._discount = aNumber;\n    this._discountedTotal += old - aNumber; \n}",
        "AfterRefact": "get discountedTotal() {return this._baseTotal - this._discount;}\nset discount(aNumber) {this._discount = aNumber;}"
    },
    "SUBSTITUTE ALGORITHM": {
        "BeforeRefact": "function foundPerson(people) {\n  for(let i = 0; i < people.length; i++) {\n    if (people[i] === \u201cDon\u201d) {\n      return \u201cDon\u201d;\n    }\n    if (people[i] === \u201cJohn\u201d) {\n      return \u201cJohn\u201d;\n    }\n    if (people[i] === \u201cKent\u201d) {\n      return \u201cKent\u201d;\n    }\n  }\n  return \u201c\u201d;\n}",
        "AfterRefact": "function foundPerson(people) {\n  const candidates = [\u201dDon\u201d, \u201cJohn\u201d, \u201cKent\u201d];\n  return people.find(p => candidates.includes(p)) || '';\n}"
    },
    "REPLACE CONDITIONAL WITH POLYMORPHISM": {
        "BeforeRefact": "switch (bird.type) {\n  case 'EuropeanSwallow':\n    return \u201caverage\u201d;\n  case 'AfricanSwallow':\n    return (bird.numberOfCoconuts > 2) ? \u201ctired\u201d : \u201caverage\u201d;\n  case 'NorwegianBlueParrot':\n    return (bird.voltage > 100) ? \u201cscorched\u201d : \u201cbeautiful\u201d;\n  default:\n    return \u201cunknown\u201d;",
        "AfterRefact": "class EuropeanSwallow {\n  get plumage() {\n    return \u201caverage\u201d;\n  }\nclass AfricanSwallow {\n  get plumage() {\n     return (this.numberOfCoconuts > 2) ? \u201ctired\u201d : \u201caverage\u201d;\n  }\nclass NorwegianBlueParrot {\n  get plumage() {\n     return (this.voltage > 100) ? \u201cscorched\u201d : \u201cbeautiful\u201d;\n  }"
    },
    "DECOMPOSE CONDITIONAL": {
        "BeforeRefact": "if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))\n  charge = quantity * plan.summerRate;\nelse\n  charge = quantity * plan.regularRate + plan.regularServiceCharge;",
        "AfterRefact": "if (summer())\n  charge = summerCharge();\nelse\n  charge = regularCharge();"
    },
    "EXTRACT SUPERCLASS": {
        "BeforeRefact": "class Department {\n  get totalAnnualCost() {...}\n  get name() {...}\n  get headCount() {...}\n}\n\nclass Employee {\n  get annualCost() {...}\n  get name() {...}\n  get id() {...}\n}",
        "AfterRefact": "class Party {\n  get name() {...}\n  get annualCost() {...}\n}\n\nclass Department extends Party {\n  get annualCost() {...}\n  get headCount() {...}\n}\n\nclass Employee extends Party {\n  get annualCost() {...}\n  get id() {...}\n}"
    },
    "REPLACE LOOP WITH PIPELINE": {
        "BeforeRefact": "const names = [];\nfor (const i of input) {\n    if (i.job === \u201cprogrammer\u201d)\n        names.push(i.name);\n}",
        "AfterRefact": "const names = input\n    .filter(i => i.job === \u201cprogrammer\u201d)\n    .map(i => i.name)\n;"
    },
    "REPLACE SUPERCLASS WITH DELEGATE": {
        "BeforeRefact": "class List {...}\nclass Stack extends List {...}",
        "AfterRefact": "class Stack {\n  constructor() {\n    this._storage = new List();\n  }\n}\nclass List {...}"
    },
    "COMBINE FUNCTIONS INTO TRANSFORM": {
        "BeforeRefact": "function base(aReading) {...}\nfunction taxableCharge(aReading) {...}",
        "AfterRefact": "function enrichReading(argReading) {\n  const aReading = _.cloneDeep(argReading);\n  aReading.baseCharge = base(aReading);\n  aReading.taxableCharge = taxableCharge(aReading);\n  return aReading;\n}\n"
    },
    "PARAMETERIZE FUNCTION": {
        "BeforeRefact": "function tenPercentRaise(aPerson) {\n  aPerson.salary = aPerson.salary.multiply(1.1);\n}\nfunction fivePercentRaise(aPerson) {\n  aPerson.salary = aPerson.salary.multiply(1.05);\n}",
        "AfterRefact": "function raise(aPerson, factor) {\n  aPerson.salary = aPerson.salary.multiply(1 + factor);\n}"
    },
    "REMOVE FLAG ARGUMENT": {
        "BeforeRefact": "function setDimension(name, value) {\n  if (name === \u201cheight\u201d) {\n    this._height = value;\n    return;\n  }\n  if (name === \u201cwidth\u201d) {\n    this._width = value;\n    return;\n  }\n}",
        "AfterRefact": "function setHeight(value) {this._height = value;}\nfunction setWidth (value) {this._width = value;}"
    },
    "REPLACE PARAMETER WITH QUERY": {
        "BeforeRefact": "availableVacation(anEmployee, anEmployee.grade);\n\nfunction availableVacation(anEmployee, grade) {\n  // calculate vacation...",
        "AfterRefact": "availableVacation(anEmployee)\n\nfunction availableVacation(anEmployee) {\n  const grade = anEmployee.grade;\n  // calculate vacation..."
    },
    "REPLACE COMMAND WITH FUNCTION": {
        "BeforeRefact": "class ChargeCalculator {\n  constructor (customer, usage){\n    this._customer = customer;\n    this._usage = usage;\n  }\n  execute() {\n    return this._customer.rate * this._usage;\n  }\n}",
        "AfterRefact": "function charge(customer, usage) {\n  return customer.rate * usage;\n}"
    },
    "CHANGE FUNCTION DECLARATION": {
        "BeforeRefact": "function circum(radius) {...}",
        "AfterRefact": "function circumference(radius) {...}"
    },
    "RENAME FIELD": {
        "BeforeRefact": "class Organization {\n  get name() {...}\n}",
        "AfterRefact": "class Organization {\n  get title() {...}\n}"
    },
    "REPLACE INLINE CODE WITH FUNCTION CALL": {
        "BeforeRefact": "let appliesToMass = false;\nfor(const s of states) {\n    if (s === \u201cMA\u201d) appliesToMass = true;\n}",
        "AfterRefact": "appliesToMass = states.includes(\u201cMA\u201d);"
    },
    "MOVE FUNCTION": {
        "BeforeRefact": "class Account {\n    get overdraftCharge() {...}",
        "AfterRefact": "class AccountType {\n    get overdraftCharge() {...}"
    },
    "SPLIT VARIABLE": {
        "BeforeRefact": "let temp = 2 * (height + width);\nconsole.log(temp);\ntemp = height * width;\nconsole.log(temp);",
        "AfterRefact": "const perimeter = 2 * (height + width);\nconsole.log(perimeter);\nconst area = height * width;\nconsole.log(area);"
    },
    "REPLACE QUERY WITH PARAMETER": {
        "BeforeRefact": "targetTemperature(aPlan)\n\nfunction targetTemperature(aPlan) {\n    currentTemperature = thermostat.currentTemperature;\n    // rest of function...\n}",
        "AfterRefact": "targetTemperature(aPlan, thermostat.currentTemperature)\n\nfunction targetTemperature(aPlan, currentTemperature) {\n  // rest of function...\n}"
    },
    "INTRODUCE SPECIAL CASE": {
        "BeforeRefact": "if (aCustomer === \u201cunknown\u201d) customerName = \u201coccupant\u201d;",
        "AfterRefact": "class UnknownCustomer {\n    get name() {return \u201coccupant\u201d;}"
    },
    "REMOVE DEAD CODE": {
        "BeforeRefact": "if(false) {\n  doSomethingThatUsedToMatter();\n}",
        "AfterRefact": ""
    },
    "RENAME VARIABLE": {
        "BeforeRefact": "let a = height * width;",
        "AfterRefact": "let area = height * width;"
    },
    "REPLACE TYPE CODE WITH SUBCLASSES": {
        "BeforeRefact": "function createEmployee(name, type) {\n  return new Employee(name, type);\n}",
        "AfterRefact": "function createEmployee(name, type) {\n  switch (type) {\n    case \u201cengineer\u201d: return new Engineer(name);\n    case \u201csalesman\u201d: return new Salesman(name);\n    case \u201cmanager\u201d:  return new Manager (name);\n  }"
    },
    "INLINE FUNCTION": {
        "BeforeRefact": "function getRating(driver) {\n  return moreThanFiveLateDeliveries(driver) ? 2 : 1;\n}\n\nfunction moreThanFiveLateDeliveries(driver) {\n  return driver.numberOfLateDeliveries > 5;\n}",
        "AfterRefact": "function getRating(driver) {\n  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;\n}"
    },
    "COMBINE FUNCTIONS INTO CLASS": {
        "BeforeRefact": "function base(aReading) {...}\nfunction taxableCharge(aReading) {...}\nfunction calculateBaseCharge(aReading) {...}",
        "AfterRefact": "class Reading {\n  base() {...}\n  taxableCharge() {...}\n  calculateBaseCharge() {...}\n}"
    },
    "MOVE FIELD": {
        "BeforeRefact": "class Customer {\n  get plan() {return this._plan;}\n  get discountRate() {return this._discountRate;}",
        "AfterRefact": "class Customer {\n  get plan() {return this._plan;}\n  get discountRate() {return this.plan.discountRate;}"
    },
    "REPLACE TEMP WITH QUERY": {
        "BeforeRefact": "const basePrice = this._quantity * this._itemPrice;\nif (basePrice > 1000)\n  return basePrice * 0.95;\nelse\n  return basePrice * 0.98;",
        "AfterRefact": "get basePrice() {this._quantity * this._itemPrice;}\n\n// ...\n\nif (this.basePrice > 1000)\n  return this.basePrice * 0.95;\nelse\n  return this.basePrice * 0.98;"
    },
    "CHANGE VALUE TO REFERENCE": {
        "BeforeRefact": "let customer = new Customer(customerData);",
        "AfterRefact": "let customer = customerRepository.get(customerData.id);"
    },
    "MOVE STATEMENTS INTO FUNCTION": {
        "BeforeRefact": "result.push(`<p>title: ${person.photo.title}</p>`);\nresult.concat(photoData(person.photo));\n\nfunction photoData(aPhoto) {\n  return [\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}",
        "AfterRefact": "result.concat(photoData(person.photo));\n\nfunction photoData(aPhoto) {\n  return [\n    `<p>title: ${aPhoto.title}</p>`,\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}"
    },
    "SEPARATE QUERY FROM MODIFIER": {
        "BeforeRefact": "function getTotalOutstandingAndSendBill() {\n  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);\n  sendBill();\n  return result;\n}",
        "AfterRefact": "function totalOutstanding() {\n  return customer.invoices.reduce((total, each) => each.amount + total, 0);  \n}\nfunction sendBill() {\n  emailGateway.send(formatBill(customer));\n}"
    },
    "HIDE DELEGATE": {
        "BeforeRefact": "manager = aPerson.department.manager;",
        "AfterRefact": "manager = aPerson.manager;\n\nclass Person {\n  get manager() {return this.department.manager;}"
    },
    "PULL UP METHOD": {
        "BeforeRefact": "class Employee {...}\n\nclass Salesman extends Employee {\n  get name() {...}\n}\n\nclass Engineer extends Employee {\n  get name() {...}\n}",
        "AfterRefact": "class Employee {\n  get name() {...}\n}\n\nclass Salesman extends Employee {...}\nclass Engineer extends Employee {...}"
    },
    "SLIDE STATEMENTS": {
        "BeforeRefact": "const pricingPlan = retrievePricingPlan();\nconst order = retreiveOrder();\nlet charge;\nconst chargePerUnit = pricingPlan.unit;",
        "AfterRefact": "const pricingPlan = retrievePricingPlan();\nconst chargePerUnit = pricingPlan.unit;\nconst order = retreiveOrder();\nlet charge;"
    },
    "EXTRACT CLASS": {
        "BeforeRefact": "class Person {\n  get officeAreaCode() {return this._officeAreaCode;}\n  get officeNumber()   {return this._officeNumber;}",
        "AfterRefact": "class Person {\n  get officeAreaCode() {return this._telephoneNumber.areaCode;}\n  get officeNumber()   {return this._telephoneNumber.number;}\n}\nclass TelephoneNumber {\n  get areaCode() {return this._areaCode;}\n  get number()   {return this._number;}\n}"
    },
    "CONSOLIDATE CONDITIONAL EXPRESSION": {
        "BeforeRefact": "if (anEmployee.seniority < 2) return 0;\nif (anEmployee.monthsDisabled > 12) return 0;\nif (anEmployee.isPartTime) return 0;",
        "AfterRefact": "if (isNotEligibleForDisability()) return 0;\n\nfunction isNotEligibleForDisability() {\nreturn ((anEmployee.seniority < 2)\n        || (anEmployee.monthsDisabled > 12)\n        || (anEmployee.isPartTime));\n}"
    },
    "PULL UP CONSTRUCTOR BODY": {
        "BeforeRefact": "class Party {...}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super();\n    this._id = id;\n    this._name = name;\n    this._monthlyCost = monthlyCost;\n  }\n}",
        "AfterRefact": "class Party {\n  constructor(name){\n    this._name = name;\n  }\n}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super(name);\n    this._id = id;\n    this._monthlyCost = monthlyCost;\n  }\n}"
    },
    "REPLACE CONSTRUCTOR WITH FACTORY FUNCTION": {
        "BeforeRefact": "leadEngineer = new Employee(document.leadEngineer, 'E');",
        "AfterRefact": "leadEngineer = createEngineer(document.leadEngineer);"
    },
    "REMOVE SUBCLASS": {
        "BeforeRefact": "class Person {\n  get genderCode() {return \u201cX\u201d;}\n}\nclass Male extends Person {\n  get genderCode() {return \u201cM\u201d;}\n}\nclass Female extends Person {\n  get genderCode() {return \u201cF\u201d;}\n}",
        "AfterRefact": "class Person {\n  get genderCode() {return this._genderCode;}\n}"
    },
    "INTRODUCE PARAMETER OBJECT": {
        "BeforeRefact": "function amountInvoiced(startDate, endDate) {...}\nfunction amountReceived(startDate, endDate) {...}\nfunction amountOverdue(startDate, endDate) {...}",
        "AfterRefact": "function amountInvoiced(aDateRange) {...}\nfunction amountReceived(aDateRange) {...}\nfunction amountOverdue(aDateRange) {...}"
    },
    "SPLIT LOOP": {
        "BeforeRefact": "let averageAge = 0;\nlet totalSalary = 0;\nfor (const p of people) {\n    averageAge += p.age;\n    totalSalary += p.salary;\n}\naverageAge = averageAge / people.length;",
        "AfterRefact": "let totalSalary = 0;\nfor (const p of people) {\n    totalSalary += p.salary;\n}\n\nlet averageAge = 0;\nfor (const p of people) {\n    averageAge += p.age;\n}\naverageAge = averageAge / people.length;"
    },
    "REPLACE PRIMITIVE WITH OBJECT": {
        "BeforeRefact": "orders.filter(o => \u201chigh\u201d === o.priority\n                || \u201crush\u201d === o.priority);  ",
        "AfterRefact": "orders.filter(o => o.priority.higherThan(new Priority(\u201cnormal\u201d)))"
    },
    "MOVE STATEMENTS TO CALLERS": {
        "BeforeRefact": "emitPhotoData(outStream, person.photo);\n\nfunction emitPhotoData(outStream, photo) {\n  outStream.write(`<p>title: ${photo.title}</p>\\n`);\n  outStream.write(`<p>location: ${photo.location}</p>\\n`);\n}",
        "AfterRefact": "emitPhotoData(outStream, person.photo);\noutStream.write(`<p>location: ${person.photo.location}</p>\\n`);\n\nfunction emitPhotoData(outStream, photo) {\n  outStream.write(`<p>title: ${photo.title}</p>\\n`);\n}"
    },
    "INLINE CLASS": {
        "BeforeRefact": "class Person {\n  get officeAreaCode() {return this._telephoneNumber.areaCode;}\n  get officeNumber()   {return this._telephoneNumber.number;}\n}\nclass TelephoneNumber {\n  get areaCode() {return this._areaCode;}\n  get number()   {return this._number;}\n}",
        "AfterRefact": "class Person {\n  get officeAreaCode() {return this._officeAreaCode;}\n  get officeNumber()   {return this._officeNumber;}"
    },
    "REMOVE MIDDLE MAN": {
        "BeforeRefact": "manager = aPerson.manager;\n\nclass Person {\n  get manager() {return this.department.manager;}",
        "AfterRefact": "manager = aPerson.department.manager;"
    },
    "REPLACE FUNCTION WITH COMMAND": {
        "BeforeRefact": "function score(candidate, medicalExam, scoringGuide) {\n    let result = 0;\n    let healthLevel = 0;\n// long body code\n}",
        "AfterRefact": "class Scorer {\n  constructor(candidate, medicalExam, scoringGuide) {\n    this._candidate = candidate;\n    this._medicalExam = medicalExam;\n    this._scoringGuide = scoringGuide;\n  }\n\n  execute() {\n    this._result = 0;\n    this._healthLevel = 0;\n    // long body code\n  }\n}"
    }
}