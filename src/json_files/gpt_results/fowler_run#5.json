{
    "FOWLER_EX_PULL UP FIELD": {
        "RefactMethod": "PULL UP FIELD",
        "BeforeRefact": "class Employee {...} // Java\n\nclass Salesman extends Employee {\n  private String name;\n}\n\nclass Engineer extends Employee {\n  private String name;\n}",
        "AfterRefact": "class Employee {\n  protected String name;\n}\n\nclass Salesman extends Employee {...}\nclass Engineer extends Employee {...}",
        "ZeroShotCode": "```java\nclass Employee {\n  private String name;\n  \n  public Employee(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n}\n\nclass Salesman extends Employee {\n  public Salesman(String name) {\n    super(name);\n  }\n}\n\nclass Engineer extends Employee {\n  public Engineer(String name) {\n    super(name);\n  }\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n    protected String name;\n}\n\nclass Salesman extends Employee {\n}\n\nclass Engineer extends Employee {\n}\n```",
        "ContextCode": "```java\nabstract class Employee {\n    private String name;\n\n    public Employee(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass Salesman extends Employee {\n    public Salesman(String name) {\n        super(name);\n    }\n}\n\nclass Engineer extends Employee {\n    public Engineer(String name) {\n        super(name);\n    }\n}\n```",
        "RulesCode": "```java\nclass Employee {\n    private String name;\n}\n\nclass Salesman extends Employee {\n}\n\nclass Engineer extends Employee {\n}\n```"
    },
    "FOWLER_EX_PRESERVE WHOLE OBJECT": {
        "RefactMethod": "PRESERVE WHOLE OBJECT",
        "BeforeRefact": "const low = aRoom.daysTempRange.low;\nconst high = aRoom.daysTempRange.high;\nif (aPlan.withinRange(low, high))",
        "AfterRefact": "if (aPlan.withinRange(aRoom.daysTempRange))",
        "ZeroShotCode": "```java\nRange temperatureRange = aRoom.getDaysTempRange();\nif (aPlan.withinRange(temperatureRange.getLow(), temperatureRange.getHigh())) {\n    // Your code logic here\n}\n```",
        "InstrucCode": "```java\npublic boolean isWithinRange(Plan aPlan, Room aRoom) {\n    double low = aRoom.getDaysTempRange().getLow();\n    double high = aRoom.getDaysTempRange().getHigh();\n    return aPlan.withinRange(low, high);\n}\n\n// Call the new function\nif (isWithinRange(aPlan, aRoom)) {\n    // Do something\n}\n```",
        "ContextCode": "```java\nint low = aRoom.getDaysTempRange().getLow();\nint high = aRoom.getDaysTempRange().getHigh();\nif (aPlan.withinRange(low, high)) {\n    // Additional logic can be placed here if needed\n}\n```",
        "RulesCode": "```java\nRange temperatureRange = aRoom.daysTempRange;\nif (aPlan.withinRange(temperatureRange.low, temperatureRange.high)) {\n    // Additional logic here\n}\n```"
    },
    "FOWLER_EX_SPLIT PHASE": {
        "RefactMethod": "SPLIT PHASE",
        "BeforeRefact": "const orderData = orderString.split(/\\s+/);\nconst productPrice = priceList[orderData[0].split(\u201c-\u201d)[1]];\nconst orderPrice = parseInt(orderData[1]) * productPrice;",
        "AfterRefact": "const orderRecord = parseOrder(order);\nconst orderPrice = price(orderRecord, priceList);\n\nfunction parseOrder(aString) {\n  const values =  aString.split(/\\s+/);\n  return ({\n    productID: values[0].split(\u201c-\u201d)[1],\n    quantity: parseInt(values[1]),\n  });\n}\nfunction price(order, priceList) {\n  return order.quantity * priceList[order.productID];\n}",
        "ZeroShotCode": "```java\nString[] orderData = orderString.split(\"\\\\s+\");\nString[] productInfo = orderData[0].split(\"\u2013\");\nString productId = productInfo[1];\nint productPrice = priceList.get(productId);\nint quantity = Integer.parseInt(orderData[1]);\nint orderPrice = quantity * productPrice;\n```",
        "InstrucCode": "```java\npublic class OrderProcessor {\n\n    public static void main(String[] args) {\n        String orderString = \"some-order-string\"; // Example input\n        Map<String, Integer> priceList = new HashMap<>(); // Populate with actual data\n        // priceList.put(\"product-key\", product-price);\n\n        OrderData orderData = parseOrder(orderString);\n        int orderPrice = calculateOrderPrice(orderData, priceList);\n    }\n\n    private static OrderData parseOrder(String orderString) {\n        String[] orderParts = orderString.split(\"\\\\s+\");\n        String productKey = orderParts[0].split(\"\u2013\")[1];\n        int quantity = Integer.parseInt(orderParts[1]);\n        return new OrderData(productKey, quantity);\n    }\n\n    private static int calculateOrderPrice(OrderData orderData, Map<String, Integer> priceList) {\n        Integer productPrice = priceList.get(orderData.getProductKey());\n        return orderData.getQuantity() * productPrice;\n    }\n\n    private static class OrderData {\n        private final String productKey;\n        private final int quantity;\n\n        public OrderData(String productKey, int quantity) {\n            this.productKey = productKey;\n            this.quantity = quantity;\n        }\n\n        public String getProductKey() {\n            return productKey;\n        }\n\n        public int getQuantity() {\n            return quantity;\n        }\n    }\n}\n```",
        "ContextCode": "```java\nString[] orderData = orderString.split(\"\\\\s+\");\nString productKey = orderData[0].split(\"\u2013\")[1];\ndouble productPrice = priceList.get(productKey);\nint orderQuantity = Integer.parseInt(orderData[1]);\ndouble orderPrice = orderQuantity * productPrice;\n```"
    },
    "FOWLER_EX_COLLAPSE HIERARCHY": {
        "RefactMethod": "COLLAPSE HIERARCHY",
        "BeforeRefact": "class Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}",
        "ZeroShotCode": "```java\nclass Employee {\n    // properties and methods\n}\n\n// Salesman class is removed as part of COLLAPSE HIERARCHY refactoring\n```",
        "InstrucCode": "```java\nclass Employee {\n    // Attributes and methods common to all employees\n}\n\nclass Salesman extends Employee {\n    // Attributes and methods specific to salesmen\n}\n```",
        "ContextCode": "```java\nclass Employee {\n    private String name;\n    private String id;\n\n    public Employee(String name, String id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"name='\" + name + '\\'' +\n                \", id='\" + id + '\\'' +\n                '}';\n    }\n}\n\nclass Salesman extends Employee {\n    private double salesCommission;\n\n    public Salesman(String name, String id, double salesCommission) {\n        super(name, id);\n        this.salesCommission = salesCommission;\n    }\n\n    public double getSalesCommission() {\n        return salesCommission;\n    }\n\n    @Override\n    public String toString() {\n        return \"Salesman{\" +\n                \"name='\" + getName() + '\\'' +\n                \", id='\" + getId() + '\\'' +\n                \", salesCommission=\" + salesCommission +\n                '}';\n    }\n}\n```",
        "RulesCode": "```java\nclass Employee {\n    // Fields and methods that were previously in Salesman\n}\n```"
    },
    "FOWLER_EX_REPLACE SUBCLASS WITH DELEGATE": {
        "RefactMethod": "REPLACE SUBCLASS WITH DELEGATE",
        "BeforeRefact": "class Order {\n  get daysToShip() {\n    return this._warehouse.daysToShip;\n  }\n}\n\nclass PriorityOrder extends Order {\n  get daysToShip() {\n    return this._priorityPlan.daysToShip;\n  }\n}",
        "AfterRefact": "class Order {\n  get daysToShip() {\n    return (this._priorityDelegate)\n      ? this._priorityDelegate.daysToShip\n      : this._warehouse.daysToShip;\n  }\n}\n\nclass PriorityOrderDelegate {\n  get daysToShip() {\n    return this._priorityPlan.daysToShip\n  }\n}",
        "ZeroShotCode": "```java\nclass Order {\n    protected Warehouse _warehouse;\n\n    public int getDaysToShip() {\n        return _warehouse.getDaysToShip();\n    }\n}\n\nclass PriorityOrder {\n    private Order order;\n    private PriorityPlan _priorityPlan;\n\n    public PriorityOrder(Order order) {\n        this.order = order;\n    }\n\n    public int getDaysToShip() {\n        return _priorityPlan.getDaysToShip();\n    }\n}\n```",
        "InstrucCode": "```java\nclass Order {\n    protected Warehouse _warehouse;\n    private PriorityDelegate _delegate;\n\n    public Order(Warehouse warehouse) {\n        this._warehouse = warehouse;\n        this._delegate = null;\n    }\n\n    public int getDaysToShip() {\n        if (_delegate != null) {\n            return _delegate.getDaysToShip();\n        }\n        return this._warehouse.getDaysToShip();\n    }\n\n    public void setDelegate(PriorityDelegate delegate) {\n        this._delegate = delegate;\n    }\n}\n\nclass PriorityDelegate {\n    private PriorityPlan _priorityPlan;\n    private Order _order;\n\n    public PriorityDelegate(PriorityPlan priorityPlan, Order order) {\n        this._priorityPlan = priorityPlan;\n        this._order = order;\n    }\n\n    public int getDaysToShip() {\n        return this._priorityPlan.getDaysToShip();\n    }\n}\n\n// Usage\nOrder order = new Order(warehouse);\nPriorityDelegate priorityDelegate = new PriorityDelegate(priorityPlan, order);\norder.setDelegate(priorityDelegate);\n```",
        "ContextCode": "```java\nclass Order {\n    protected Warehouse warehouse;\n\n    public Order(Warehouse warehouse) {\n        this.warehouse = warehouse;\n    }\n\n    public int getDaysToShip() {\n        return warehouse.getDaysToShip();\n    }\n}\n\nclass PriorityOrder extends Order {\n    private PriorityPlan priorityPlan;\n\n    public PriorityOrder(Warehouse warehouse, PriorityPlan priorityPlan) {\n        super(warehouse);\n        this.priorityPlan = priorityPlan;\n    }\n\n    @Override\n    public int getDaysToShip() {\n        return priorityPlan.getDaysToShip();\n    }\n}\n```"
    },
    "FOWLER_EX_CHANGE REFERENCE TO VALUE": {
        "RefactMethod": "CHANGE REFERENCE TO VALUE",
        "BeforeRefact": "class Product {\n  applyDiscount(arg) {this._price.amount -= arg;}",
        "AfterRefact": "class Product {\n  applyDiscount(arg) {\n    this._price = new Money(this._price.amount - arg, this._price.currency);\n  }",
        "ZeroShotCode": "```java\nclass Product {\n    private double price;\n\n    public Product(double price) {\n        this.price = price;\n    }\n\n    public void applyDiscount(double amount) {\n        this.price -= amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Product {\n    private final Money price;\n\n    public Product(Money price) {\n        this.price = price;\n    }\n\n    public Money getPrice() {\n        return price;\n    }\n\n    public Product applyDiscount(double amount) {\n        return new Product(price.subtract(amount));\n    }\n}\n\nclass Money {\n    private final double amount;\n\n    public Money(double amount) {\n        this.amount = amount;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public Money subtract(double amount) {\n        return new Money(this.amount - amount);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (!(obj instanceof Money)) return false;\n        Money other = (Money) obj;\n        return Double.compare(other.amount, amount) == 0;\n    }\n\n    @Override\n    public int hashCode() {\n        return Double.hashCode(amount);\n    }\n}\n```",
        "ContextCode": "```java\nclass Product {\n    private Price _price;\n\n    // Constructor and other methods...\n\n    public void applyDiscount(double discountAmount) {\n        _price.setAmount(_price.getAmount() - discountAmount);\n    }\n}\n\nclass Price {\n    private double amount;\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public void setAmount(double amount) {\n        this.amount = amount;\n    }\n}\n```",
        "RulesCode": "```java\nclass Product {\n    private Price _price;\n\n    public void applyDiscount(double arg) {\n        _price.setAmount(_price.getAmount() - arg);\n    }\n}\n\nclass Price {\n    private double amount;\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public void setAmount(double amount) {\n        this.amount = amount;\n    }\n}\n```"
    },
    "FOWLER_EX_ENCAPSULATE RECORD": {
        "RefactMethod": "ENCAPSULATE RECORD",
        "BeforeRefact": "organization = {name: \u201cAcme Gooseberries\u201d, country: \u201cGB\u201d};",
        "AfterRefact": "class Organization {\n  constructor(data) {\n    this._name = data.name;\n    this._country = data.country;\n  }\n  get name()    {return this._name;}\n  set name(arg) {this._name = arg;}\n  get country()    {return this._country;}\n  set country(arg) {this._country = arg;}\n}",
        "ZeroShotCode": "```java\npublic class Organization {\n    private String name;\n    private String country;\n\n    public Organization(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n}\n\n// Usage\nOrganization organization = new Organization(\"Acme Gooseberries\", \"GB\");\n```",
        "InstrucCode": "```java\npublic class Organization {\n    private final OrganizationRecord record;\n\n    public Organization(String name, String country) {\n        this.record = new OrganizationRecord(name, country);\n    }\n\n    public OrganizationRecord getRecord() {\n        return new OrganizationRecord(record.getName(), record.getCountry());\n    }\n\n    public String getName() {\n        return record.getName();\n    }\n\n    public String getCountry() {\n        return record.getCountry();\n    }\n\n    private static class OrganizationRecord {\n        private final String name;\n        private final String country;\n\n        public OrganizationRecord(String name, String country) {\n            this.name = name;\n            this.country = country;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getCountry() {\n            return country;\n        }\n    }\n}\n\n// Usage\nOrganization organization = new Organization(\"Acme Gooseberries\", \"GB\");\nString orgName = organization.getName(); // Access the name\nString orgCountry = organization.getCountry(); // Access the country\n```",
        "ContextCode": "```java\npublic class Organization {\n    private String name;\n    private String country;\n\n    public Organization(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    @Override\n    public String toString() {\n        return \"Organization{\" +\n                \"name='\" + name + '\\'' +\n                \", country='\" + country + '\\'' +\n                '}';\n    }\n\n    public static void main(String[] args) {\n        Organization organization = new Organization(\"Acme Gooseberries\", \"GB\");\n        System.out.println(organization);\n    }\n}\n```",
        "RulesCode": "```java\npublic class Organization {\n    private String name;\n    private String country;\n\n    public Organization(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n}\n\n// Example usage\nOrganization organization = new Organization(\"Acme Gooseberries\", \"GB\");\n```"
    },
    "FOWLER_EX_PUSH DOWN METHOD": {
        "RefactMethod": "PUSH DOWN METHOD",
        "BeforeRefact": "class Employee {\n  get quota {...}\n}\n\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {\n  get quota {...}  \n}",
        "ZeroShotCode": "```java\nabstract class Employee {\n    abstract int getQuota();\n}\n\nclass Engineer extends Employee {\n    @Override\n    int getQuota() {\n        // Engineer-specific quota logic\n        return /* engineer quota */;\n    }\n}\n\nclass Salesman extends Employee {\n    @Override\n    int getQuota() {\n        // Salesman-specific quota logic\n        return /* salesman quota */;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Engineer {\n    public int getQuota() {\n        // Implementation specific to Engineer\n    }\n}\n\nclass Salesman {\n    public int getQuota() {\n        // Implementation specific to Salesman\n    }\n}\n```",
        "ContextCode": "```java\nabstract class Employee {\n    public abstract int getQuota();\n}\n\nclass Engineer extends Employee {\n    @Override\n    public int getQuota() {\n        // Implementation for Engineer's quota\n        return 0; // Placeholder value\n    }\n}\n\nclass Salesman extends Employee {\n    @Override\n    public int getQuota() {\n        // Implementation for Salesman's quota\n        return 0; // Placeholder value\n    }\n}\n```",
        "RulesCode": "```java\nclass Employee {\n    public void getQuota() {\n        // ...\n    }\n}\n\nclass Engineer extends Employee {\n    // Engineer-specific methods\n}\n\nclass Salesman extends Employee {\n    // Salesman-specific methods\n}\n```"
    },
    "FOWLER_EX_EXTRACT FUNCTION": {
        "RefactMethod": "EXTRACT FUNCTION",
        "BeforeRefact": "function printOwing(invoice) {\n  printBanner();\n  let outstanding  = calculateOutstanding();\n\n  //print details\n  console.log(`name: ${invoice.customer}`);\n  console.log(`amount: ${outstanding}`);  \n}",
        "AfterRefact": "function printOwing(invoice) {\n  printBanner();\n  let outstanding  = calculateOutstanding();\n  printDetails(outstanding);\n\n  function printDetails(outstanding) {\n    console.log(`name: ${invoice.customer}`);\n    console.log(`amount: ${outstanding}`);\n  }\n}",
        "ZeroShotCode": "```java\npublic void printOwing(Invoice invoice) {\n    printBanner();\n    double outstanding = calculateOutstanding(invoice);\n\n    // print details\n    System.out.println(\"name: \" + invoice.getCustomer());\n    System.out.println(\"amount: \" + outstanding);\n}\n\nprivate double calculateOutstanding(Invoice invoice) {\n    double outstanding = 0.0;\n    // logic to calculate outstanding amount\n    return outstanding;\n}\n\nprivate void printBanner() {\n    System.out.println(\"**** Customer Owes ****\");\n}\n```",
        "InstrucCode": "```javascript\nfunction printOwing(invoice) {\n  printBanner();\n  let outstanding = calculateOutstanding();\n\n  printDetails(invoice, outstanding);\n}\n\nfunction printDetails(invoice, outstanding) {\n  console.log(`name: ${invoice.customer}`);\n  console.log(`amount: ${outstanding}`);\n}\n```",
        "ContextCode": "```java\npublic class InvoicePrinter {\n    public void printOwing(Invoice invoice) {\n        printBanner();\n        double outstanding = calculateOutstanding(invoice);\n\n        printDetails(invoice.getCustomer(), outstanding);\n    }\n\n    private void printBanner() {\n        System.out.println(\"**********\");\n        System.out.println(\"Customer Owes\");\n        System.out.println(\"**********\");\n    }\n\n    private double calculateOutstanding(Invoice invoice) {\n        // Calculate the outstanding amount logic here\n        return invoice.getOutstandingAmount();\n    }\n\n    private void printDetails(String customerName, double outstandingAmount) {\n        System.out.println(\"Name: \" + customerName);\n        System.out.println(\"Amount: \" + outstandingAmount);\n    }\n}\n```",
        "RulesCode": "```javascript\nfunction printOwing(invoice) {\n  printBanner();\n  let outstanding = calculateOutstanding();\n  \n  printDetails(invoice, outstanding);\n}\n\nfunction printDetails(invoice, outstanding) {\n  // print details\n  console.log(`name: ${invoice.customer}`);\n  console.log(`amount: ${outstanding}`);\n}\n```"
    },
    "FOWLER_EX_INTRODUCE ASSERTION": {
        "RefactMethod": "INTRODUCE ASSERTION",
        "BeforeRefact": "if (this.discountRate)\n  base = base - (this.discountRate * base);",
        "AfterRefact": "assert(this.discountRate >= 0);\nif (this.discountRate)\n  base = base - (this.discountRate * base);",
        "ZeroShotCode": "```java\nassert this.discountRate >= 0 : \"Discount rate must be non-negative\";\nbase = base - (this.discountRate * base);\n```",
        "InstrucCode": "```java\nassert this.discountRate >= 0 : \"Discount rate should not be negative\";\nif (this.discountRate > 0) {\n    base = base - (this.discountRate * base);\n}\n```",
        "ContextCode": "```java\nif (discountRate > 0) {\n    base -= discountRate * base;\n}\n```",
        "RulesCode": "```java\nif (this.discountRate > 0) {\n    base = base - (this.discountRate * base);\n}\n```"
    },
    "FOWLER_EX_EXTRACT VARIABLE": {
        "RefactMethod": "EXTRACT VARIABLE",
        "BeforeRefact": "return order.quantity * order.itemPrice -\n    Math.max(0, order.quantity - 500) * order.itemPrice * 0.05 +\n    Math.min(order.quantity * order.itemPrice * 0.1, 100);",
        "AfterRefact": "const basePrice = order.quantity * order.itemPrice;\nconst quantityDiscount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\nconst shipping = Math.min(basePrice * 0.1, 100);\nreturn basePrice - quantityDiscount + shipping;",
        "ZeroShotCode": "```java\ndouble quantity = order.quantity;\ndouble itemPrice = order.itemPrice;\ndouble basePrice = quantity * itemPrice;\ndouble discount = Math.max(0, quantity - 500) * itemPrice * 0.05;\ndouble rebate = Math.min(basePrice * 0.1, 100);\n\nreturn basePrice - discount + rebate;\n```",
        "InstrucCode": "```java\ndouble totalPrice = order.quantity * order.itemPrice;\ndouble discountThreshold = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\ndouble maxDiscount = Math.min(totalPrice * 0.1, 100);\n\nreturn totalPrice - discountThreshold + maxDiscount;\n```",
        "ContextCode": "```java\npublic double calculateOrderTotal(Order order) {\n    double basePrice = order.quantity * order.itemPrice;\n    double discount = calculateDiscount(order.quantity, order.itemPrice);\n    double additionalCharges = Math.min(basePrice * 0.1, 100);\n    \n    return basePrice - discount + additionalCharges;\n}\n\nprivate double calculateDiscount(int quantity, double itemPrice) {\n    if (quantity <= 500) {\n        return 0;\n    }\n    return (quantity - 500) * itemPrice * 0.05;\n}\n```",
        "RulesCode": "```java\ndouble itemTotal = order.quantity * order.itemPrice;\ndouble discount = Math.max(0, order.quantity - 500) * order.itemPrice * 0.05;\ndouble cappedDiscount = Math.min(itemTotal * 0.1, 100);\n\nreturn itemTotal - discount + cappedDiscount;\n```"
    },
    "FOWLER_EX_INLINE VARIABLE": {
        "RefactMethod": "INLINE VARIABLE",
        "BeforeRefact": "let basePrice = anOrder.basePrice;\nreturn (basePrice > 1000);",
        "AfterRefact": "return anOrder.basePrice > 1000;",
        "ZeroShotCode": "```java\nreturn (anOrder.basePrice > 1000);\n```",
        "InstrucCode": "```java\nreturn (anOrder.basePrice > 1000);\n```",
        "ContextCode": "```java\nboolean isLargeOrder(Order anOrder) {\n    return anOrder.getBasePrice() > 1000;\n}\n```",
        "RulesCode": "```java\nreturn (anOrder.basePrice > 1000);\n```"
    },
    "FOWLER_EX_ENCAPSULATE COLLECTION": {
        "RefactMethod": "ENCAPSULATE COLLECTION",
        "BeforeRefact": "class Person {              \n  get courses() {return this._courses;}\n  set courses(aList) {this._courses = aList;}",
        "AfterRefact": "class Person {\n  get courses() {return this._courses.slice();}\n  addCourse(aCourse)    { ... }\n  removeCourse(aCourse) { ... }",
        "ZeroShotCode": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Person {\n    private List<String> courses;\n\n    public List<String> getCourses() {\n        return new ArrayList<>(courses);\n    }\n\n    public void setCourses(List<String> courses) {\n        this.courses = new ArrayList<>(courses);\n    }\n}\n```",
        "InstrucCode": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Person {\n    private List<Course> courses;\n\n    public Person() {\n        this.courses = new ArrayList<>();\n    }\n\n    public List<Course> getCourses() {\n        return Collections.unmodifiableList(courses);\n    }\n\n    public void addCourse(Course course) {\n        courses.add(course);\n    }\n\n    public void removeCourse(Course course) {\n        courses.remove(course);\n    }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private List<Course> courses;\n\n    public List<Course> getCourses() {\n        return courses;\n    }\n\n    public void setCourses(List<Course> courses) {\n        this.courses = courses;\n    }\n}\n```",
        "RulesCode": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Person {\n    private List<String> _courses = new ArrayList<>();\n\n    public List<String> getCourses() {\n        return Collections.unmodifiableList(_courses);\n    }\n\n    public void addCourse(String course) {\n        _courses.add(course);\n    }\n\n    public void removeCourse(String course) {\n        _courses.remove(course);\n    }\n}\n```"
    },
    "FOWLER_EX_ENCAPSULATE VARIABLE": {
        "RefactMethod": "ENCAPSULATE VARIABLE",
        "BeforeRefact": "let defaultOwner = {firstName: \u201cMartin\u201d, lastName: \u201cFowler\u201d};",
        "AfterRefact": "let defaultOwnerData = {firstName: \u201cMartin\u201d, lastName: \u201cFowler\u201d};\nexport function defaultOwner()       {return defaultOwnerData;}\nexport function setDefaultOwner(arg) {defaultOwnerData = arg;}",
        "ZeroShotCode": "```java\npublic class Owner {\n    private String firstName;\n    private String lastName;\n\n    public Owner() {\n        this.firstName = \"Martin\";\n        this.lastName = \"Fowler\";\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n}\n```",
        "InstrucCode": "```java\npublic class Owner {\n    private String firstName;\n    private String lastName;\n\n    public Owner(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\n\n// Usage\nOwner defaultOwner = new Owner(\"Martin\", \"Fowler\");\n```",
        "ContextCode": "```java\npublic class Owner {\n    private String firstName;\n    private String lastName;\n\n    public Owner(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Owner defaultOwner = new Owner(\"Martin\", \"Fowler\");\n    }\n}\n```",
        "RulesCode": "```java\npublic class Owner {\n    private String firstName;\n    private String lastName;\n\n    public Owner(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n}\n\n// Usage\nOwner defaultOwner = new Owner(\"Martin\", \"Fowler\");\n```"
    },
    "FOWLER_EX_PUSH DOWN FIELD": {
        "RefactMethod": "PUSH DOWN FIELD",
        "BeforeRefact": "class Employee {        // Java\n  private String quota;\n}\n\nclass Engineer extends Employee {...}\nclass Salesman extends Employee {...}",
        "AfterRefact": "class Employee {...}\nclass Engineer extends Employee {...}\n\nclass Salesman extends Employee {\n  protected String quota;\n}",
        "ZeroShotCode": "```java\nclass Employee {\n    // Java\n}\n\nclass Engineer extends Employee {\n    private String quota;\n}\n\nclass Salesman extends Employee {\n    private String quota;\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n}\n\nclass Engineer extends Employee {\n    private String quota;\n}\n\nclass Salesman extends Employee {\n    private String quota;\n}\n```",
        "ContextCode": "```java\nclass Employee {\n    private String quota;\n\n    public String getQuota() {\n        return quota;\n    }\n\n    public void setQuota(String quota) {\n        this.quota = quota;\n    }\n}\n\nclass Engineer extends Employee {\n    // Additional properties and methods for Engineer\n}\n\nclass Salesman extends Employee {\n    // Additional properties and methods for Salesman\n}\n```",
        "RulesCode": "```java\nclass Employee {\n    // Java\n}\n\nclass Engineer extends Employee {\n    private String quota;\n}\n\nclass Salesman extends Employee {\n    private String quota;\n}\n```"
    },
    "FOWLER_EX_REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES": {
        "RefactMethod": "REPLACE NESTED CONDITIONAL WITH GUARD CLAUSES",
        "BeforeRefact": "function getPayAmount() {\n    let result;\n    if (isDead)\n        result = deadAmount();\n    else {\n        if (isSeparated)\n            result = separatedAmount();\n        else {\n            if (isRetired)\n                result = retiredAmount();\n            else\n                result = normalPayAmount();\n        }\n    }\n    return result;\n}",
        "AfterRefact": "function getPayAmount() {\n    if (isDead) return deadAmount();\n    if (isSeparated) return separatedAmount();\n    if (isRetired) return retiredAmount();\n    return normalPayAmount();\n}",
        "ZeroShotCode": "```java\npublic double getPayAmount() {\n    if (isDead) {\n        return deadAmount();\n    }\n    if (isSeparated) {\n        return separatedAmount();\n    }\n    if (isRetired) {\n        return retiredAmount();\n    }\n    return normalPayAmount();\n}\n```",
        "InstrucCode": "```java\nfunction getPayAmount() {\n    if (isDead) {\n        return deadAmount();\n    }\n    if (isSeparated) {\n        return separatedAmount();\n    }\n    if (isRetired) {\n        return retiredAmount();\n    }\n    return normalPayAmount();\n}\n```",
        "ContextCode": "```java\npublic double getPayAmount() {\n    if (isDead) {\n        return deadAmount();\n    } \n    if (isSeparated) {\n        return separatedAmount();\n    } \n    if (isRetired) {\n        return retiredAmount();\n    } \n    return normalPayAmount();\n}\n```",
        "RulesCode": "```java\npublic double getPayAmount() {\n    if (isDead) {\n        return deadAmount();\n    }\n    if (isSeparated) {\n        return separatedAmount();\n    }\n    if (isRetired) {\n        return retiredAmount();\n    }\n    return normalPayAmount();\n}\n```"
    },
    "FOWLER_EX_REMOVE SETTING METHOD": {
        "RefactMethod": "REMOVE SETTING METHOD",
        "BeforeRefact": "class Person {\n  get name() {...}\n  set name(aString) {...}",
        "AfterRefact": "class Person {\n  get name() {...}",
        "ZeroShotCode": "```java\nclass Person {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String aString) {\n        this.name = aString;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n    private final String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```",
        "ContextCode": "```java\npublic class Person {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n    private final String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```"
    },
    "FOWLER_EX_REPLACE DERIVED VARIABLE WITH QUERY": {
        "RefactMethod": "REPLACE DERIVED VARIABLE WITH QUERY",
        "BeforeRefact": "get discountedTotal() {return this._discountedTotal;}\nset discount(aNumber) {\n    const old = this._discount;\n    this._discount = aNumber;\n    this._discountedTotal += old - aNumber; \n}",
        "AfterRefact": "get discountedTotal() {return this._baseTotal - this._discount;}\nset discount(aNumber) {this._discount = aNumber;}",
        "ZeroShotCode": "```java\nprivate double discount;\nprivate double discountedTotal;\n\npublic double getDiscountedTotal() {\n    return discountedTotal;\n}\n\npublic void setDiscount(double aNumber) {\n    double old = this.discount;\n    this.discount = aNumber;\n    this.discountedTotal += old - aNumber; \n}\n```",
        "InstrucCode": "```java\npublic double getDiscountedTotal() {\n    return calculateDiscountedTotal();\n}\n\npublic void setDiscount(double aNumber) {\n    this._discount = aNumber;\n}\n\nprivate double calculateDiscountedTotal() {\n    // Calculate discounted total based on current discount\n    return originalTotal - (originalTotal * this._discount / 100);\n}\n```",
        "ContextCode": "```java\npublic class ShoppingCart {\n    private double discountedTotal;\n    private double discount;\n\n    public double getDiscountedTotal() {\n        return this.discountedTotal;\n    }\n\n    public void setDiscount(double aNumber) {\n        double oldDiscount = this.discount;\n        this.discount = aNumber;\n        this.discountedTotal += oldDiscount - aNumber; \n    }\n}\n```"
    },
    "FOWLER_EX_SUBSTITUTE ALGORITHM": {
        "RefactMethod": "SUBSTITUTE ALGORITHM",
        "BeforeRefact": "function foundPerson(people) {\n  for(let i = 0; i < people.length; i++) {\n    if (people[i] === \u201cDon\u201d) {\n      return \u201cDon\u201d;\n    }\n    if (people[i] === \u201cJohn\u201d) {\n      return \u201cJohn\u201d;\n    }\n    if (people[i] === \u201cKent\u201d) {\n      return \u201cKent\u201d;\n    }\n  }\n  return \u201c\u201d;\n}",
        "AfterRefact": "function foundPerson(people) {\n  const candidates = [\u201dDon\u201d, \u201cJohn\u201d, \u201cKent\u201d];\n  return people.find(p => candidates.includes(p)) || '';\n}",
        "ZeroShotCode": "```java\npublic String foundPerson(List<String> people) {\n    for (String person : people) {\n        if (person.equals(\"Don\") || person.equals(\"John\") || person.equals(\"Kent\")) {\n            return person;\n        }\n    }\n    return \"\";\n}\n```",
        "InstrucCode": "```java\nimport java.util.List;\n\npublic class PersonFinder {\n    public String foundPerson(List<String> people) {\n        for (String person : people) {\n            if (isTargetPerson(person)) {\n                return person;\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isTargetPerson(String person) {\n        return \"Don\".equals(person) || \"John\".equals(person) || \"Kent\".equals(person);\n    }\n}\n```",
        "ContextCode": "```java\npublic String foundPerson(List<String> people) {\n    Set<String> targetNames = new HashSet<>(Arrays.asList(\"Don\", \"John\", \"Kent\"));\n    \n    for (String person : people) {\n        if (targetNames.contains(person)) {\n            return person;\n        }\n    }\n    \n    return \"\";\n}\n```",
        "RulesCode": "```java\npublic String foundPerson(String[] people) {\n    for (String person : people) {\n        if (person.equals(\"Don\") || person.equals(\"John\") || person.equals(\"Kent\")) {\n            return person;\n        }\n    }\n    return \"\";\n}\n```"
    },
    "FOWLER_EX_REPLACE CONDITIONAL WITH POLYMORPHISM": {
        "RefactMethod": "REPLACE CONDITIONAL WITH POLYMORPHISM",
        "BeforeRefact": "switch (bird.type) {\n  case 'EuropeanSwallow':\n    return \u201caverage\u201d;\n  case 'AfricanSwallow':\n    return (bird.numberOfCoconuts > 2) ? \u201ctired\u201d : \u201caverage\u201d;\n  case 'NorwegianBlueParrot':\n    return (bird.voltage > 100) ? \u201cscorched\u201d : \u201cbeautiful\u201d;\n  default:\n    return \u201cunknown\u201d;",
        "AfterRefact": "class EuropeanSwallow {\n  get plumage() {\n    return \u201caverage\u201d;\n  }\nclass AfricanSwallow {\n  get plumage() {\n     return (this.numberOfCoconuts > 2) ? \u201ctired\u201d : \u201caverage\u201d;\n  }\nclass NorwegianBlueParrot {\n  get plumage() {\n     return (this.voltage > 100) ? \u201cscorched\u201d : \u201cbeautiful\u201d;\n  }",
        "ZeroShotCode": "```java\nabstract class Bird {\n    public abstract String getStatus();\n}\n\nclass EuropeanSwallow extends Bird {\n    @Override\n    public String getStatus() {\n        return \"average\";\n    }\n}\n\nclass AfricanSwallow extends Bird {\n    private int numberOfCoconuts;\n\n    public AfricanSwallow(int numberOfCoconuts) {\n        this.numberOfCoconuts = numberOfCoconuts;\n    }\n\n    @Override\n    public String getStatus() {\n        return (numberOfCoconuts > 2) ? \"tired\" : \"average\";\n    }\n}\n\nclass NorwegianBlueParrot extends Bird {\n    private int voltage;\n\n    public NorwegianBlueParrot(int voltage) {\n        this.voltage = voltage;\n    }\n\n    @Override\n    public String getStatus() {\n        return (voltage > 100) ? \"scorched\" : \"beautiful\";\n    }\n}\n\nclass UnknownBird extends Bird {\n    @Override\n    public String getStatus() {\n        return \"unknown\";\n    }\n}\n\n// Example usage\nBird bird = // create an instance of a specific bird type\nString status = bird.getStatus();\n```",
        "InstrucCode": "```java\n// Bird.java\nabstract class Bird {\n    protected String type;\n\n    public Bird(String type) {\n        this.type = type;\n    }\n\n    public abstract String getDescription();\n}\n\n// EuropeanSwallow.java\nclass EuropeanSwallow extends Bird {\n    public EuropeanSwallow() {\n        super(\"EuropeanSwallow\");\n    }\n\n    @Override\n    public String getDescription() {\n        return \"average\";\n    }\n}\n\n// AfricanSwallow.java\nclass AfricanSwallow extends Bird {\n    private int numberOfCoconuts;\n\n    public AfricanSwallow(int numberOfCoconuts) {\n        super(\"AfricanSwallow\");\n        this.numberOfCoconuts = numberOfCoconuts;\n    }\n\n    @Override\n    public String getDescription() {\n        return (numberOfCoconuts > 2) ? \"tired\" : \"average\";\n    }\n}\n\n// NorwegianBlueParrot.java\nclass NorwegianBlueParrot extends Bird {\n    private int voltage;\n\n    public NorwegianBlueParrot(int voltage) {\n        super(\"NorwegianBlueParrot\");\n        this.voltage = voltage;\n    }\n\n    @Override\n    public String getDescription() {\n        return (voltage > 100) ? \"scorched\" : \"beautiful\";\n    }\n}\n\n// BirdFactory.java\nclass BirdFactory {\n    public static Bird createBird(String type, int... params) {\n        switch (type) {\n            case \"EuropeanSwallow\":\n                return new EuropeanSwallow();\n            case \"AfricanSwallow\":\n                return new AfricanSwallow(params[0]);\n            case \"NorwegianBlueParrot\":\n                return new NorwegianBlueParrot(params[0]);\n            default:\n                throw new IllegalArgumentException(\"Unknown bird type\");\n        }\n    }\n}\n\n// Usage example\npublic class BirdWatcher {\n    public static void main(String[] args) {\n        Bird bird = BirdFactory.createBird(\"AfricanSwallow\", 3);\n        System.out.println(bird.getDescription()); // Output: tired\n    }\n}\n```",
        "ContextCode": "```java\npublic String getBirdStatus(Bird bird) {\n    switch (bird.getType()) {\n        case EUROPEAN_SWALLOW:\n            return \"average\";\n        case AFRICAN_SWALLOW:\n            return bird.getNumberOfCoconuts() > 2 ? \"tired\" : \"average\";\n        case NORWEGIAN_BLUE_PARROT:\n            return bird.getVoltage() > 100 ? \"scorched\" : \"beautiful\";\n        default:\n            return \"unknown\";\n    }\n}\n```",
        "RulesCode": "```java\nabstract class Bird {\n    abstract String getStatus();\n}\n\nclass EuropeanSwallow extends Bird {\n    @Override\n    String getStatus() {\n        return \"average\";\n    }\n}\n\nclass AfricanSwallow extends Bird {\n    private int numberOfCoconuts;\n\n    AfricanSwallow(int numberOfCoconuts) {\n        this.numberOfCoconuts = numberOfCoconuts;\n    }\n\n    @Override\n    String getStatus() {\n        return (numberOfCoconuts > 2) ? \"tired\" : \"average\";\n    }\n}\n\nclass NorwegianBlueParrot extends Bird {\n    private int voltage;\n\n    NorwegianBlueParrot(int voltage) {\n        this.voltage = voltage;\n    }\n\n    @Override\n    String getStatus() {\n        return (voltage > 100) ? \"scorched\" : \"beautiful\";\n    }\n}\n\nclass BirdFactory {\n    public static Bird createBird(String type, int attribute) {\n        switch (type) {\n            case \"EuropeanSwallow\":\n                return new EuropeanSwallow();\n            case \"AfricanSwallow\":\n                return new AfricanSwallow(attribute);\n            case \"NorwegianBlueParrot\":\n                return new NorwegianBlueParrot(attribute);\n            default:\n                throw new IllegalArgumentException(\"Unknown bird type\");\n        }\n    }\n}\n```"
    },
    "FOWLER_EX_DECOMPOSE CONDITIONAL": {
        "RefactMethod": "DECOMPOSE CONDITIONAL",
        "BeforeRefact": "if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))\n  charge = quantity * plan.summerRate;\nelse\n  charge = quantity * plan.regularRate + plan.regularServiceCharge;",
        "AfterRefact": "if (summer())\n  charge = summerCharge();\nelse\n  charge = regularCharge();",
        "ZeroShotCode": "```java\ndouble charge;\n\nif (isSummer(aDate, plan)) {\n    charge = quantity * plan.summerRate;\n} else {\n    charge = quantity * plan.regularRate + plan.regularServiceCharge;\n}\n\nprivate boolean isSummer(LocalDate aDate, Plan plan) {\n    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);\n}\n```",
        "InstrucCode": "```java\ndouble charge;\nif (isInSummer(aDate, plan)) {\n    charge = calculateSummerCharge(quantity, plan);\n} else {\n    charge = calculateRegularCharge(quantity, plan);\n}\n\nprivate boolean isInSummer(LocalDate aDate, Plan plan) {\n    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);\n}\n\nprivate double calculateSummerCharge(int quantity, Plan plan) {\n    return quantity * plan.summerRate;\n}\n\nprivate double calculateRegularCharge(int quantity, Plan plan) {\n    return quantity * plan.regularRate + plan.regularServiceCharge;\n}\n```",
        "ContextCode": "```java\ncharge = (aDate.isAfter(plan.summerStart) && aDate.isBefore(plan.summerEnd))\n    ? quantity * plan.summerRate\n    : quantity * plan.regularRate + plan.regularServiceCharge;\n```",
        "RulesCode": "```java\nif (isSummerCharge(aDate, plan)) {\n    charge = calculateSummerCharge(quantity, plan);\n} else {\n    charge = calculateRegularCharge(quantity, plan);\n}\n\nprivate boolean isSummerCharge(LocalDate aDate, Plan plan) {\n    return !aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd);\n}\n\nprivate double calculateSummerCharge(int quantity, Plan plan) {\n    return quantity * plan.summerRate;\n}\n\nprivate double calculateRegularCharge(int quantity, Plan plan) {\n    return quantity * plan.regularRate + plan.regularServiceCharge;\n}\n```"
    },
    "FOWLER_EX_EXTRACT SUPERCLASS": {
        "RefactMethod": "EXTRACT SUPERCLASS",
        "BeforeRefact": "class Department {\n  get totalAnnualCost() {...}\n  get name() {...}\n  get headCount() {...}\n}\n\nclass Employee {\n  get annualCost() {...}\n  get name() {...}\n  get id() {...}\n}",
        "AfterRefact": "class Party {\n  get name() {...}\n  get annualCost() {...}\n}\n\nclass Department extends Party {\n  get annualCost() {...}\n  get headCount() {...}\n}\n\nclass Employee extends Party {\n  get annualCost() {...}\n  get id() {...}\n}",
        "ZeroShotCode": "```java\nclass Entity {\n    protected String name;\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass Department extends Entity {\n    public double getTotalAnnualCost() {\n        // Implementation\n    }\n\n    public int getHeadCount() {\n        // Implementation\n    }\n}\n\nclass Employee extends Entity {\n    private String id;\n    \n    public double getAnnualCost() {\n        // Implementation\n    }\n\n    public String getId() {\n        return id;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Organization {\n    protected String name;\n\n    public String getName() {\n        return name;\n    }\n}\n\nclass Department extends Organization {\n    public double getTotalAnnualCost() {\n        // Implementation here...\n    }\n\n    public int getHeadCount() {\n        // Implementation here...\n    }\n}\n\nclass Employee extends Organization {\n    private String id;\n\n    public double getAnnualCost() {\n        // Implementation here...\n    }\n\n    public String getId() {\n        return id;\n    }\n}\n```",
        "ContextCode": "```java\nclass Department {\n    private double totalAnnualCost;\n    private String name;\n    private int headCount;\n\n    public double getTotalAnnualCost() {\n        return totalAnnualCost;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getHeadCount() {\n        return headCount;\n    }\n}\n\nclass Employee {\n    private double annualCost;\n    private String name;\n    private int id;\n\n    public double getAnnualCost() {\n        return annualCost;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n    get name() {...}\n}\n\nclass Department extends Person {\n    get totalAnnualCost() {...}\n    get headCount() {...}\n}\n\nclass Employee extends Person {\n    get annualCost() {...}\n    get id() {...}\n}\n```"
    },
    "FOWLER_EX_REPLACE LOOP WITH PIPELINE": {
        "RefactMethod": "REPLACE LOOP WITH PIPELINE",
        "BeforeRefact": "const names = [];\nfor (const i of input) {\n    if (i.job === \u201cprogrammer\u201d)\n        names.push(i.name);\n}",
        "AfterRefact": "const names = input\n    .filter(i => i.job === \u201cprogrammer\u201d)\n    .map(i => i.name)\n;",
        "ZeroShotCode": "```java\nList<String> names = input.stream()\n                          .filter(i -> \"programmer\".equals(i.getJob()))\n                          .map(i -> i.getName())\n                          .collect(Collectors.toList());\n```",
        "InstrucCode": "```javascript\nconst names = input.filter(i => i.job === \"programmer\").map(i => i.name);\n```",
        "ContextCode": "```java\nList<String> names = new ArrayList<>();\nfor (InputType i : input) {\n    if (\"programmer\".equals(i.getJob())) {\n        names.add(i.getName());\n    }\n}\n```"
    },
    "FOWLER_EX_REPLACE SUPERCLASS WITH DELEGATE": {
        "RefactMethod": "REPLACE SUPERCLASS WITH DELEGATE",
        "BeforeRefact": "class List {...}\nclass Stack extends List {...}",
        "AfterRefact": "class Stack {\n  constructor() {\n    this._storage = new List();\n  }\n}\nclass List {...}",
        "ZeroShotCode": "```java\nclass List {\n    // List functionality here\n}\n\nclass Stack {\n    private List list = new List();\n\n    // Stack functionality that delegates to list\n}\n```",
        "InstrucCode": "```java\nclass List {\n    // Superclass methods and properties\n}\n\nclass Stack {\n    private List delegate;\n\n    public Stack() {\n        this.delegate = new List();\n    }\n\n    // Forwarding methods to delegate\n    // Example methods below will depend on actual List implementation\n\n    public void someListMethod() {\n        delegate.someListMethod();\n    }\n\n    public void anotherListMethod() {\n        delegate.anotherListMethod();\n    }\n\n    // Add additional forwarding methods as needed\n}\n```",
        "ContextCode": "```java\nclass List {\n    // List related methods and fields\n}\n\nclass Stack extends List {\n    // Stack related methods and fields\n}\n```",
        "RulesCode": "```java\nclass List {\n    // List implementation\n}\n\nclass Stack {\n    private List delegate;\n\n    public Stack(List delegate) {\n        this.delegate = delegate;\n    }\n\n    // Additional Stack methods and delegation to List methods\n}\n```"
    },
    "FOWLER_EX_COMBINE FUNCTIONS INTO TRANSFORM": {
        "RefactMethod": "COMBINE FUNCTIONS INTO TRANSFORM",
        "BeforeRefact": "function base(aReading) {...}\nfunction taxableCharge(aReading) {...}",
        "AfterRefact": "function enrichReading(argReading) {\n  const aReading = _.cloneDeep(argReading);\n  aReading.baseCharge = base(aReading);\n  aReading.taxableCharge = taxableCharge(aReading);\n  return aReading;\n}\n",
        "ZeroShotCode": "```java\npublic class ChargeCalculator {\n    public double calculateCharge(Reading aReading) {\n        return base(aReading) + taxableCharge(aReading);\n    }\n\n    private double base(Reading aReading) {\n        // original base implementation\n    }\n\n    private double taxableCharge(Reading aReading) {\n        // original taxableCharge implementation\n    }\n}\n```",
        "InstrucCode": "```java\nclass Reading {\n    private double value;\n    private boolean taxable;\n\n    // Constructor and getters\n    public Reading(double value) {\n        this.value = value;\n        this.taxable = false; // Default is non-taxable\n    }\n\n    public double getValue() {\n        return value;\n    }\n\n    public boolean isTaxable() {\n        return taxable;\n    }\n\n    public void setTaxable(boolean taxable) {\n        this.taxable = taxable;\n    }\n\n    // Transformation function to add taxable field\n    public Reading transform() {\n        Reading newReading = new Reading(this.value);\n        newReading.setTaxable(this.value > 50); // Example logic for taxability\n        return newReading;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Reading aReading = new Reading(60);\n        \n        // Create a transformed reading\n        Reading transformedReading = aReading.transform();\n\n        // Access the new fields\n        System.out.println(\"Value: \" + transformedReading.getValue());\n        System.out.println(\"Taxable: \" + transformedReading.isTaxable());\n    }\n}\n```",
        "ContextCode": "```java\npublic class ElectricityBill {\n    private final Reading reading;\n\n    public ElectricityBill(Reading reading) {\n        this.reading = reading;\n    }\n\n    public double base() {\n        // Logic for base calculation based on reading\n    }\n\n    public double taxableCharge() {\n        // Logic for taxable charge calculation based on reading\n    }\n}\n\nclass Reading {\n    // Properties and methods to represent and work with readings\n}\n```"
    },
    "FOWLER_EX_PARAMETERIZE FUNCTION": {
        "RefactMethod": "PARAMETERIZE FUNCTION",
        "BeforeRefact": "function tenPercentRaise(aPerson) {\n  aPerson.salary = aPerson.salary.multiply(1.1);\n}\nfunction fivePercentRaise(aPerson) {\n  aPerson.salary = aPerson.salary.multiply(1.05);\n}",
        "AfterRefact": "function raise(aPerson, factor) {\n  aPerson.salary = aPerson.salary.multiply(1 + factor);\n}",
        "ZeroShotCode": "```java\npublic void applyRaise(Person aPerson, double raiseFactor) {\n    aPerson.salary = aPerson.salary.multiply(raiseFactor);\n}\n\npublic void tenPercentRaise(Person aPerson) {\n    applyRaise(aPerson, 1.1);\n}\n\npublic void fivePercentRaise(Person aPerson) {\n    applyRaise(aPerson, 1.05);\n}\n```",
        "InstrucCode": "```javascript\nfunction applyRaise(aPerson, raiseFactor) {\n  aPerson.salary = aPerson.salary.multiply(raiseFactor);\n}\n\nfunction tenPercentRaise(aPerson) {\n  applyRaise(aPerson, 1.1);\n}\n\nfunction fivePercentRaise(aPerson) {\n  applyRaise(aPerson, 1.05);\n}\n```",
        "ContextCode": "```java\npublic class SalaryAdjuster {\n    private static final double TEN_PERCENT_RAISE = 1.1;\n    private static final double FIVE_PERCENT_RAISE = 1.05;\n\n    public static void applyRaise(Person person, double percentage) {\n        person.setSalary(person.getSalary().multiply(percentage));\n    }\n\n    public static void applyTenPercentRaise(Person person) {\n        applyRaise(person, TEN_PERCENT_RAISE);\n    }\n\n    public static void applyFivePercentRaise(Person person) {\n        applyRaise(person, FIVE_PERCENT_RAISE);\n    }\n}\n```",
        "RulesCode": "```java\npublic void applyRaise(Person aPerson, double percentage) {\n    aPerson.salary = aPerson.salary.multiply(1 + percentage);\n}\n\npublic void tenPercentRaise(Person aPerson) {\n    applyRaise(aPerson, 0.1);\n}\n\npublic void fivePercentRaise(Person aPerson) {\n    applyRaise(aPerson, 0.05);\n}\n```"
    },
    "FOWLER_EX_REMOVE FLAG ARGUMENT": {
        "RefactMethod": "REMOVE FLAG ARGUMENT",
        "BeforeRefact": "function setDimension(name, value) {\n  if (name === \u201cheight\u201d) {\n    this._height = value;\n    return;\n  }\n  if (name === \u201cwidth\u201d) {\n    this._width = value;\n    return;\n  }\n}",
        "AfterRefact": "function setHeight(value) {this._height = value;}\nfunction setWidth (value) {this._width = value;}",
        "ZeroShotCode": "```java\npublic void setHeight(int height) {\n    this._height = height;\n}\n\npublic void setWidth(int width) {\n    this._width = width;\n}\n```",
        "InstrucCode": "```java\npublic void setHeight(int height) {\n    this._height = height;\n}\n\npublic void setWidth(int width) {\n    this._width = width;\n}\n```",
        "ContextCode": "```java\npublic void setDimension(String name, int value) {\n    switch (name) {\n        case \"height\":\n            this._height = value;\n            break;\n        case \"width\":\n            this._width = value;\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid dimension name: \" + name);\n    }\n}\n```",
        "RulesCode": "```javascript\nfunction setHeight(value) {\n  this._height = value;\n}\n\nfunction setWidth(value) {\n  this._width = value;\n}\n```"
    },
    "FOWLER_EX_REPLACE PARAMETER WITH QUERY": {
        "RefactMethod": "REPLACE PARAMETER WITH QUERY",
        "BeforeRefact": "availableVacation(anEmployee, anEmployee.grade);\n\nfunction availableVacation(anEmployee, grade) {\n  // calculate vacation...",
        "AfterRefact": "availableVacation(anEmployee)\n\nfunction availableVacation(anEmployee) {\n  const grade = anEmployee.grade;\n  // calculate vacation...",
        "ZeroShotCode": "```java\navailableVacation(anEmployee);\n\nfunction availableVacation(anEmployee) {\n  int grade = anEmployee.grade;\n  // calculate vacation...\n}\n```",
        "InstrucCode": "```java\nfunction availableVacation(anEmployee) {\n  int grade = anEmployee.getGrade();\n  // calculate vacation...\n}\n```",
        "ContextCode": "```java\npublic class Employee {\n    private String name;\n    private int grade;\n\n    public Employee(String name, int grade) {\n        this.name = name;\n        this.grade = grade;\n    }\n\n    public int getGrade() {\n        return grade;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class VacationCalculator {\n    public int availableVacation(Employee employee) {\n        return calculateVacation(employee.getGrade());\n    }\n\n    private int calculateVacation(int grade) {\n        // Implementation of vacation calculation based on grade\n        switch (grade) {\n            case 1:\n                return 10; // Example for grade 1\n            case 2:\n                return 15; // Example for grade 2\n            case 3:\n                return 20; // Example for grade 3\n            default:\n                return 0;  // Default case for unspecified grades\n        }\n    }\n}\n```",
        "RulesCode": "```java\navailableVacation(anEmployee);\n\nfunction availableVacation(anEmployee) {\n    // calculate vacation using anEmployee.grade\n}\n```"
    },
    "FOWLER_EX_REPLACE COMMAND WITH FUNCTION": {
        "RefactMethod": "REPLACE COMMAND WITH FUNCTION",
        "BeforeRefact": "class ChargeCalculator {\n  constructor (customer, usage){\n    this._customer = customer;\n    this._usage = usage;\n  }\n  execute() {\n    return this._customer.rate * this._usage;\n  }\n}",
        "AfterRefact": "function charge(customer, usage) {\n  return customer.rate * usage;\n}",
        "ZeroShotCode": "```java\npublic class ChargeCalculator {\n    private Customer customer;\n    private double usage;\n\n    public ChargeCalculator(Customer customer, double usage) {\n        this.customer = customer;\n        this.usage = usage;\n    }\n\n    public double execute() {\n        return calculateCharge();\n    }\n\n    private double calculateCharge() {\n        return customer.getRate() * usage;\n    }\n}\n```",
        "InstrucCode": "```java\nclass ChargeCalculator {\n  private Customer customer;\n  private int usage;\n\n  public ChargeCalculator(Customer customer, int usage) {\n    this.customer = customer;\n    this.usage = usage;\n  }\n\n  public double calculateCharge() {\n    return calculateRate(customer, usage);\n  }\n\n  private double calculateRate(Customer customer, int usage) {\n    return customer.getRate() * usage;\n  }\n}\n```",
        "ContextCode": "```java\nclass ChargeCalculator {\n    private Customer customer;\n    private double usage;\n\n    public ChargeCalculator(Customer customer, double usage) {\n        this.customer = customer;\n        this.usage = usage;\n    }\n\n    public double execute() {\n        return customer.getRate() * usage;\n    }\n}\n```"
    },
    "FOWLER_EX_CHANGE FUNCTION DECLARATION": {
        "RefactMethod": "CHANGE FUNCTION DECLARATION",
        "BeforeRefact": "function circum(radius) {...}",
        "AfterRefact": "function circumference(radius) {...}",
        "ZeroShotCode": "```java\npublic double circum(double radius) {\n    // Implementation goes here\n}\n```",
        "InstrucCode": "```java\npublic double circum(double radius) {\n    return 2 * Math.PI * radius;\n}\n```",
        "ContextCode": "```java\npublic class Circle {\n\n    public static double calculateCircumference(double radius) {\n        return 2 * Math.PI * radius;\n    }\n}\n```",
        "RulesCode": "```java\npublic double circum(double radius) {\n    // function body\n}\n```"
    },
    "FOWLER_EX_RENAME FIELD": {
        "RefactMethod": "RENAME FIELD",
        "BeforeRefact": "class Organization {\n  get name() {...}\n}",
        "AfterRefact": "class Organization {\n  get title() {...}\n}",
        "ZeroShotCode": "```java\nclass Organization {\n    private String organizationName;\n\n    public String getOrganizationName() {\n        return organizationName;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Organization {\n    private String organizationName;\n\n    public String getOrganizationName() {\n        return organizationName;\n    }\n\n    // Other methods and constructor can be defined as needed\n}\n```",
        "ContextCode": "```java\nclass Organization {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```"
    },
    "FOWLER_EX_REPLACE INLINE CODE WITH FUNCTION CALL": {
        "RefactMethod": "REPLACE INLINE CODE WITH FUNCTION CALL",
        "BeforeRefact": "let appliesToMass = false;\nfor(const s of states) {\n    if (s === \u201cMA\u201d) appliesToMass = true;\n}",
        "AfterRefact": "appliesToMass = states.includes(\u201cMA\u201d);",
        "ZeroShotCode": "```java\nboolean appliesToMass = checkAppliesToMass(states);\n\nprivate boolean checkAppliesToMass(String[] states) {\n    for (String s : states) {\n        if (s.equals(\"MA\")) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
        "InstrucCode": "```java\nboolean appliesToMass = false;\nfor (String s : states) {\n    if (s.equals(\"MA\")) {\n        appliesToMass = Test();\n        break;\n    }\n}\n```",
        "ContextCode": "```java\nboolean appliesToMass = Arrays.asList(states).contains(\"MA\");\n```"
    },
    "FOWLER_EX_MOVE FUNCTION": {
        "RefactMethod": "MOVE FUNCTION",
        "BeforeRefact": "class Account {\n    get overdraftCharge() {...}",
        "AfterRefact": "class AccountType {\n    get overdraftCharge() {...}",
        "ZeroShotCode": "```java\nclass Account {\n    private double overdraftAmount;\n\n    public double getOverdraftCharge() {\n        return calculateOverdraftCharge();\n    }\n\n    private double calculateOverdraftCharge() {\n        // Calculation logic for overdraft charge goes here\n        return overdraftAmount; // Placeholder logic\n    }\n}\n```",
        "InstrucCode": "```java\nclass Account {\n    public double overdraftCharge() {\n        // implementation...\n    }\n}\n\nclass PremiumAccount extends Account {\n    @Override\n    public double overdraftCharge() {\n        // implementation for PremiumAccount...\n    }\n}\n```",
        "ContextCode": "```java\nclass Account {\n    public double getOverdraftCharge() {\n        // Implementation of overdraft charge calculation\n    }\n}\n```",
        "RulesCode": "```java\nclass Account {\n    get overdraftCharge() {...}\n}\n\nclass Customer {\n    get overdraftCharge() {...}\n}\n```"
    },
    "FOWLER_EX_SPLIT VARIABLE": {
        "RefactMethod": "SPLIT VARIABLE",
        "BeforeRefact": "let temp = 2 * (height + width);\nconsole.log(temp);\ntemp = height * width;\nconsole.log(temp);",
        "AfterRefact": "const perimeter = 2 * (height + width);\nconsole.log(perimeter);\nconst area = height * width;\nconsole.log(area);",
        "ZeroShotCode": "```java\nint perimeter = 2 * (height + width);\nSystem.out.println(perimeter);\nint area = height * width;\nSystem.out.println(area);\n```",
        "InstrucCode": "```java\nlet areaPerimeter = 2 * (height + width);\nconsole.log(areaPerimeter);\nlet area = height * width;\nconsole.log(area);\n```",
        "ContextCode": "```java\nint perimeter = 2 * (height + width);\nSystem.out.println(perimeter);\n\nint area = height * width;\nSystem.out.println(area);\n```",
        "RulesCode": "```java\nint temp1 = 2 * (height + width);\nSystem.out.println(temp1);\n\nint temp2 = height * width;\nSystem.out.println(temp2);\n```"
    },
    "FOWLER_EX_REPLACE QUERY WITH PARAMETER": {
        "RefactMethod": "REPLACE QUERY WITH PARAMETER",
        "BeforeRefact": "targetTemperature(aPlan)\n\nfunction targetTemperature(aPlan) {\n    currentTemperature = thermostat.currentTemperature;\n    // rest of function...\n}",
        "AfterRefact": "targetTemperature(aPlan, thermostat.currentTemperature)\n\nfunction targetTemperature(aPlan, currentTemperature) {\n  // rest of function...\n}",
        "ZeroShotCode": "```java\npublic void targetTemperature(Plan aPlan) {\n    double currentTemperature = thermostat.getCurrentTemperature();\n    // rest of function...\n}\n```",
        "InstrucCode": "```java\npublic double targetTemperature(Plan aPlan) {\n    return calculateTargetTemperature(thermostat.currentTemperature, aPlan);\n}\n\nprivate double calculateTargetTemperature(double currentTemperature, Plan aPlan) {\n    // rest of function...\n}\n```",
        "ContextCode": "```java\npublic void targetTemperature(Plan aPlan) {\n    double currentTemperature = thermostat.getCurrentTemperature();\n    // rest of function...\n}\n```"
    },
    "FOWLER_EX_INTRODUCE SPECIAL CASE": {
        "RefactMethod": "INTRODUCE SPECIAL CASE",
        "BeforeRefact": "if (aCustomer === \u201cunknown\u201d) customerName = \u201coccupant\u201d;",
        "AfterRefact": "class UnknownCustomer {\n    get name() {return \u201coccupant\u201d;}",
        "ZeroShotCode": "```java\nif (isUnknownCustomer(aCustomer)) {\n    customerName = \"occupant\";\n}\n\nprivate boolean isUnknownCustomer(String customer) {\n    return \"unknown\".equals(customer);\n}\n```",
        "InstrucCode": "```java\nclass Customer {\n    private String name;\n\n    public Customer(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public boolean isSpecialCase() {\n        return \"unknown\".equals(name);\n    }\n}\n\nclass SpecialCaseCustomer extends Customer {\n    public SpecialCaseCustomer() {\n        super(\"occupant\");\n    }\n\n    @Override\n    public boolean isSpecialCase() {\n        return true;\n    }\n}\n\npublic class CustomerHandler {\n    public String getCustomerName(Customer aCustomer) {\n        if (aCustomer.isSpecialCase()) {\n            return new SpecialCaseCustomer().getName();\n        } else {\n            return aCustomer.getName();\n        }\n    }\n}\n```",
        "ContextCode": "```java\ncustomerName = \"unknown\".equals(aCustomer) ? \"occupant\" : customerName;\n```",
        "RulesCode": "```java\ncustomerName = Customer.NULL.getName();\n```"
    },
    "FOWLER_EX_REMOVE DEAD CODE": {
        "RefactMethod": "REMOVE DEAD CODE",
        "BeforeRefact": "if(false) {\n  doSomethingThatUsedToMatter();\n}",
        "AfterRefact": "",
        "ZeroShotCode": "```java\n```",
        "InstrucCode": "```java\n// No code needed as the condition is always false.\n```",
        "ContextCode": "```java\n// No operation needed as the condition is always false\n```"
    },
    "FOWLER_EX_RENAME VARIABLE": {
        "RefactMethod": "RENAME VARIABLE",
        "BeforeRefact": "let a = height * width;",
        "AfterRefact": "let area = height * width;",
        "ZeroShotCode": "```java\nlet area = height * width;\n```",
        "InstrucCode": "```java\nint area = height * width;\n```",
        "ContextCode": "```java\nint area = height * width;\n```"
    },
    "FOWLER_EX_REPLACE TYPE CODE WITH SUBCLASSES": {
        "RefactMethod": "REPLACE TYPE CODE WITH SUBCLASSES",
        "BeforeRefact": "function createEmployee(name, type) {\n  return new Employee(name, type);\n}",
        "AfterRefact": "function createEmployee(name, type) {\n  switch (type) {\n    case \u201cengineer\u201d: return new Engineer(name);\n    case \u201csalesman\u201d: return new Salesman(name);\n    case \u201cmanager\u201d:  return new Manager (name);\n  }",
        "ZeroShotCode": "```java\nabstract class Employee {\n    protected String name;\n\n    public Employee(String name) {\n        this.name = name;\n    }\n\n    public abstract String getType();\n}\n\nclass FullTimeEmployee extends Employee {\n    public FullTimeEmployee(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Full-Time\";\n    }\n}\n\nclass PartTimeEmployee extends Employee {\n    public PartTimeEmployee(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Part-Time\";\n    }\n}\n\nclass ContractEmployee extends Employee {\n    public ContractEmployee(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Contract\";\n    }\n}\n\npublic class EmployeeFactory {\n    public static Employee createEmployee(String name, String type) {\n        switch (type) {\n            case \"FullTime\":\n                return new FullTimeEmployee(name);\n            case \"PartTime\":\n                return new PartTimeEmployee(name);\n            case \"Contract\":\n                return new ContractEmployee(name);\n            default:\n                throw new IllegalArgumentException(\"Unknown employee type: \" + type);\n        }\n    }\n}\n```",
        "InstrucCode": "```java\nabstract class Employee {\n    protected String name;\n\n    public Employee(String name) {\n        this.name = name;\n    }\n\n    public abstract String getType();\n}\n\nclass FullTimeEmployee extends Employee {\n    public FullTimeEmployee(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"FullTime\";\n    }\n}\n\nclass PartTimeEmployee extends Employee {\n    public PartTimeEmployee(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"PartTime\";\n    }\n}\n\nclass ContractorEmployee extends Employee {\n    public ContractorEmployee(String name) {\n        super(name);\n    }\n\n    @Override\n    public String getType() {\n        return \"Contractor\";\n    }\n}\n\nclass EmployeeFactory {\n    public static Employee createEmployee(String name, String type) {\n        switch (type) {\n            case \"FullTime\":\n                return new FullTimeEmployee(name);\n            case \"PartTime\":\n                return new PartTimeEmployee(name);\n            case \"Contractor\":\n                return new ContractorEmployee(name);\n            default:\n                throw new IllegalArgumentException(\"Unknown employee type\");\n        }\n    }\n}\n```",
        "ContextCode": "```java\npublic Employee createEmployee(String name, String type) {\n    return new Employee(name, type);\n}\n```",
        "RulesCode": "```java\nabstract class Employee {\n    String name;\n\n    Employee(String name) {\n        this.name = name;\n    }\n}\n\nclass FullTimeEmployee extends Employee {\n    FullTimeEmployee(String name) {\n        super(name);\n    }\n}\n\nclass PartTimeEmployee extends Employee {\n    PartTimeEmployee(String name) {\n        super(name);\n    }\n}\n\nclass EmployeeFactory {\n    public static Employee createEmployee(String name, String type) {\n        if (type.equals(\"FullTime\")) {\n            return new FullTimeEmployee(name);\n        } else if (type.equals(\"PartTime\")) {\n            return new PartTimeEmployee(name);\n        }\n        throw new IllegalArgumentException(\"Unknown employee type\");\n    }\n}\n```"
    },
    "FOWLER_EX_INLINE FUNCTION": {
        "RefactMethod": "INLINE FUNCTION",
        "BeforeRefact": "function getRating(driver) {\n  return moreThanFiveLateDeliveries(driver) ? 2 : 1;\n}\n\nfunction moreThanFiveLateDeliveries(driver) {\n  return driver.numberOfLateDeliveries > 5;\n}",
        "AfterRefact": "function getRating(driver) {\n  return (driver.numberOfLateDeliveries > 5) ? 2 : 1;\n}",
        "ZeroShotCode": "```java\nfunction getRating(driver) {\n    return driver.numberOfLateDeliveries > 5 ? 2 : 1;\n}\n```",
        "InstrucCode": "```java\npublic int getRating(Driver driver) {\n    return driver.numberOfLateDeliveries > 5 ? 2 : 1;\n}\n```",
        "ContextCode": "```java\npublic class Driver {\n    private int numberOfLateDeliveries;\n\n    public Driver(int numberOfLateDeliveries) {\n        this.numberOfLateDeliveries = numberOfLateDeliveries;\n    }\n\n    public int getRating() {\n        return hasMoreThanFiveLateDeliveries() ? 2 : 1;\n    }\n\n    private boolean hasMoreThanFiveLateDeliveries() {\n        return this.numberOfLateDeliveries > 5;\n    }\n}\n```",
        "RulesCode": "```java\nfunction getRating(driver) {\n  return driver.numberOfLateDeliveries > 5 ? 2 : 1;\n}\n```"
    },
    "FOWLER_EX_COMBINE FUNCTIONS INTO CLASS": {
        "RefactMethod": "COMBINE FUNCTIONS INTO CLASS",
        "BeforeRefact": "function base(aReading) {...}\nfunction taxableCharge(aReading) {...}\nfunction calculateBaseCharge(aReading) {...}",
        "AfterRefact": "class Reading {\n  base() {...}\n  taxableCharge() {...}\n  calculateBaseCharge() {...}\n}",
        "ZeroShotCode": "```java\nclass ChargeCalculator {\n    private double chargeRate;\n\n    public ChargeCalculator(double chargeRate) {\n        this.chargeRate = chargeRate;\n    }\n\n    public double calculateCharge(Reading aReading) {\n        return base(aReading) + taxableCharge(aReading);\n    }\n\n    private double base(Reading aReading) {\n        return aReading.getUsage() * chargeRate;\n    }\n\n    private double taxableCharge(Reading aReading) {\n        return Math.max(0, base(aReading) - 100);\n    }\n}\n\nclass Reading {\n    private double usage;\n\n    public Reading(double usage) {\n        this.usage = usage;\n    }\n\n    public double getUsage() {\n        return usage;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Reading {\n    private double value;\n\n    public Reading(double value) {\n        this.value = value;\n    }\n\n    public double getValue() {\n        return value;\n    }\n\n    public double base() {\n        // Logic for base\n    }\n\n    public double taxableCharge() {\n        // Logic for taxableCharge\n    }\n\n    public double calculateBaseCharge() {\n        // Logic for calculateBaseCharge\n    }\n}\n```",
        "ContextCode": "```java\nclass ChargeCalculator {\n    \n    public double calculateBaseCharge(Reading aReading) {\n        return base(aReading) + taxableCharge(aReading);\n    }\n\n    private double base(Reading aReading) {\n        return aReading.getBaseAmount();\n    }\n\n    private double taxableCharge(Reading aReading) {\n        return Math.max(0, aReading.getTaxableAmount());\n    }\n}\n\nclass Reading {\n    private double baseAmount;\n    private double taxableAmount;\n\n    public Reading(double baseAmount, double taxableAmount) {\n        this.baseAmount = baseAmount;\n        this.taxableAmount = taxableAmount;\n    }\n\n    public double getBaseAmount() {\n        return baseAmount;\n    }\n\n    public double getTaxableAmount() {\n        return taxableAmount;\n    }\n}\n```"
    },
    "FOWLER_EX_MOVE FIELD": {
        "RefactMethod": "MOVE FIELD",
        "BeforeRefact": "class Customer {\n  get plan() {return this._plan;}\n  get discountRate() {return this._discountRate;}",
        "AfterRefact": "class Customer {\n  get plan() {return this._plan;}\n  get discountRate() {return this.plan.discountRate;}",
        "ZeroShotCode": "```java\nclass Customer {\n    private Plan plan;\n    private double discountRate;\n\n    public Plan getPlan() {\n        return plan;\n    }\n\n    public double getDiscountRate() {\n        return discountRate;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Customer {\n    private Plan plan;  // Assumed Plan is a class representing the customer's plan\n    private double discountRate;\n\n    public Plan getPlan() {\n        return plan;\n    }\n\n    public double getDiscountRate() {\n        return discountRate;\n    }\n}\n```",
        "ContextCode": "```java\nclass Customer {\n    private Plan plan;\n    private double discountRate;\n\n    public Plan getPlan() {\n        return plan;\n    }\n\n    public double getDiscountRate() {\n        return discountRate;\n    }\n}\n```",
        "RulesCode": "```java\nclass Customer {\n  private Plan _plan;\n  private double _discountRate;\n\n  public Plan getPlan() {\n    return _plan;\n  }\n\n  public double getDiscountRate() {\n    return _discountRate;\n  }\n}\n\nclass Order {\n  private Plan _plan;\n  private double _discountRate;\n\n  public Plan getPlan() {\n    return _plan;\n  }\n\n  public double getDiscountRate() {\n    return _discountRate;\n  }\n}\n```"
    },
    "FOWLER_EX_REPLACE TEMP WITH QUERY": {
        "RefactMethod": "REPLACE TEMP WITH QUERY",
        "BeforeRefact": "const basePrice = this._quantity * this._itemPrice;\nif (basePrice > 1000)\n  return basePrice * 0.95;\nelse\n  return basePrice * 0.98;",
        "AfterRefact": "get basePrice() {this._quantity * this._itemPrice;}\n\n// ...\n\nif (this.basePrice > 1000)\n  return this.basePrice * 0.95;\nelse\n  return this.basePrice * 0.98;",
        "ZeroShotCode": "```java\ndouble basePrice = this._quantity * this._itemPrice;\ndouble discountRate = (basePrice > 1000) ? 0.95 : 0.98;\nreturn basePrice * discountRate;\n```",
        "InstrucCode": "```java\npublic double calculateDiscountedPrice() {\n    double basePrice = calculateBasePrice();\n    return basePrice > 1000 ? basePrice * 0.95 : basePrice * 0.98;\n}\n\nprivate double calculateBasePrice() {\n    return this._quantity * this._itemPrice;\n}\n```",
        "ContextCode": "```java\ndouble calculatePrice(int quantity, double itemPrice) {\n    double basePrice = quantity * itemPrice;\n    double discount = (basePrice > 1000) ? 0.95 : 0.98;\n    return basePrice * discount;\n}\n```",
        "RulesCode": "```java\nif (this._quantity * this._itemPrice > 1000) {\n  return this._quantity * this._itemPrice * 0.95;\n} else {\n  return this._quantity * this._itemPrice * 0.98;\n}\n```"
    },
    "FOWLER_EX_CHANGE VALUE TO REFERENCE": {
        "RefactMethod": "CHANGE VALUE TO REFERENCE",
        "BeforeRefact": "let customer = new Customer(customerData);",
        "AfterRefact": "let customer = customerRepository.get(customerData.id);",
        "ZeroShotCode": "```java\nCustomer customer = new Customer(customerData);\n```",
        "InstrucCode": "```java\npublic class CustomerRepository {\n    // Assume this class has methods to manage Customer instances\n    public Customer findCustomer(CustomerData customerData) {\n        // Logic to find or create a Customer based on customerData\n    }\n}\n\npublic class Customer {\n    // Customer properties and methods\n}\n\npublic class HostObject {\n    private Customer customer;\n\n    public HostObject(CustomerData customerData, CustomerRepository repository) {\n        this.customer = repository.findCustomer(customerData);\n    }\n}\n```",
        "ContextCode": "```java\nCustomer customer = new Customer(customerData);\n```",
        "RulesCode": "```java\nCustomer customer = CustomerFactory.createCustomer(customerData);\n```"
    },
    "FOWLER_EX_MOVE STATEMENTS INTO FUNCTION": {
        "RefactMethod": "MOVE STATEMENTS INTO FUNCTION",
        "BeforeRefact": "result.push(`<p>title: ${person.photo.title}</p>`);\nresult.concat(photoData(person.photo));\n\nfunction photoData(aPhoto) {\n  return [\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}",
        "AfterRefact": "result.concat(photoData(person.photo));\n\nfunction photoData(aPhoto) {\n  return [\n    `<p>title: ${aPhoto.title}</p>`,\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}",
        "ZeroShotCode": "```java\npublic class PhotoProcessor {\n    public void processPerson(Person person, List<String> result) {\n        result.add(String.format(\"<p>title: %s</p>\", person.photo.title));\n        result.addAll(photoData(person.photo));\n    }\n\n    private List<String> photoData(Photo aPhoto) {\n        List<String> photoDetails = new ArrayList<>();\n        photoDetails.add(String.format(\"<p>location: %s</p>\", aPhoto.location));\n        photoDetails.add(String.format(\"<p>date: %s</p>\", aPhoto.date.toString()));\n        return photoDetails;\n    }\n}\n```",
        "InstrucCode": "```javascript\nfunction generatePhotoHTML(person) {\n  const result = [];\n  result.push(`<p>title: ${person.photo.title}</p>`);\n  result.concat(photoData(person.photo));\n  return result;\n}\n\nfunction photoData(aPhoto) {\n  return [\n    `<p>location: ${aPhoto.location}</p>`,\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\n  ];\n}\n```",
        "ContextCode": "```java\nresult.push(formatPhotoTitle(person.photo));\nresult.concat(getPhotoDetails(person.photo));\n\nprivate String formatPhotoTitle(Photo photo) {\n    return String.format(\"<p>title: %s</p>\", photo.title);\n}\n\nprivate List<String> getPhotoDetails(Photo photo) {\n    return Arrays.asList(\n        String.format(\"<p>location: %s</p>\", photo.location),\n        String.format(\"<p>date: %s</p>\", photo.date.toDateString())\n    );\n}\n```"
    },
    "FOWLER_EX_SEPARATE QUERY FROM MODIFIER": {
        "RefactMethod": "SEPARATE QUERY FROM MODIFIER",
        "BeforeRefact": "function getTotalOutstandingAndSendBill() {\n  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);\n  sendBill();\n  return result;\n}",
        "AfterRefact": "function totalOutstanding() {\n  return customer.invoices.reduce((total, each) => each.amount + total, 0);  \n}\nfunction sendBill() {\n  emailGateway.send(formatBill(customer));\n}",
        "ZeroShotCode": "```java\npublic class BillingService {\n    private Customer customer;\n\n    public BillingService(Customer customer) {\n        this.customer = customer;\n    }\n\n    public int getTotalOutstanding() {\n        return calculateTotalOutstanding();\n    }\n\n    public void sendBill() {\n        // Logic to send the bill\n    }\n\n    private int calculateTotalOutstanding() {\n        return customer.getInvoices().stream()\n                .mapToInt(Invoice::getAmount)\n                .sum();\n    }\n\n    public void processBilling() {\n        int totalOutstanding = getTotalOutstanding();\n        sendBill();\n    }\n}\n```",
        "InstrucCode": "```java\npublic class CustomerBilling {\n    \n    public int getTotalOutstanding() {\n        return customer.getInvoices().stream()\n                .mapToInt(Invoice::getAmount)\n                .sum();\n    }\n    \n    public void getTotalOutstandingAndSendBill() {\n        int totalOutstanding = getTotalOutstanding();\n        sendBill();\n    }\n    \n    private void sendBill() {\n        // Logic to send the bill\n    }\n}\n```",
        "ContextCode": "```java\npublic class BillingService {\n    private Customer customer;\n\n    public BillingService(Customer customer) {\n        this.customer = customer;\n    }\n\n    public double getTotalOutstandingAndSendBill() {\n        double totalOutstanding = calculateTotalOutstanding();\n        sendBill();\n        return totalOutstanding;\n    }\n\n    private double calculateTotalOutstanding() {\n        return customer.getInvoices().stream()\n                .mapToDouble(Invoice::getAmount)\n                .sum();\n    }\n\n    private void sendBill() {\n        // Implementation for sending the bill\n    }\n}\n```",
        "RulesCode": "```javascript\nfunction getTotalOutstanding() {\n  return customer.invoices.reduce((total, each) => each.amount + total, 0);\n}\n\nfunction sendBill() {\n  // Implementation to send the bill\n}\n\nfunction getTotalOutstandingAndSendBill() {\n  const result = getTotalOutstanding();\n  sendBill();\n  return result;\n}\n```"
    },
    "FOWLER_EX_HIDE DELEGATE": {
        "RefactMethod": "HIDE DELEGATE",
        "BeforeRefact": "manager = aPerson.department.manager;",
        "AfterRefact": "manager = aPerson.manager;\n\nclass Person {\n  get manager() {return this.department.manager;}",
        "ZeroShotCode": "```java\nclass Person {\n    Department department;\n\n    public Manager getManager() {\n        return department.getManager();\n    }\n}\n\nclass Department {\n    private Manager manager;\n\n    public Manager getManager() {\n        return manager;\n    }\n}\n\nclass Manager {\n    // Manager class implementation\n}\n\n// Usage\nPerson aPerson = new Person();\nManager manager = aPerson.getManager();\n```",
        "InstrucCode": "```java\npublic class Department {\n    private Manager manager;\n\n    public Manager getManager() {\n        return manager;\n    }\n\n    public void setManager(Manager manager) {\n        this.manager = manager;\n    }\n\n    // Delegating method to get manager's details\n    public String getManagerDetails() {\n        return manager.getDetails();\n    }\n}\n\npublic class Person {\n    private Department department;\n\n    public Department getDepartment() {\n        return department;\n    }\n\n    // Adjusted method to access manager's details\n    public String getDepartmentManagerDetails() {\n        return department.getManagerDetails();\n    }\n}\n\npublic class Manager {\n    private String name;\n\n    public String getDetails() {\n        return name;\n    }\n\n    // Other Manager methods...\n}\n```",
        "ContextCode": "```java\nManager manager = aPerson.getDepartment().getManager();\n```",
        "RulesCode": "```java\nmanager = aPerson.department.manager;\n```"
    },
    "FOWLER_EX_PULL UP METHOD": {
        "RefactMethod": "PULL UP METHOD",
        "BeforeRefact": "class Employee {...}\n\nclass Salesman extends Employee {\n  get name() {...}\n}\n\nclass Engineer extends Employee {\n  get name() {...}\n}",
        "AfterRefact": "class Employee {\n  get name() {...}\n}\n\nclass Salesman extends Employee {...}\nclass Engineer extends Employee {...}",
        "ZeroShotCode": "```java\nclass Employee {\n    public String getName() {\n        // common implementation\n    }\n}\n\nclass Salesman extends Employee {\n    @Override\n    public String getName() {\n        // Salesman-specific implementation\n    }\n}\n\nclass Engineer extends Employee {\n    @Override\n    public String getName() {\n        // Engineer-specific implementation\n    }\n}\n```",
        "InstrucCode": "```java\nclass Employee {\n    public String getName() {\n        // Implementation specific to Employee\n        return \"\"; // Placeholder for actual implementation\n    }\n}\n\nclass Salesman extends Employee {\n    @Override\n    public String getName() {\n        // Salesman specific implementation\n        return \"Salesman Name\"; // Placeholder for actual implementation\n    }\n}\n\nclass Engineer extends Employee {\n    @Override\n    public String getName() {\n        // Engineer specific implementation\n        return \"Engineer Name\"; // Placeholder for actual implementation\n    }\n}\n```",
        "ContextCode": "```java\nabstract class Employee {\n    public abstract String getName();\n}\n\nclass Salesman extends Employee {\n    @Override\n    public String getName() {\n        // Implementation of getting the name for Salesman\n    }\n}\n\nclass Engineer extends Employee {\n    @Override\n    public String getName() {\n        // Implementation of getting the name for Engineer\n    }\n}\n```",
        "RulesCode": "```java\nclass Employee {\n    public String getName() {\n        // common name retrieval logic\n    }\n}\n\nclass Salesman extends Employee {\n    @Override\n    public String getName() {\n        // Salesman specific name retrieval logic\n    }\n}\n\nclass Engineer extends Employee {\n    @Override\n    public String getName() {\n        // Engineer specific name retrieval logic\n    }\n}\n```"
    },
    "FOWLER_EX_SLIDE STATEMENTS": {
        "RefactMethod": "SLIDE STATEMENTS",
        "BeforeRefact": "const pricingPlan = retrievePricingPlan();\nconst order = retreiveOrder();\nlet charge;\nconst chargePerUnit = pricingPlan.unit;",
        "AfterRefact": "const pricingPlan = retrievePricingPlan();\nconst chargePerUnit = pricingPlan.unit;\nconst order = retreiveOrder();\nlet charge;",
        "ZeroShotCode": "```java\nPricingPlan pricingPlan = retrievePricingPlan();\nOrder order = retrieveOrder();\ndouble charge;\ndouble chargePerUnit = pricingPlan.getUnit();\n```",
        "InstrucCode": "```javascript\nconst pricingPlan = retrievePricingPlan();\nconst chargePerUnit = pricingPlan.unit;\nconst order = retreiveOrder();\nlet charge;\n```",
        "ContextCode": "```java\nPricingPlan pricingPlan = retrievePricingPlan();\nOrder order = retrieveOrder();\ndouble charge = pricingPlan.getUnitCharge();\n```",
        "RulesCode": "```javascript\nconst pricingPlan = retrievePricingPlan();\nconst order = retrieveOrder();\nconst chargePerUnit = pricingPlan.unit;\nlet charge;\n```"
    },
    "FOWLER_EX_EXTRACT CLASS": {
        "RefactMethod": "EXTRACT CLASS",
        "BeforeRefact": "class Person {\n  get officeAreaCode() {return this._officeAreaCode;}\n  get officeNumber()   {return this._officeNumber;}",
        "AfterRefact": "class Person {\n  get officeAreaCode() {return this._telephoneNumber.areaCode;}\n  get officeNumber()   {return this._telephoneNumber.number;}\n}\nclass TelephoneNumber {\n  get areaCode() {return this._areaCode;}\n  get number()   {return this._number;}\n}",
        "ZeroShotCode": "```java\nclass Office {\n    private String areaCode;\n    private String number;\n\n    public Office(String areaCode, String number) {\n        this.areaCode = areaCode;\n        this.number = number;\n    }\n\n    public String getAreaCode() {\n        return areaCode;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n}\n\nclass Person {\n    private Office office;\n\n    public Person(Office office) {\n        this.office = office;\n    }\n\n    public String getOfficeAreaCode() {\n        return office.getAreaCode();\n    }\n\n    public String getOfficeNumber() {\n        return office.getNumber();\n    }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n    private OfficeDetails officeDetails;\n\n    public Person(String officeAreaCode, String officeNumber) {\n        this.officeDetails = new OfficeDetails(officeAreaCode, officeNumber);\n    }\n\n    public String getOfficeAreaCode() {\n        return officeDetails.getOfficeAreaCode();\n    }\n\n    public String getOfficeNumber() {\n        return officeDetails.getOfficeNumber();\n    }\n}\n\nclass OfficeDetails {\n    private String officeAreaCode;\n    private String officeNumber;\n\n    public OfficeDetails(String officeAreaCode, String officeNumber) {\n        this.officeAreaCode = officeAreaCode;\n        this.officeNumber = officeNumber;\n    }\n\n    public String getOfficeAreaCode() {\n        return officeAreaCode;\n    }\n\n    public String getOfficeNumber() {\n        return officeNumber;\n    }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private String officeAreaCode;\n    private String officeNumber;\n\n    public String getOfficeAreaCode() {\n        return officeAreaCode;\n    }\n\n    public String getOfficeNumber() {\n        return officeNumber;\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n    private String _officeAreaCode;\n    private String _officeNumber;\n\n    public String getOfficeAreaCode() {\n        return this._officeAreaCode;\n    }\n\n    public String getOfficeNumber() {\n        return this._officeNumber;\n    }\n}\n\nclass Office {\n    private String areaCode;\n    private String number;\n\n    public String getAreaCode() {\n        return this.areaCode;\n    }\n\n    public String getNumber() {\n        return this.number;\n    }\n\n    public Office(String areaCode, String number) {\n        this.areaCode = areaCode;\n        this.number = number;\n    }\n}\n```"
    },
    "FOWLER_EX_CONSOLIDATE CONDITIONAL EXPRESSION": {
        "RefactMethod": "CONSOLIDATE CONDITIONAL EXPRESSION",
        "BeforeRefact": "if (anEmployee.seniority < 2) return 0;\nif (anEmployee.monthsDisabled > 12) return 0;\nif (anEmployee.isPartTime) return 0;",
        "AfterRefact": "if (isNotEligibleForDisability()) return 0;\n\nfunction isNotEligibleForDisability() {\nreturn ((anEmployee.seniority < 2)\n        || (anEmployee.monthsDisabled > 12)\n        || (anEmployee.isPartTime));\n}",
        "ZeroShotCode": "```java\nif (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) return 0;\n```",
        "InstrucCode": "```java\nif (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {\n    return 0;\n}\n```",
        "ContextCode": "```java\nif (isIneligible(anEmployee)) return 0;\n\nprivate boolean isIneligible(Employee anEmployee) {\n    return anEmployee.seniority < 2 || \n           anEmployee.monthsDisabled > 12 || \n           anEmployee.isPartTime;\n}\n```",
        "RulesCode": "```java\nif (anEmployee.seniority < 2 || anEmployee.monthsDisabled > 12 || anEmployee.isPartTime) {\n    return 0;\n}\n```"
    },
    "FOWLER_EX_PULL UP CONSTRUCTOR BODY": {
        "RefactMethod": "PULL UP CONSTRUCTOR BODY",
        "BeforeRefact": "class Party {...}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super();\n    this._id = id;\n    this._name = name;\n    this._monthlyCost = monthlyCost;\n  }\n}",
        "AfterRefact": "class Party {\n  constructor(name){\n    this._name = name;\n  }\n}\n\nclass Employee extends Party {\n  constructor(name, id, monthlyCost) {\n    super(name);\n    this._id = id;\n    this._monthlyCost = monthlyCost;\n  }\n}",
        "ZeroShotCode": "```java\nclass Party {\n    // Party class implementation\n}\n\nclass Employee extends Party {\n    private String name;\n    private String id;\n    private double monthlyCost;\n\n    public Employee(String name, String id, double monthlyCost) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.monthlyCost = monthlyCost;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Party {\n    protected String _name;\n    protected double _monthlyCost;\n\n    public Party(String name, double monthlyCost) {\n        this._name = name;\n        this._monthlyCost = monthlyCost;\n    }\n}\n\nclass Employee extends Party {\n    private String _id;\n\n    public Employee(String name, String id, double monthlyCost) {\n        super(name, monthlyCost);\n        this._id = id;\n    }\n}\n```",
        "ContextCode": "```java\nclass Party {\n    // Party class implementation\n}\n\nclass Employee extends Party {\n    private String id;\n    private String name;\n    private double monthlyCost;\n\n    public Employee(String name, String id, double monthlyCost) {\n        this.id = id;\n        this.name = name;\n        this.monthlyCost = monthlyCost;\n    }\n\n    // Getters and Setters for id, name, and monthlyCost\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getMonthlyCost() {\n        return monthlyCost;\n    }\n\n    public void setMonthlyCost(double monthlyCost) {\n        this.monthlyCost = monthlyCost;\n    }\n}\n```",
        "RulesCode": "```java\nclass Party {\n    private String name;\n    \n    public Party(String name) {\n        this.name = name;\n    }\n}\n\nclass Employee extends Party {\n    private int id;\n    private double monthlyCost;\n    \n    public Employee(String name, int id, double monthlyCost) {\n        super(name);\n        this.id = id;\n        this.monthlyCost = monthlyCost;\n    }\n}\n```"
    },
    "FOWLER_EX_REPLACE CONSTRUCTOR WITH FACTORY FUNCTION": {
        "RefactMethod": "REPLACE CONSTRUCTOR WITH FACTORY FUNCTION",
        "BeforeRefact": "leadEngineer = new Employee(document.leadEngineer, 'E');",
        "AfterRefact": "leadEngineer = createEngineer(document.leadEngineer);",
        "ZeroShotCode": "```java\npublic class EmployeeFactory {\n    public static Employee createLeadEngineer(String name) {\n        return new Employee(name, 'E');\n    }\n}\n\n// Usage\nleadEngineer = EmployeeFactory.createLeadEngineer(document.leadEngineer);\n```",
        "InstrucCode": "```java\npublic class Employee {\n    private String name;\n    private String role;\n\n    private Employee(String name, String role) {\n        this.name = name;\n        this.role = role;\n    }\n\n    public static Employee create(String name, String role) {\n        return new Employee(name, role);\n    }\n}\n\n// Usage\nleadEngineer = Employee.create(document.leadEngineer, \"E\");\n```",
        "ContextCode": "```java\nEmployee leadEngineer = new Employee(document.getLeadEngineer(), 'E');\n```",
        "RulesCode": "```java\npublic class EmployeeFactory {\n    public static Employee createEmployee(String name, char type) {\n        // Initialize the Employee object\n        return new Employee(name, type);\n    }\n}\n\n// Usage\nleadEngineer = EmployeeFactory.createEmployee(document.leadEngineer, 'E');\n```"
    },
    "FOWLER_EX_REMOVE SUBCLASS": {
        "RefactMethod": "REMOVE SUBCLASS",
        "BeforeRefact": "class Person {\n  get genderCode() {return \u201cX\u201d;}\n}\nclass Male extends Person {\n  get genderCode() {return \u201cM\u201d;}\n}\nclass Female extends Person {\n  get genderCode() {return \u201cF\u201d;}\n}",
        "AfterRefact": "class Person {\n  get genderCode() {return this._genderCode;}\n}",
        "ZeroShotCode": "```java\nclass Person {\n    String genderCode() {\n        return \"X\";\n    }\n}\n\nclass Male extends Person {\n    @Override\n    String genderCode() {\n        return \"M\";\n    }\n}\n\nclass Female extends Person {\n    @Override\n    String genderCode() {\n        return \"F\";\n    }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n    private String genderType;\n\n    public Person(String genderType) {\n        this.genderType = genderType;\n    }\n\n    public String getGenderCode() {\n        return genderType;\n    }\n\n    public static Person createPerson(String gender) {\n        return new Person(gender);\n    }\n}\n\n// Example usage:\nPerson male = Person.createPerson(\"M\");\nPerson female = Person.createPerson(\"F\");\nPerson other = Person.createPerson(\"X\");\n```",
        "ContextCode": "```java\nabstract class Person {\n    public abstract String getGenderCode();\n}\n\nclass Male extends Person {\n    @Override\n    public String getGenderCode() {\n        return \"M\";\n    }\n}\n\nclass Female extends Person {\n    @Override\n    public String getGenderCode() {\n        return \"F\";\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n    private String genderCode;\n\n    public Person(String genderCode) {\n        this.genderCode = genderCode;\n    }\n\n    public String getGenderCode() {\n        return genderCode;\n    }\n}\n\nclass Male extends Person {\n    public Male() {\n        super(\"M\");\n    }\n}\n\nclass Female extends Person {\n    public Female() {\n        super(\"F\");\n    }\n}\n```"
    },
    "FOWLER_EX_INTRODUCE PARAMETER OBJECT": {
        "RefactMethod": "INTRODUCE PARAMETER OBJECT",
        "BeforeRefact": "function amountInvoiced(startDate, endDate) {...}\nfunction amountReceived(startDate, endDate) {...}\nfunction amountOverdue(startDate, endDate) {...}",
        "AfterRefact": "function amountInvoiced(aDateRange) {...}\nfunction amountReceived(aDateRange) {...}\nfunction amountOverdue(aDateRange) {...}",
        "ZeroShotCode": "```java\nclass DateRange {\n    private final Date startDate;\n    private final Date endDate;\n\n    public DateRange(Date startDate, Date endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n}\n\npublic class InvoiceProcessor {\n    public double amountInvoiced(DateRange dateRange) {\n        // logic for calculating amount invoiced\n    }\n\n    public double amountReceived(DateRange dateRange) {\n        // logic for calculating amount received\n    }\n\n    public double amountOverdue(DateRange dateRange) {\n        // logic for calculating amount overdue\n    }\n}\n```",
        "InstrucCode": "```java\nclass InvoiceDateRange {\n    private final Date startDate;\n    private final Date endDate;\n\n    public InvoiceDateRange(Date startDate, Date endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n}\n\npublic class Invoice {\n    public void amountInvoiced(InvoiceDateRange dateRange) {\n        Date startDate = dateRange.getStartDate();\n        Date endDate = dateRange.getEndDate();\n        // logic for amountInvoiced\n    }\n\n    public void amountReceived(InvoiceDateRange dateRange) {\n        Date startDate = dateRange.getStartDate();\n        Date endDate = dateRange.getEndDate();\n        // logic for amountReceived\n    }\n\n    public void amountOverdue(InvoiceDateRange dateRange) {\n        Date startDate = dateRange.getStartDate();\n        Date endDate = dateRange.getEndDate();\n        // logic for amountOverdue\n    }\n}\n```",
        "ContextCode": "```java\npublic class InvoiceProcessor {\n\n    public double amountInvoiced(LocalDate startDate, LocalDate endDate) {\n        // Implementation for calculating amount invoiced\n    }\n\n    public double amountReceived(LocalDate startDate, LocalDate endDate) {\n        // Implementation for calculating amount received\n    }\n\n    public double amountOverdue(LocalDate startDate, LocalDate endDate) {\n        // Implementation for calculating amount overdue\n    }\n}\n```",
        "RulesCode": "```java\nclass DateRange {\n    private Date startDate;\n    private Date endDate;\n\n    public DateRange(Date startDate, Date endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n}\n\nfunction amountInvoiced(DateRange dateRange) {\n    Date startDate = dateRange.getStartDate();\n    Date endDate = dateRange.getEndDate();\n    // ...implementation...\n}\n\nfunction amountReceived(DateRange dateRange) {\n    Date startDate = dateRange.getStartDate();\n    Date endDate = dateRange.getEndDate();\n    // ...implementation...\n}\n\nfunction amountOverdue(DateRange dateRange) {\n    Date startDate = dateRange.getStartDate();\n    Date endDate = dateRange.getEndDate();\n    // ...implementation...\n}\n```"
    },
    "FOWLER_EX_SPLIT LOOP": {
        "RefactMethod": "SPLIT LOOP",
        "BeforeRefact": "let averageAge = 0;\nlet totalSalary = 0;\nfor (const p of people) {\n    averageAge += p.age;\n    totalSalary += p.salary;\n}\naverageAge = averageAge / people.length;",
        "AfterRefact": "let totalSalary = 0;\nfor (const p of people) {\n    totalSalary += p.salary;\n}\n\nlet averageAge = 0;\nfor (const p of people) {\n    averageAge += p.age;\n}\naverageAge = averageAge / people.length;",
        "ZeroShotCode": "```java\ndouble averageAge = calculateAverageAge(people);\ndouble totalSalary = calculateTotalSalary(people);\n\nprivate double calculateAverageAge(List<Person> people) {\n    double totalAge = 0;\n    for (Person p : people) {\n        totalAge += p.age;\n    }\n    return totalAge / people.size();\n}\n\nprivate double calculateTotalSalary(List<Person> people) {\n    double totalSalary = 0;\n    for (Person p : people) {\n        totalSalary += p.salary;\n    }\n    return totalSalary;\n}\n```",
        "InstrucCode": "```java\ndouble averageAge = 0;\ndouble totalSalary = 0;\n\n// Calculate total age\nfor (Person p : people) {\n    averageAge += p.age;\n}\n\n// Calculate total salary\nfor (Person p : people) {\n    totalSalary += p.salary;\n}\n\naverageAge = averageAge / people.size();\n```",
        "ContextCode": "```java\ndouble averageAge = 0;\ndouble totalSalary = 0;\n\nfor (Person person : people) {\n    averageAge += person.getAge();\n    totalSalary += person.getSalary();\n}\n\naverageAge /= people.size();\n```"
    },
    "FOWLER_EX_REPLACE PRIMITIVE WITH OBJECT": {
        "RefactMethod": "REPLACE PRIMITIVE WITH OBJECT",
        "BeforeRefact": "orders.filter(o => \u201chigh\u201d === o.priority\n                || \u201crush\u201d === o.priority);  ",
        "AfterRefact": "orders.filter(o => o.priority.higherThan(new Priority(\u201cnormal\u201d)))",
        "ZeroShotCode": "```java\nclass Order {\n    private String priority;\n    \n    // Constructor, getters, and setters\n    public Order(String priority) {\n        this.priority = priority;\n    }\n\n    public String getPriority() {\n        return priority;\n    }\n}\n\nclass OrderFilter {\n    private static final String HIGH_PRIORITY = \"high\";\n    private static final String RUSH_PRIORITY = \"rush\";\n\n    public static boolean isHighOrRush(Order order) {\n        return HIGH_PRIORITY.equals(order.getPriority()) || RUSH_PRIORITY.equals(order.getPriority());\n    }\n}\n\n// Usage\nList<Order> orders = new ArrayList<>();\nList<Order> filteredOrders = orders.stream()\n                                    .filter(OrderFilter::isHighOrRush)\n                                    .collect(Collectors.toList());\n```",
        "InstrucCode": "```java\npublic class Priority {\n    private final String value;\n\n    public Priority(String value) {\n        this.value = value;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}\n\npublic class Order {\n    private Priority priority;\n\n    public Priority getPriority() {\n        return priority;\n    }\n\n    public void setPriority(Priority priority) {\n        this.priority = priority;\n    }\n}\n\n// Example usage\nList<Order> orders = // ... initialize list of orders\nList<Order> filteredOrders = orders.stream()\n    .filter(o -> \"high\".equals(o.getPriority().getValue()) || \"rush\".equals(o.getPriority().getValue()))\n    .collect(Collectors.toList());\n```",
        "ContextCode": "```java\norders.stream()\n      .filter(o -> \"high\".equals(o.getPriority()) || \"rush\".equals(o.getPriority()))\n      .collect(Collectors.toList());\n```",
        "RulesCode": "```java\npublic class Order {\n    private Priority priority;\n\n    public Order(Priority priority) {\n        this.priority = priority;\n    }\n\n    public Priority getPriority() {\n        return priority;\n    }\n}\n\npublic enum Priority {\n    HIGH, RUSH\n}\n\n// Usage\nList<Order> filteredOrders = orders.stream()\n    .filter(o -> Priority.HIGH.equals(o.getPriority()) || Priority.RUSH.equals(o.getPriority()))\n    .collect(Collectors.toList());\n```"
    },
    "FOWLER_EX_MOVE STATEMENTS TO CALLERS": {
        "RefactMethod": "MOVE STATEMENTS TO CALLERS",
        "BeforeRefact": "emitPhotoData(outStream, person.photo);\n\nfunction emitPhotoData(outStream, photo) {\n  outStream.write(`<p>title: ${photo.title}</p>\\n`);\n  outStream.write(`<p>location: ${photo.location}</p>\\n`);\n}",
        "AfterRefact": "emitPhotoData(outStream, person.photo);\noutStream.write(`<p>location: ${person.photo.location}</p>\\n`);\n\nfunction emitPhotoData(outStream, photo) {\n  outStream.write(`<p>title: ${photo.title}</p>\\n`);\n}",
        "ZeroShotCode": "```java\noutStream.write(`<p>title: ${person.photo.title}</p>\\n`);\noutStream.write(`<p>location: ${person.photo.location}</p>\\n`);\n```",
        "InstrucCode": "```java\noutStream.write(\"<p>title: \" + person.photo.title + \"</p>\\n\");\noutStream.write(\"<p>location: \" + person.photo.location + \"</p>\\n\");\n```",
        "ContextCode": "```java\npublic void emitPhotoData(PrintWriter outStream, Photo photo) {\n    outStream.printf(\"<p>title: %s</p>%n\", photo.getTitle());\n    outStream.printf(\"<p>location: %s</p>%n\", photo.getLocation());\n}\n```"
    },
    "FOWLER_EX_INLINE CLASS": {
        "RefactMethod": "INLINE CLASS",
        "BeforeRefact": "class Person {\n  get officeAreaCode() {return this._telephoneNumber.areaCode;}\n  get officeNumber()   {return this._telephoneNumber.number;}\n}\nclass TelephoneNumber {\n  get areaCode() {return this._areaCode;}\n  get number()   {return this._number;}\n}",
        "AfterRefact": "class Person {\n  get officeAreaCode() {return this._officeAreaCode;}\n  get officeNumber()   {return this._officeNumber;}",
        "ZeroShotCode": "```java\nclass Person {\n    private TelephoneNumber telephoneNumber;\n\n    public String getOfficeAreaCode() {\n        return telephoneNumber.getAreaCode();\n    }\n\n    public String getOfficeNumber() {\n        return telephoneNumber.getNumber();\n    }\n}\n\nclass TelephoneNumber {\n    private String areaCode;\n    private String number;\n\n    public String getAreaCode() {\n        return areaCode;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n}\n```",
        "InstrucCode": "```java\nclass Person {\n    private String _areaCode;\n    private String _number;\n\n    public Person(String areaCode, String number) {\n        this._areaCode = areaCode;\n        this._number = number;\n    }\n\n    public String getOfficeAreaCode() {\n        return this._areaCode;\n    }\n\n    public String getOfficeNumber() {\n        return this._number;\n    }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private TelephoneNumber telephoneNumber;\n\n    public Person(TelephoneNumber telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getOfficeAreaCode() {\n        return telephoneNumber.getAreaCode();\n    }\n\n    public String getOfficeNumber() {\n        return telephoneNumber.getNumber();\n    }\n}\n\nclass TelephoneNumber {\n    private String areaCode;\n    private String number;\n\n    public TelephoneNumber(String areaCode, String number) {\n        this.areaCode = areaCode;\n        this.number = number;\n    }\n\n    public String getAreaCode() {\n        return areaCode;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n}\n```",
        "RulesCode": "```java\nclass Person {\n    private String _areaCode;\n    private String _number;\n\n    public String getOfficeAreaCode() {\n        return _areaCode;\n    }\n\n    public String getOfficeNumber() {\n        return _number;\n    }\n}\n```"
    },
    "FOWLER_EX_REMOVE MIDDLE MAN": {
        "RefactMethod": "REMOVE MIDDLE MAN",
        "BeforeRefact": "manager = aPerson.manager;\n\nclass Person {\n  get manager() {return this.department.manager;}",
        "AfterRefact": "manager = aPerson.department.manager;",
        "ZeroShotCode": "```java\nclass Person {\n    private Department department;\n\n    public Manager getManager() {\n        return department.getManager();\n    }\n}\n\nclass Department {\n    private Manager manager;\n\n    public Manager getManager() {\n        return manager;\n    }\n}\n\nclass Manager {}\n```",
        "InstrucCode": "```java\nclass Person {\n    private Department department;\n\n    public Manager getManager() {\n        return department.getManager();\n    }\n}\n```",
        "ContextCode": "```java\nclass Person {\n    private Department department;\n\n    public Manager getManager() {\n        return department.getManager();\n    }\n}\n\nclass Department {\n    private Manager manager;\n\n    public Manager getManager() {\n        return manager;\n    }\n}\n\nclass Manager {\n    // Manager class implementation\n}\n```",
        "RulesCode": "```java\nclass Person {\n    Department department;\n\n    Manager getManager() {\n        return department.getManager();\n    }\n}\n\nclass Department {\n    Manager manager;\n\n    Manager getManager() {\n        return manager;\n    }\n}\n```"
    },
    "FOWLER_EX_REPLACE FUNCTION WITH COMMAND": {
        "RefactMethod": "REPLACE FUNCTION WITH COMMAND",
        "BeforeRefact": "function score(candidate, medicalExam, scoringGuide) {\n    let result = 0;\n    let healthLevel = 0;\n// long body code\n}",
        "AfterRefact": "class Scorer {\n  constructor(candidate, medicalExam, scoringGuide) {\n    this._candidate = candidate;\n    this._medicalExam = medicalExam;\n    this._scoringGuide = scoringGuide;\n  }\n\n  execute() {\n    this._result = 0;\n    this._healthLevel = 0;\n    // long body code\n  }\n}",
        "ZeroShotCode": "```java\npublic int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n    int result = 0;\n    int healthLevel = 0;\n    // long body code\n}\n```",
        "InstrucCode": "```java\npublic class ScoreCommand {\n    private final Candidate candidate;\n    private final MedicalExam medicalExam;\n    private final ScoringGuide scoringGuide;\n\n    public ScoreCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n        this.candidate = candidate;\n        this.medicalExam = medicalExam;\n        this.scoringGuide = scoringGuide;\n    }\n\n    public int execute() {\n        int result = 0;\n        int healthLevel = 0;\n        // long body code\n        return result;\n    }\n}\n\n// Forwarding function\npublic int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n    ScoreCommand command = new ScoreCommand(candidate, medicalExam, scoringGuide);\n    return command.execute();\n}\n```",
        "ContextCode": "```java\npublic class ScoringSystem {\n    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n        int result = 0;\n        int healthLevel = 0;\n\n        // long body code\n\n        return result;\n    }\n}\n```",
        "RulesCode": "```java\npublic class ScoringService {\n    public int score(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n        return new ScoringCommand(candidate, medicalExam, scoringGuide).execute();\n    }\n}\n\npublic class ScoringCommand {\n    private Candidate candidate;\n    private MedicalExam medicalExam;\n    private ScoringGuide scoringGuide;\n\n    public ScoringCommand(Candidate candidate, MedicalExam medicalExam, ScoringGuide scoringGuide) {\n        this.candidate = candidate;\n        this.medicalExam = medicalExam;\n        this.scoringGuide = scoringGuide;\n    }\n\n    public int execute() {\n        int result = 0;\n        int healthLevel = 0;\n        // long body code\n        return result;\n    }\n}\n```"
    }
}