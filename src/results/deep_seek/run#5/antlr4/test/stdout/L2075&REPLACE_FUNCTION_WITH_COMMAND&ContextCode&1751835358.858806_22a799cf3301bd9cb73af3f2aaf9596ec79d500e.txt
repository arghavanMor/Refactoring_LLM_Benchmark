[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1mReactor Build Order:[m
[[1;34mINFO[m] 
[[1;34mINFO[m] ANTLR 4                                                            [pom]
[[1;34mINFO[m] ANTLR 4 Runtime                                                    [jar]
[[1;34mINFO[m] ANTLR 4 Tool                                                       [jar]
[[1;34mINFO[m] ANTLR 4 Maven plugin                                      [maven-plugin]
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m----------------------< [0;36morg.antlr:antlr4-master[0;1m >-----------------------[m
[[1;34mINFO[m] [1mBuilding ANTLR 4 4.1-SNAPSHOT                                      [1/4][m
[[1;34mINFO[m] [1m--------------------------------[ pom ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-enforcer-plugin:1.0:enforce[m [1m(enforce-maven)[m @ [36mantlr4-master[0;1m ---[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m----------------------< [0;36morg.antlr:antlr4-runtime[0;1m >----------------------[m
[[1;34mINFO[m] [1mBuilding ANTLR 4 Runtime 4.1-SNAPSHOT                              [2/4][m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-enforcer-plugin:1.0:enforce[m [1m(enforce-maven)[m @ [36mantlr4-runtime[0;1m ---[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mantlr4-runtime[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /Users/jeancarlorspaul/IdeaProjects/antlr4/runtime/Java/src/main/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:compile[m [1m(default-compile)[m @ [36mantlr4-runtime[0;1m ---[m
[[1;34mINFO[m] Nothing to compile - all classes are up to date
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mantlr4-runtime[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /Users/jeancarlorspaul/IdeaProjects/antlr4/runtime/Java/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:testCompile[m [1m(default-testCompile)[m @ [36mantlr4-runtime[0;1m ---[m
[[1;34mINFO[m] No sources to compile
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.15:test[m [1m(default-test)[m @ [36mantlr4-runtime[0;1m ---[m
[[1;34mINFO[m] No tests to run.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--------------------------< [0;36morg.antlr:antlr4[0;1m >--------------------------[m
[[1;34mINFO[m] [1mBuilding ANTLR 4 Tool 4.1-SNAPSHOT                                 [3/4][m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-enforcer-plugin:1.0:enforce[m [1m(enforce-maven)[m @ [36mantlr4[0;1m ---[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mantlr3-maven-plugin:3.5:antlr[m [1m(default)[m @ [36mantlr4[0;1m ---[m
[[1;34mINFO[m] ANTLR: Processing source directory /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/parse/ANTLRLexer.g is up to date - build skipped
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/parse/ANTLRParser.g is up to date - build skipped
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/parse/GrammarTreeVisitor.g is up to date - build skipped
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/codegen/SourceGenTriggers.g is up to date - build skipped
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/parse/ActionSplitter.g is up to date - build skipped
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/parse/BlockSetTransformer.g is up to date - build skipped
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/parse/LeftRecursiveRuleWalker.g is up to date - build skipped
Grammar /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/src/org/antlr/v4/parse/ATNBuilder.g is up to date - build skipped
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mantlr4[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] Copying 7 resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:compile[m [1m(default-compile)[m @ [36mantlr4[0;1m ---[m
[[1;34mINFO[m] Nothing to compile - all classes are up to date
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mantlr4[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] Copying 44 resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.1:testCompile[m [1m(default-testCompile)[m @ [36mantlr4[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 40 source files to /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/target/test-classes
[[1;33mWARNING[m] bootstrap class path not set in conjunction with -source 6
[[1;33mWARNING[m] source value 6 is obsolete and will be removed in a future release
[[1;33mWARNING[m] target value 1.6 is obsolete and will be removed in a future release
[[1;33mWARNING[m] To suppress warnings about obsolete options, use -Xlint:-options.
[[1;33mWARNING[m] /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/test/org/antlr/v4/test/TestASTStructure.java:[78,54] newInstance() in java.lang.Class has been deprecated
[[1;33mWARNING[m] /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/test/org/antlr/v4/test/TestPerformance.java:[1196,81] newInstance() in java.lang.Class has been deprecated
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.15:test[m [1m(default-test)[m @ [36mantlr4[0;1m ---[m
[[1;34mINFO[m] Surefire report directory: /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.antlr.v4.test.TestListeners
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestListeners-1751835370114
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestListeners-1751835370603
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestListeners-1751835370642
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestListeners-1751835370642
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestListeners-1751835370956
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestListeners-1751835370956
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestListeners-1751835371236
Tests run: 5, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 1.161 sec <<< FAILURE! - in org.antlr.v4.test.TestListeners
testLR(org.antlr.v4.test.TestListeners)  Time elapsed: 0.039 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestListeners.testLR(TestListeners.java:177)

testLRWithLabels(org.antlr.v4.test.TestListeners)  Time elapsed: 0.013 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestListeners.testLRWithLabels(TestListeners.java:217)

Running org.antlr.v4.test.TestSemPredEvalLexer
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalLexer-1751835371249
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalLexer-1751835371361
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalLexer-1751835371470
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalLexer-1751835371573
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalLexer-1751835371673
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalLexer-1751835371779
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalLexer-1751835371885
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.731 sec - in org.antlr.v4.test.TestSemPredEvalLexer
Running org.antlr.v4.test.TestActionTranslation
Tests run: 92, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.169 sec - in org.antlr.v4.test.TestActionTranslation
Running org.antlr.v4.test.TestATNParserPrediction
[1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A {;}) (ALT B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s3 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "action_0:-1", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A {;}) (ALT B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s3 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "action_0:-1", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A {;}) (ALT B)))))
[1, -1]
[2, -1]
[1, -1]
[1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT EPSILON)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="{&rarr;\n4\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s5[fontsize=11,label="&larr;\n5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s4:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s4:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[-1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT EPSILON)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="{&rarr;\n4\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s5[fontsize=11,label="&larr;\n5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s4:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s4:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT EPSILON)))))
[1, -1]
[-1]
[1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT A B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT A B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 2, 3, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT A B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT A B)))))
[1, -1]
[1, 2, -1]
[1, 2, 3, -1]
[1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT x) (ALT y))) (RULE x (BLOCK (ALT A))) (RULE y (BLOCK (ALT B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<y>", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT x) (ALT y))) (RULE x (BLOCK (ALT A))) (RULE y (BLOCK (ALT B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<y>", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT x) (ALT y))) (RULE x (BLOCK (ALT A))) (RULE y (BLOCK (ALT B)))))
[1, -1]
[2, -1]
[1, -1]
[1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT A) (ALT A B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s6:p2 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT A) (ALT A B)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s6:p2 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A) (ALT A) (ALT A B)))))
[1, -1]
[1, 2, -1]
[1, 2, -1]
[1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A B) (ALT A B) (ALT A B C)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 3, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A B) (ALT A B) (ALT A B C)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (RULES (RULE a (BLOCK (ALT A B) (ALT A B) (ALT A B C)))))
[1, 2, -1]
[1, 2, 3, -1]
[1, 2, -1]
[6, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e B) (ALT e C))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[6, 3, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e B) (ALT e C))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 4, 6, 5, 5, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e B) (ALT e C))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 4, 6, 5, 5, 3, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e B) (ALT e C))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e B) (ALT e C))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
[6, 2, -1]
[6, 3, -1]
[4, 4, 6, 5, 5, 2, -1]
[4, 4, 6, 5, 5, 3, -1]
[1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE ID (BLOCK (ALT (.. 'a' 'z')))) (RULE SEMI (BLOCK (ALT ';'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { ID SEMI INT) (RULES (RULE a (BLOCK (ALT (BLOCK (ALT ID) (ALT ID (? (BLOCK (ALT ID))))) SEMI)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{&rarr;\n7\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="&larr;\n8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s7:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s3 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s8 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "SEMI", arrowhead = normal];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s6 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE ID (BLOCK (ALT (.. 'a' 'z')))) (RULE SEMI (BLOCK (ALT ';'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { ID SEMI INT) (RULES (RULE a (BLOCK (ALT (BLOCK (ALT ID) (ALT ID (? (BLOCK (ALT ID))))) SEMI)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{&rarr;\n7\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="&larr;\n8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s7:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s3 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s8 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "SEMI", arrowhead = normal];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s6 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, -1]
(LEXER_GRAMMAR L (RULES (RULE ID (BLOCK (ALT (.. 'a' 'z')))) (RULE SEMI (BLOCK (ALT ';'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { ID SEMI INT) (RULES (RULE a (BLOCK (ALT ID) (ALT ID) (ALT ID SEMI)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s6:p2 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "SEMI", arrowhead = normal];
}
[1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE ID (BLOCK (ALT (.. 'a' 'z')))) (RULE SEMI (BLOCK (ALT ';'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { ID SEMI INT) (RULES (RULE a (BLOCK (ALT ID) (ALT ID) (ALT ID SEMI)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s6:p2 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "SEMI", arrowhead = normal];
}
[1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (tokens { A B C) (RULES (RULE a (BLOCK (ALT x B))) (RULE b (BLOCK (ALT x C))) (RULE x (BLOCK (ALT A) (ALT EPSILON)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s3 [fontname="Times-Italic", label="&epsilon;"];
}
[2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (tokens { A B C) (RULES (RULE a (BLOCK (ALT x B))) (RULE b (BLOCK (ALT x C))) (RULE x (BLOCK (ALT A) (ALT EPSILON)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s3 [fontname="Times-Italic", label="&epsilon;"];
}
[3, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (tokens { A B C) (RULES (RULE a (BLOCK (ALT x B))) (RULE b (BLOCK (ALT x C))) (RULE x (BLOCK (ALT A) (ALT EPSILON)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<x>", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s3 [fontname="Times-Italic", label="&epsilon;"];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c')))))
(PARSER_GRAMMAR T (tokens { A B C) (RULES (RULE a (BLOCK (ALT x B))) (RULE b (BLOCK (ALT x C))) (RULE x (BLOCK (ALT A) (ALT EPSILON)))))
[1, -1]
[2, -1]
[3, -1]
[3, -1]
[6, 1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e A) (ALT e A B))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="{&rarr;\n11\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s12[fontsize=11,label="&larr;\n12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s11:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s10 -> s12 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="17", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="{&rarr;\n18\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s19[fontsize=11,label="&larr;\n19", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s18 [fontname="Times-Italic", label="&epsilon;"];
s18:p0 -> s13 [fontname="Times-Italic", label="&epsilon;"];
s18:p1 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s17 -> s19 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s19 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s15 -> s16 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s16 -> s19 [fontname="Times-Italic", label="&epsilon;"];
}
[6, 1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e A) (ALT e A B))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="{&rarr;\n11\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s12[fontsize=11,label="&larr;\n12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s11:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s10 -> s12 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="17", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="{&rarr;\n18\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s19[fontsize=11,label="&larr;\n19", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s18 [fontname="Times-Italic", label="&epsilon;"];
s18:p0 -> s13 [fontname="Times-Italic", label="&epsilon;"];
s18:p1 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s17 -> s19 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s19 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s15 -> s16 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s16 -> s19 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 4, 6, 5, 5, 1, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e A) (ALT e A B))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="{&rarr;\n11\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s12[fontsize=11,label="&larr;\n12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s11:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s10 -> s12 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="17", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="{&rarr;\n18\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s19[fontsize=11,label="&larr;\n19", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s18 [fontname="Times-Italic", label="&epsilon;"];
s18:p0 -> s13 [fontname="Times-Italic", label="&epsilon;"];
s18:p1 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s17 -> s19 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s19 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s15 -> s16 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s16 -> s19 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 4, 6, 5, 5, 1, 2, -1]
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e A) (ALT e A B))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="{&rarr;\n11\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s12[fontsize=11,label="&larr;\n12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s11:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s10 -> s12 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="17", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="{&rarr;\n18\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s19[fontsize=11,label="&larr;\n19", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s18 [fontname="Times-Italic", label="&epsilon;"];
s18:p0 -> s13 [fontname="Times-Italic", label="&epsilon;"];
s18:p1 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s17 -> s19 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s19 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s15 -> s16 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s16 -> s19 [fontname="Times-Italic", label="&epsilon;"];
}
(LEXER_GRAMMAR L (RULES (RULE A (BLOCK (ALT 'a'))) (RULE B (BLOCK (ALT 'b'))) (RULE C (BLOCK (ALT 'c'))) (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT (.. '0' '9')))))))))
(PARSER_GRAMMAR T (tokens { A B C LP RP INT) (RULES (RULE a (BLOCK (ALT e A) (ALT e A B))) (RULE e (BLOCK (ALT LP e RP) (ALT INT)))))
[6, 1, -1]
[6, 1, 2, -1]
[4, 4, 6, 5, 5, 1, -1]
[4, 4, 6, 5, 5, 1, 2, -1]
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.086 sec - in org.antlr.v4.test.TestATNParserPrediction
Running org.antlr.v4.test.TestParseErrors
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835372242
grammar T;
a : 'a' 'b'* 'c'  | 'a' 'b' 'd'  ;
q : 'e' ;

dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835372359
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835372477
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835372603
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835372720
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835372832
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835372931
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373057
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373172
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373277
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373388
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373490
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373499
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373610
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373703
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373830
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835373928
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835374039
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835374134
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835374231
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835374334
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835374428
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835374530
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseErrors-1751835374626
Tests run: 24, Failures: 5, Errors: 2, Skipped: 0, Time elapsed: 2.391 sec <<< FAILURE! - in org.antlr.v4.test.TestParseErrors
testConjuringUpToken(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.126 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...-1='<missing 'b'>',<[1]>,1:1]
> but was:<...-1='<missing 'b'>',<[2]>,1:1]
>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestParseErrors.testConjuringUpToken(TestParseErrors.java:86)

testInvalidATNStateRemoval(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.009 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestParseErrors.testInvalidATNStateRemoval(TestParseErrors.java:363)

testConjuringUpTokenFromSet(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.126 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...-1='<missing 'b'>',<[1]>,1:1]
> but was:<...-1='<missing 'b'>',<[2]>,1:1]
>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestParseErrors.testConjuringUpTokenFromSet(TestParseErrors.java:105)

testMultiTokenDeletionBeforeLoop2(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.094 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...a' expecting {'b', '[z', 'c]'}
> but was:<...a' expecting {'b', '[c', 'z]'}
>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestParseErrors.testMultiTokenDeletionBeforeLoop2(TestParseErrors.java:215)

testSingleTokenDeletionDuringLoop2(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.102 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...a' expecting {'b', '[z', 'c]'}
> but was:<...a' expecting {'b', '[c', 'z]'}
>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestParseErrors.testSingleTokenDeletionDuringLoop2(TestParseErrors.java:225)

testMultiTokenDeletionDuringLoop2(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.096 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...a' expecting {'b', '[z', 'c'}
line 1:6 extraneous input 'a' expecting {'b', 'z', 'c]'}
> but was:<...a' expecting {'b', '[c', 'z'}
line 1:6 extraneous input 'a' expecting {'b', 'c', 'z]'}
>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestParseErrors.testMultiTokenDeletionDuringLoop2(TestParseErrors.java:237)

testDuplicatedLeftRecursiveCall(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.007 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestParseErrors.testDuplicatedLeftRecursiveCall(TestParseErrors.java:317)

Running org.antlr.v4.test.TestATNLexerInterpreter
null
[A, EOF]
null
[B, EOF]
null
[CMT, EOF]
null
[A, B, A, B, EOF]
null
[A, EOF]
null
[A, EOF]
null
[A, EOF]
null
[A, EOF]
null
[A, EOF]
null
[A, EOF]
null
[A, EOF]
null
[A, EOF]
null
[ID, INT, ID, INT, EOF]
null
[ID, EOF]
null
[INT, WS, INT, EOF]
null
[CMT, WS, CMT, EOF]
null
[STR, EOF]
null
[STR, EOF]
null
[B, EOF]
null
[A, B, EOF]
null
[CMT, EOF]
null
[CMT, EOF]
null
[B, EOF]
null
[A, EOF]
null
[A, DONE, EOF]
null
[KEND, EOF]
null
[ID, EOF]
null
[ID, WS, KEND, WS, ID, EOF]
null
[CMT, WS, CMT, WS, EOF]
null
[CMT, EOF]
null
[CMT, CMT, EOF]
null
[CMT, EOF]
null
[CMT, CMT, EOF]
null
[CMT, EOF]
Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 sec - in org.antlr.v4.test.TestATNLexerInterpreter
Running org.antlr.v4.test.TestFastQueue
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.antlr.v4.test.TestFastQueue
Running org.antlr.v4.test.TestBasicSemanticErrors
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestBasicSemanticErrors-1751835374690
!!!
grammar:
parser grammar U;
options { foo=bar; k=3;}
tokens {
        ID,
        f,
        S
}
tokens { A }
options { x=y; }

a
options { blech=bar; greedy=true; }
        :       ID
        ;
b : ( options { ick=bar; greedy=true; } : ID )+ ;
c : ID<blue> ID<x=y> ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestBasicSemanticErrors-1751835374693
!!!
grammar:
grammar T;
ss : op=('=' | '+=' | expr) EOF;
expr : '=' '=';

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestBasicSemanticErrors-1751835374699
!!!
grammar:
grammar T;
ss[int expr] returns [int expr]
locals [int expr]
  : expr=expr EOF;
expr : '=';

###
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec - in org.antlr.v4.test.TestBasicSemanticErrors
Running org.antlr.v4.test.TestAttributeChecks
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374709
!!!
grammar:
parser grammar A;
@members {$a}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374709
!!!
grammar:
parser grammar A;
@members {$a.y}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374711
!!!
grammar:
parser grammar A;
@members {$S}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374711
!!!
grammar:
parser grammar A;
@members {$S::i}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374711
!!!
grammar:
parser grammar A;
@members {$S::i=$S::i}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374711
!!!
grammar:
parser grammar A;
@members {$b::f}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374711
!!!
grammar:
parser grammar A;
@members {$S::j}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374711
!!!
grammar:
parser grammar A;
@members {$S::j = 3;}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374711
!!!
grammar:
parser grammar A;
@members {$S::j = $S::k;}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$c}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374716
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$a.q}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$a}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$b}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$lab}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$b::f}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$S::i}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$S::i=$S::i}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$a::z}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$S}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$S::j}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$S::j = 3;}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374743
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {$S::j = $S::k;}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374749
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $a
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $b
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $lab
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $b::f
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S::i
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S::i=$S::i
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $a::z
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S::j
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S::j = 3;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S::j = $S::k;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[-1]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[-i]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[i]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[0]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[-1]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[-i]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[i]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $Q[0]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[-1]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[-i]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[i]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[0]::y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[-1]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[-i]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[i]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[0]::y = 23;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374807
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $S[$S::y]::i
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $lab
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $q
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $q.y
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $q = 3
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $q = 3;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $q.y = 3;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $q = $blort;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $a.ick
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $a.ick = 3;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $b.d
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $d.text
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $lab.d
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $ids = null;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374820
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 $labs = null;
		 }
		 c
    ;
    finally {}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$lab}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$q}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$q.y}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$q = 3}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$q = 3;}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$q.y = 3;}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$q = $blort;}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$a.ick}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$a.ick = 3;}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$b.e}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$b.d}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$c.text}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374826
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$lab.d}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$a}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$b}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$lab}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$b::f}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$S}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$S::i}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$S::i=$S::i}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$a::z}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$S::j}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$S::j = 3;}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374866
!!!
grammar:
parser grammar A;
@members {}
tokens{ID}
a[int x] returns [int y]
@init {}
    :   id=ID ids+=ID lab=b[34] labs+=b[34] {
		 }
		 c
    ;
    finally {$S::j = $S::k;}
b[int d] returns [int e]
    :   {}
    ;
c   :   ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestAttributeChecks-1751835374871
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.165 sec - in org.antlr.v4.test.TestAttributeChecks
Running org.antlr.v4.test.TestCommonTokenStream
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec - in org.antlr.v4.test.TestCommonTokenStream
Running org.antlr.v4.test.TestTopologicalSort
Tests run: 5, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 0 sec <<< FAILURE! - in org.antlr.v4.test.TestTopologicalSort
testFairlyLargeGraph(org.antlr.v4.test.TestTopologicalSort)  Time elapsed: 0 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[H, F, E, D, [G, A, B], C]> but was:<[H, F, E, D, [A, B, G], C]>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestTopologicalSort.testFairlyLargeGraph(TestTopologicalSort.java:59)

testSimpleTokenDependence(org.antlr.v4.test.TestTopologicalSort)  Time elapsed: 0 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...va.g4, Java.tokens, [Ref.g4, D]ef.g4]> but was:<...va.g4, Java.tokens, [Def.g4, R]ef.g4]>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestTopologicalSort.testSimpleTokenDependence(TestTopologicalSort.java:101)

testParserLexerCombo(org.antlr.v4.test.TestTopologicalSort)  Time elapsed: 0 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...ens, JavaParser.g4, [Ref.g4, D]ef.g4]> but was:<...ens, JavaParser.g4, [Def.g4, R]ef.g4]>
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at org.antlr.v4.test.TestTopologicalSort.testParserLexerCombo(TestTopologicalSort.java:115)

Running org.antlr.v4.test.TestLexerErrors
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835374902
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835374995
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375085
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375179
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375186
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375186
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375375
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375375
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375554
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375642
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375733
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerErrors-1751835375824
Tests run: 10, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.015 sec <<< FAILURE! - in org.antlr.v4.test.TestLexerErrors
testLexerExecDFA(org.antlr.v4.test.TestLexerErrors)  Time elapsed: 0.007 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execLexer(BaseTest.java:466)
	at org.antlr.v4.test.TestLexerErrors.testLexerExecDFA(TestLexerErrors.java:201)

Running org.antlr.v4.test.TestLexerExec
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835375915
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835375915
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376104
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376197
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376289
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376403
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376493
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376583
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376673
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376753
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376843
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835376935
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377027
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377117
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377209
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377301
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377392
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377483
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377571
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377658
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377747
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377838
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835377915
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378013
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378092
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378182
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378277
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378368
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378459
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378550
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378641
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378719
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378808
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378887
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835378995
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379340
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379433
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379519
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379519
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379698
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379698
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379867
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835379956
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLexerExec-1751835380048
Tests run: 41, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.231 sec - in org.antlr.v4.test.TestLexerExec
Running org.antlr.v4.test.TestTokenStreamRewriter
Tests run: 40, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.137 sec - in org.antlr.v4.test.TestTokenStreamRewriter
Running org.antlr.v4.test.TestATNDeserialization
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec - in org.antlr.v4.test.TestATNDeserialization
Running org.antlr.v4.test.TestToolSyntaxErrors
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
grammar A;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
A;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
grammar ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
grammar A
a : ID ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
grammar A;
a : ID ;;
b : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
grammar A;;
a : ID ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
grammar A;
a @init : ID ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380306
!!!
grammar:
grammar A;
a  ( A | B ) D ;
b : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380310
!!!
grammar:
grammar A;
a : : A ;
b : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380311
!!!
grammar:
grammar A;
a : A 
b : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380311
!!!
grammar:
lexer grammar A;
A : 'a' 
B : 'b' ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380312
!!!
grammar:
grammar A;
a : A 
b[int i] returns [int y] : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380313
!!!
grammar:
grammar A;
a : b 
  catch [Exception e] {...}
b : B ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380313
!!!
grammar:
grammar A;
a : A 
  catch [Exception e] {...}

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380313
!!!
grammar:
grammar A;
a @ options {k=1;} : A ;
b : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380314
!!!
grammar:
grammar A;
a } : A ;
b : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380314
!!!
grammar:
grammar A;
a : A ;
mode foo;
b : B ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380315
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380323
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380329
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380336
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380343
!!!
grammar:
grammar A;
tokens{Foo}
b : Foo ;
X : 'foo' -> popmode;
Y : 'foo' -> token(Foo);
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380348
!!!
grammar:
grammar Oops;

ret_ty : A ;
ret_ty : B ;

A : 'a' ;
B : 'b' ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380352
!!!
grammar:
grammar A;
x : ;
y1 : x+;
y2 : x*;
z1 : ('foo' | 'bar'? 'bar2'?)*;
z2 : ('foo' | 'bar' 'bar2'? | 'bar2')*;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380356
!!!
grammar:
grammar A;
a : 'x
  ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380362
!!!
grammar:
grammar A;
_a : 'x' ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380369
!!!
grammar:
grammar A;
tokens{Foo}
b : Foo ;
X : 'foo' -> popMode(Foo);
Y : 'foo' -> type;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestToolSyntaxErrors-1751835380373
Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.074 sec - in org.antlr.v4.test.TestToolSyntaxErrors
Running org.antlr.v4.test.TestATNSerialization
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "~A", arrowhead = normal];
s3 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec - in org.antlr.v4.test.TestATNSerialization
Running org.antlr.v4.test.TestParseTrees
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835380413
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835380519
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835380635
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835380741
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835380844
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835380948
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835381051
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParseTrees-1751835381159
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.857 sec - in org.antlr.v4.test.TestParseTrees
Running org.antlr.v4.test.TestATNConstruction
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "action_0:-1", arrowhead = normal];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s4 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "D", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<b>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s3 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s3 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="&rarr;\n3+", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{5+\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s3 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="&rarr;\n3*", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{5*\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7*", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s5 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "{A, B}", arrowhead = normal];
s3 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "{'b', A}", arrowhead = normal];
s3 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="{&rarr;\n4\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s5[fontsize=11,label="&larr;\n5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s4:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s4:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="{&rarr;\n3\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s3:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s3:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s5:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "action_0:-1", arrowhead = normal];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="{&rarr;\n3\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s3:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s3:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "{A, B}", arrowhead = normal];
s4 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "{A, B}", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s4 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5+\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{7+\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "action_0:-1", arrowhead = normal];
s7:p0 -> s5 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s7:p1 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5+\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{7+\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s5:p2 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s4 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7:p0 -> s5 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s7:p1 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&rarr;\n4*", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="&larr;\n5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{6*\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8*", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="&rarr;\n9*", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="{11*\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13*", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11:p0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s11:p1 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "COMMA", arrowhead = normal];
s6:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "ID", arrowhead = normal];
s10 -> s13 [fontname="Times-Italic", label="&epsilon;"];
s5 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s13 -> s11 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s8 -> s6 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5*\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{7*\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9*", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7:p0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s7:p1 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "action_0:-1", arrowhead = normal];
s9 -> s7 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
}
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "pred_0:0", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "pred_0:1", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.024 sec - in org.antlr.v4.test.TestATNConstruction
Running org.antlr.v4.test.TestIntervalSet
Tests run: 39, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.antlr.v4.test.TestIntervalSet
Running org.antlr.v4.test.TestASTStructure
Tests run: 41, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in org.antlr.v4.test.TestASTStructure
Running org.antlr.v4.test.TestActionSplitter
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.antlr.v4.test.TestActionSplitter
Running org.antlr.v4.test.TestParserExec
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381302
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381394
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381394
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381606
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381701
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381792
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381881
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835381989
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382097
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382097
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382311
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382311
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382506
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382610
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382610
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382787
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382787
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382787
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835382787
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835383202
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835383310
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835383310
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestParserExec-1751835383524
Tests run: 16, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 2.333 sec - in org.antlr.v4.test.TestParserExec
Running org.antlr.v4.test.TestSets
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835383635
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835383732
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835383836
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835383945
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384048
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384137
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384238
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384338
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384338
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384536
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384639
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384737
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384832
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835384947
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385040
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385139
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385226
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385325
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385414
!!!
grammar:
grammar T;
a : A {System.out.println($A.text);} ;
A : ~('a'|B) ;
B : 'b' ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385420
!!!
grammar:
grammar T;
a : A {System.out.println($A.text);} ;
A : ~('a'|'aa') ;
B : 'b' ;

###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385424
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385523
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385628
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSets-1751835385732
Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.197 sec - in org.antlr.v4.test.TestSets
Running org.antlr.v4.test.TestTokenTypeAssignment
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec - in org.antlr.v4.test.TestTokenTypeAssignment
Running org.antlr.v4.test.TestFullContextParsing
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835385846
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835385846
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386055
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386164
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386268
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386268
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386480
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386589
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386697
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386697
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386697
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386697
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386697
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835386697
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestFullContextParsing-1751835387303
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.588 sec - in org.antlr.v4.test.TestFullContextParsing
Running org.antlr.v4.test.TestPerformance
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0 sec <<< FAILURE! - in org.antlr.v4.test.TestPerformance
compileJdk(org.antlr.v4.test.TestPerformance)  Time elapsed: 0 sec  <<< FAILURE!
java.lang.AssertionError: The JDK_SOURCE_ROOT environment variable must be set for performance testing.
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.assertTrue(Assert.java:43)
	at org.antlr.v4.test.TestPerformance.compileJdk(TestPerformance.java:403)

Running org.antlr.v4.test.TestATNInterpreter
[2, -1]
input=[2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "~A", arrowhead = normal];
s3 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 4, -1]
input=[1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 3, 4, -1]
input=[1, 2, 3, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 3, -1]
input=[1, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s7 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 1, 3, -1]
input=[1, 1, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="&rarr;\n3+", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{5+\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="&rarr;\n9+", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="{11+\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="{&rarr;\n14\nd=2|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s15[fontsize=11,label="&larr;\n15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s14 [fontname="Times-Italic", label="&epsilon;"];
s14:p0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14:p1 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s10 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s3 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s11:p0 -> s9 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s11:p1 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s13 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s15 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, -1]
input=[1, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[6, 2, -1]
input=[6, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[6, 3, -1]
input=[6, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 6, 5, 2, -1]
input=[4, 6, 5, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 6, 5, 3, -1]
input=[4, 6, 5, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 4, 6, 5, 5, 2, -1]
input=[4, 4, 6, 5, 5, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[4, 4, 6, 5, 5, 3, -1]
input=[4, 4, 6, 5, 5, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="{&rarr;\n10\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s11[fontsize=11,label="&larr;\n11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s10:p0 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s10:p1 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s6 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
digraph ATN {
rankdir=LR;
s3[fontsize=11, label="3", shape=doublecircle, fixedsize=true, width=.6];
s16[fontsize=11,label="16", shape=circle, fixedsize=true, width=.55, peripheries=1];
s17[fontsize=11,label="{&rarr;\n17\nd=1|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s18[fontsize=11,label="&larr;\n18", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s13[fontsize=11,label="13", shape=circle, fixedsize=true, width=.55, peripheries=1];
s14[fontsize=11,label="14", shape=circle, fixedsize=true, width=.55, peripheries=1];
s15[fontsize=11,label="15", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2 -> s17 [fontname="Times-Italic", label="&epsilon;"];
s17:p0 -> s12 [fontname="Times-Italic", label="&epsilon;"];
s17:p1 -> s16 [fontname="Times-Italic", label="&epsilon;"];
s12 -> s13 [fontsize=11, fontname="Courier", arrowsize=.7, label = "LP", arrowhead = normal];
s16 -> s18 [fontsize=11, fontname="Courier", arrowsize=.7, label = "INT", arrowhead = normal];
s13 -> s14 [fontsize=11, fontname="Courier", arrowsize=.7, label = "<e>", arrowhead = normal];
s18 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s14 -> s15 [fontsize=11, fontname="Courier", arrowsize=.7, label = "RP", arrowhead = normal];
s15 -> s18 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s4 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="&rarr;\n3+", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{5+\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s3 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 1, 2, -1]
input=[1, 1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="&rarr;\n3+", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{5+\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s3 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 1, 1, 1, 1, 1, 2, -1]
input=[1, 1, 1, 1, 1, 1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="&rarr;\n3+", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{5+\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s3 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 1, 2, 4, -1]
input=[1, 1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="&rarr;\n3+", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="&larr;\n4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{5+\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s3 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s3 [fontname="Times-Italic", label="&epsilon;", style="dashed"];
s5:p1 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, -1]
input=[1, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 3, -1]
input=[1, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
}
[1, -1]
input=[1, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 3, -1]
input=[1, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="{&rarr;\n5\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s6[fontsize=11,label="&larr;\n6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s5:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s5:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s8 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, -1]
input=[1, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 4, -1]
input=[1, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 4, -1]
input=[1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 3, 4, -1]
input=[1, 2, 3, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, -1]
input=[1, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 4, -1]
input=[1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s3 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s4 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, -1]
input=[1, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 4, -1]
input=[1, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 4, -1]
input=[1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, 2, 3, 4, -1]
input=[1, 2, 3, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
}
[1, -1]
input=[1, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 4, -1]
input=[1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="{&rarr;\n8\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s9[fontsize=11,label="&larr;\n9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s8:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s8:p2 -> s5 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s5 -> s6 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s9 -> s10 [fontname="Times-Italic", label="&epsilon;"];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s7 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 3, 4, -1]
input=[1, 2, 3, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="{&rarr;\n6\nd=0|{<p0>|<p1>}}", shape=record, fixedsize=false, peripheries=1];
s7[fontsize=11,label="&larr;\n7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s6:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s6:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s9 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s9 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 4, -1]
input=[1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{&rarr;\n7\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="&larr;\n8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s7:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s7:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s3 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "D", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 4, 3, -1]
input=[1, 2, 4, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{&rarr;\n7\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="&larr;\n8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s7:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s7:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s3 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "D", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[3, 4, -1]
input=[3, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="{&rarr;\n7\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s8[fontsize=11,label="&larr;\n8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="9", shape=circle, fixedsize=true, width=.55, peripheries=1];
s10[fontsize=11,label="10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s7 [fontname="Times-Italic", label="&epsilon;"];
s7:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s7:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s7:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s3 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s8 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "D", arrowhead = normal];
s10 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, -1]
input=[1, 2, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s12 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 3, -1]
input=[1, 2, 3, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s12 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
[1, 2, 4, -1]
input=[1, 2, 4, -1]
digraph ATN {
rankdir=LR;
s1[fontsize=11, label="1", shape=doublecircle, fixedsize=true, width=.6];
s0[fontsize=11,label="0", shape=circle, fixedsize=true, width=.55, peripheries=1];
s2[fontsize=11,label="2", shape=circle, fixedsize=true, width=.55, peripheries=1];
s3[fontsize=11,label="3", shape=circle, fixedsize=true, width=.55, peripheries=1];
s4[fontsize=11,label="4", shape=circle, fixedsize=true, width=.55, peripheries=1];
s5[fontsize=11,label="5", shape=circle, fixedsize=true, width=.55, peripheries=1];
s6[fontsize=11,label="6", shape=circle, fixedsize=true, width=.55, peripheries=1];
s7[fontsize=11,label="7", shape=circle, fixedsize=true, width=.55, peripheries=1];
s8[fontsize=11,label="8", shape=circle, fixedsize=true, width=.55, peripheries=1];
s9[fontsize=11,label="{&rarr;\n9\nd=0|{<p0>|<p1>|<p2>}}", shape=record, fixedsize=false, peripheries=1];
s10[fontsize=11,label="&larr;\n10", shape=circle, fixedsize=true, width=.55, peripheries=1];
s11[fontsize=11,label="11", shape=circle, fixedsize=true, width=.55, peripheries=1];
s12[fontsize=11,label="12", shape=circle, fixedsize=true, width=.55, peripheries=1];
s0 -> s9 [fontname="Times-Italic", label="&epsilon;"];
s9:p0 -> s2 [fontname="Times-Italic", label="&epsilon;"];
s9:p1 -> s4 [fontname="Times-Italic", label="&epsilon;"];
s9:p2 -> s6 [fontname="Times-Italic", label="&epsilon;"];
s2 -> s3 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s4 -> s5 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s6 -> s7 [fontsize=11, fontname="Courier", arrowsize=.7, label = "A", arrowhead = normal];
s3 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s5 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s7 -> s8 [fontsize=11, fontname="Courier", arrowsize=.7, label = "B", arrowhead = normal];
s10 -> s11 [fontname="Times-Italic", label="&epsilon;"];
s8 -> s10 [fontsize=11, fontname="Courier", arrowsize=.7, label = "C", arrowhead = normal];
s11 -> s12 [fontsize=11, fontname="Courier", arrowsize=.7, label = "EOF", arrowhead = normal];
s12 -> s1 [fontname="Times-Italic", label="&epsilon;"];
}
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 sec - in org.antlr.v4.test.TestATNInterpreter
Running org.antlr.v4.test.TestScopeParsing
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.antlr.v4.test.TestScopeParsing
Running org.antlr.v4.test.TestCompositeGrammars
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387492
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387581
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387672
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387788
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387796
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387909
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387923
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387940
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835387955
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388057
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388146
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388246
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388336
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388437
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388541
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388634
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388732
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388828
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835388921
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835389014
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835389090
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestCompositeGrammars-1751835389178
Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.788 sec - in org.antlr.v4.test.TestCompositeGrammars
Running org.antlr.v4.test.TestUnbufferedCharStream
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec - in org.antlr.v4.test.TestUnbufferedCharStream
Running org.antlr.v4.test.TestLeftRecursion
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389285
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389292
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389297
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389303
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389309
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389317
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389323
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389328
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389334
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389345
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389353
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389359
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389365
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389370
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestLeftRecursion-1751835389376
Tests run: 15, Failures: 0, Errors: 15, Skipped: 0, Time elapsed: 0.095 sec <<< FAILURE! - in org.antlr.v4.test.TestLeftRecursion
testSimple(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.006 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestLeftRecursion.testSimple(TestLeftRecursion.java:51)

testSemPred(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.005 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestLeftRecursion.testSemPred(TestLeftRecursion.java:106)

testTernaryExpr(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.005 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testTernaryExpr(TestLeftRecursion.java:135)

testExpressions(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.006 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testExpressions(TestLeftRecursion.java:163)

testJavaExpressions(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testJavaExpressions(TestLeftRecursion.java:239)

testDeclarations(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.006 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testDeclarations(TestLeftRecursion.java:270)

testReturnValueAndActions(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.005 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testReturnValueAndActions(TestLeftRecursion.java:291)

testLabelsOnOpSubrule(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.006 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testLabelsOnOpSubrule(TestLeftRecursion.java:309)

testAmbigLR(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.011 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestLeftRecursion.testAmbigLR(TestLeftRecursion.java:384)

testWhitespaceInfluence(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.008 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestLeftRecursion.testWhitespaceInfluence(TestLeftRecursion.java:493)

testDirectCallToLeftRecursiveRule(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.006 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.BaseTest.execParser(BaseTest.java:488)
	at org.antlr.v4.test.TestLeftRecursion.testDirectCallToLeftRecursiveRule(TestLeftRecursion.java:81)

testReturnValueAndActionsAndLabels(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.006 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testReturnValueAndActionsAndLabels(TestLeftRecursion.java:336)

testPrefixOpWithActionAndLabel(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.005 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:520)
	at org.antlr.v4.test.BaseTest.rawGenerateAndBuildRecognizer(BaseTest.java:508)
	at org.antlr.v4.test.TestLeftRecursion.runTests(TestLeftRecursion.java:505)
	at org.antlr.v4.test.TestLeftRecursion.testPrefixOpWithActionAndLabel(TestLeftRecursion.java:357)

testCheckForNonLeftRecursiveRule(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.005 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.testErrors(BaseTest.java:675)
	at org.antlr.v4.test.TestLeftRecursion.testCheckForNonLeftRecursiveRule(TestLeftRecursion.java:417)

testCheckForLeftRecursiveEmptyFollow(org.antlr.v4.test.TestLeftRecursion)  Time elapsed: 0.005 sec  <<< ERROR!
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
	at java.base/java.util.Objects.checkIndex(Objects.java:372)
	at java.base/java.util.ArrayList.get(ArrayList.java:459)
	at org.antlr.v4.misc.OrderedHashMap.getElement(OrderedHashMap.java:46)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.setAltASTPointers(LeftRecursiveRuleTransformer.java:241)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:162)
	at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
	at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)
	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)
	at org.antlr.v4.Tool.process(Tool.java:384)
	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)
	at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:429)
	at org.antlr.v4.test.BaseTest.testErrors(BaseTest.java:675)
	at org.antlr.v4.test.TestLeftRecursion.testCheckForLeftRecursiveEmptyFollow(TestLeftRecursion.java:431)

Running org.antlr.v4.test.TestUnbufferedTokenStream
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec - in org.antlr.v4.test.TestUnbufferedTokenStream
Running org.antlr.v4.test.TestBufferedTokenStream
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec - in org.antlr.v4.test.TestBufferedTokenStream
Running org.antlr.v4.test.TestGraphNodes
digraph G {
rankdir=LR;
  s0[label="*"];
}

digraph G {
rankdir=LR;
  s0[label="*"];
}

digraph G {
rankdir=LR;
  s0[label="*"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[label="*"];
  s0->s1[label="1"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[label="*"];
  s0->s1[label="1"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s1[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[label="1"];
  s2[label="*"];
  s0->s1[label="1"];
  s1->s2[label="9"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s1[label="1"];
  s2[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
  s1->s2[label="9"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s2[label="2"];
  s3[label="*"];
  s1[label="1"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s2->s3[label="10"];
  s1->s3[label="9"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s2[label="2"];
  s1[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s2->s1[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[label="*"];
  s0->s1[label="1"];
}

digraph G {
rankdir=LR;
  s0[label="$"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>$"];
  s1[label="$"];
  s0:p0->s1[label="9"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>$"];
  s1[label="$"];
  s0:p0->s1[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[shape=record, label="<p0>|<p1>$"];
  s2[label="$"];
  s0->s1[label="1"];
  s1:p0->s2[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[label="*"];
  s0->s1[label="1"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>$"];
  s1[shape=record, label="<p0>|<p1>$"];
  s2[label="$"];
  s0:p0->s1[label="8"];
  s1:p0->s2[label="8"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[shape=record, label="<p0>|<p1>$"];
  s2[label="$"];
  s0->s1[label="1"];
  s1:p0->s2[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[label="1"];
  s2[label="*"];
  s0->s1[label="1"];
  s1->s2[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[label="1"];
  s2[label="2"];
  s3[label="*"];
  s0->s1[label="1"];
  s1->s2[label="2"];
  s2->s3[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[shape=record, label="<p0>|<p1>"];
  s2[label="2"];
  s3[label="*"];
  s0->s1[label="1"];
  s1:p0->s2[label="2"];
  s1:p1->s2[label="3"];
  s2->s3[label="9"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s1[label="1"];
  s2[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
  s1->s2[label="9"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s2[label="2"];
  s1[label="$"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s2->s1[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="$"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>"];
  s1[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
  s0:p2->s1[label="3"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>"];
  s1[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
  s0:p2->s1[label="3"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>"];
  s1[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
  s0:p2->s1[label="3"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s1[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s1[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>"];
  s2[label="2"];
  s3[label="*"];
  s1[label="1"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s2->s3[label="10"];
  s1->s3[label="9"];
}

digraph G {
rankdir=LR;
  s0[label="0"];
  s1[shape=record, label="<p0>|<p1>"];
  s2[label="*"];
  s0->s1[label="1"];
  s1:p0->s2[label="9"];
  s1:p1->s2[label="10"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>"];
  s2[label="*"];
  s1[shape=record, label="<p0>|<p1>"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="3"];
  s0:p2->s2[label="4"];
  s1:p0->s2[label="9"];
  s1:p1->s2[label="10"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>|<p3>"];
  s4[label="4"];
  s5[label="*"];
  s3[label="3"];
  s2[label="2"];
  s1[label="1"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s0:p2->s3[label="3"];
  s0:p3->s4[label="4"];
  s4->s5[label="9"];
  s3->s5[label="8"];
  s2->s5[label="7"];
  s1->s5[label="6"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>"];
  s3[label="3"];
  s4[label="*"];
  s2[label="2"];
  s1[label="1"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s0:p2->s3[label="4"];
  s3->s4[label="9"];
  s2->s4[label="7"];
  s1->s4[label="6"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>"];
  s3[label="3"];
  s4[label="*"];
  s2[shape=record, label="<p0>|<p1>"];
  s1[label="1"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s0:p2->s3[label="4"];
  s3->s4[label="9"];
  s2:p0->s4[label="7"];
  s2:p1->s4[label="8"];
  s1->s4[label="6"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>"];
  s2[label="2"];
  s3[label="*"];
  s1[label="1"];
  s0:p0->s1[label="1"];
  s0:p1->s2[label="2"];
  s0:p2->s1[label="4"];
  s2->s3[label="7"];
  s1->s3[label="6"];
}

digraph G {
rankdir=LR;
  s0[shape=record, label="<p0>|<p1>|<p2>|<p3>"];
  s1[label="1"];
  s2[label="*"];
  s0:p0->s1[label="1"];
  s0:p1->s1[label="2"];
  s0:p2->s1[label="3"];
  s0:p3->s1[label="4"];
  s1->s2[label="6"];
}

Tests run: 38, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.001 sec - in org.antlr.v4.test.TestGraphNodes
Running org.antlr.v4.test.TestSemPredEvalParser
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835389414
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835389519
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835389626
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835389731
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835389838
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835389941
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390046
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390147
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390252
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390356
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390460
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390567
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390676
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390802
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835390910
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391012
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391117
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391225
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391327
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391433
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391533
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391651
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391769
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSemPredEvalParser-1751835391769
Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.555 sec - in org.antlr.v4.test.TestSemPredEvalParser
Running org.antlr.v4.test.TestSymbolIssues
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSymbolIssues-1751835391969
!!!
grammar:
parser grammar B;
tokens { ID, FOO, X, Y }

a : s=ID b+=ID X=ID '.' ;

b : x=ID x+=ID ;

s : FOO ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSymbolIssues-1751835391970
!!!
grammar:
parser grammar D;
tokens{ID}
a[int j] 
        :       i=ID j=ID ;

b[int i] returns [int i] : ID ;

c[int i] returns [String k]
        :       ID ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSymbolIssues-1751835391970
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSymbolIssues-1751835391973
!!!
grammar:
grammar A;
options { opt='sss'; k=3; }

@members {foo}
@members {bar}
@lexer::header {package jj;}
@lexer::header {package kk;}

a[int i] returns [foo f] : X ID a[3] b[34] c ;
b returns [int g] : Y 'y' 'if' a ;
c : FJKD ;

ID : 'a'..'z'+ ID ;
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSymbolIssues-1751835391976
!!!
grammar:
lexer grammar L;
A : 'a';
mode X;
fragment B : 'b';
###
dir /var/folders/qv/gp4gxrr95s1fgz2d27w5rsd00000gn/T/TestSymbolIssues-1751835391976
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec - in org.antlr.v4.test.TestSymbolIssues

Results :

Failed tests: 
  TestParseErrors.testConjuringUpToken:86 expected:<...-1='<missing 'b'>',<[1]>,1:1]
> but was:<...-1='<missing 'b'>',<[2]>,1:1]
>
  TestParseErrors.testConjuringUpTokenFromSet:105 expected:<...-1='<missing 'b'>',<[1]>,1:1]
> but was:<...-1='<missing 'b'>',<[2]>,1:1]
>
  TestParseErrors.testMultiTokenDeletionBeforeLoop2:215 expected:<...a' expecting {'b', '[z', 'c]'}
> but was:<...a' expecting {'b', '[c', 'z]'}
>
  TestParseErrors.testSingleTokenDeletionDuringLoop2:225 expected:<...a' expecting {'b', '[z', 'c]'}
> but was:<...a' expecting {'b', '[c', 'z]'}
>
  TestParseErrors.testMultiTokenDeletionDuringLoop2:237 expected:<...a' expecting {'b', '[z', 'c'}
line 1:6 extraneous input 'a' expecting {'b', 'z', 'c]'}
> but was:<...a' expecting {'b', '[c', 'z'}
line 1:6 extraneous input 'a' expecting {'b', 'c', 'z]'}
>
  TestTopologicalSort.testFairlyLargeGraph:59 expected:<[H, F, E, D, [G, A, B], C]> but was:<[H, F, E, D, [A, B, G], C]>
  TestTopologicalSort.testSimpleTokenDependence:101 expected:<...va.g4, Java.tokens, [Ref.g4, D]ef.g4]> but was:<...va.g4, Java.tokens, [Def.g4, R]ef.g4]>
  TestTopologicalSort.testParserLexerCombo:115 expected:<...ens, JavaParser.g4, [Ref.g4, D]ef.g4]> but was:<...ens, JavaParser.g4, [Def.g4, R]ef.g4]>
  TestPerformance.compileJdk:403 The JDK_SOURCE_ROOT environment variable must be set for performance testing.

Tests in error: 
  TestListeners.testLR:177->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestListeners.testLRWithLabels:217->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestParseErrors.testInvalidATNStateRemoval:363->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestParseErrors.testDuplicatedLeftRecursiveCall:317->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLexerErrors.testLexerExecDFA:201->BaseTest.execLexer:466->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testSimple:51->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testSemPred:106->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testTernaryExpr:135->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testExpressions:163->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testJavaExpressions:239->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testDeclarations:270->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testReturnValueAndActions:291->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testLabelsOnOpSubrule:309->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testAmbigLR:384->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testWhitespaceInfluence:493->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testDirectCallToLeftRecursiveRule:81->BaseTest.execParser:488->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testReturnValueAndActionsAndLabels:336->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testPrefixOpWithActionAndLabel:357->runTests:505->BaseTest.rawGenerateAndBuildRecognizer:508->BaseTest.rawGenerateAndBuildRecognizer:520->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testCheckForNonLeftRecursiveRule:417->BaseTest.testErrors:675->BaseTest.antlr:429 » IndexOutOfBounds
  TestLeftRecursion.testCheckForLeftRecursiveEmptyFollow:431->BaseTest.testErrors:675->BaseTest.antlr:429 » IndexOutOfBounds

Tests run: 679, Failures: 9, Errors: 20, Skipped: 2

[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1mReactor Summary for ANTLR 4 4.1-SNAPSHOT:[m
[[1;34mINFO[m] 
[[1;34mINFO[m] ANTLR 4 ............................................ [1;32mSUCCESS[m [  0.084 s]
[[1;34mINFO[m] ANTLR 4 Runtime .................................... [1;32mSUCCESS[m [  0.149 s]
[[1;34mINFO[m] ANTLR 4 Tool ....................................... [1;31mFAILURE[m [ 22.898 s]
[[1;34mINFO[m] ANTLR 4 Maven plugin ............................... [1;33mSKIPPED[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;31mBUILD FAILURE[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  23.174 s
[[1;34mINFO[m] Finished at: 2025-07-06T16:56:31-04:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-surefire-plugin:2.15:test[m [1m(default-test)[m on project [36mantlr4[m: [1;31mThere are test failures.[m
[[1;31mERROR[m] [1;31m[m
[[1;31mERROR[m] [1;31mPlease refer to /Users/jeancarlorspaul/IdeaProjects/antlr4/tool/target/surefire-reports for the individual test results.[m
[[1;31mERROR[m] -> [1m[Help 1][m
[[1;31mERROR[m] 
[[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.
[[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.
[[1;31mERROR[m] 
[[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:
[[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[[1;31mERROR[m] 
[[1;31mERROR[m] After correcting the problems, you can resume the build with the command
[[1;31mERROR[m]   [1mmvn <args> -rf :antlr4[m
